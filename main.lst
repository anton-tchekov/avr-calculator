   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  11               	field_grow:
  12               	.LVL0:
  13               	.LFB23:
  14               		.file 1 "main.c"
   1:main.c        **** #include <avr/io.h>
   2:main.c        **** #include <avr/power.h>
   3:main.c        **** #include <avr/sleep.h>
   4:main.c        **** #include <avr/pgmspace.h>
   5:main.c        **** #include <avr/interrupt.h>
   6:main.c        **** #include <util/delay.h>
   7:main.c        **** #include <math.h>
   8:main.c        **** #include <ctype.h>
   9:main.c        **** #include <stdint.h>
  10:main.c        **** #include <stdlib.h>
  11:main.c        **** #include "lcd.c"
  12:main.c        **** 
  13:main.c        **** #define PIN_SHIFT               4
  14:main.c        **** 
  15:main.c        **** #define MSG_START_LEN           6
  16:main.c        **** #define MSG_STEP_LEN            5
  17:main.c        **** #define MSG_ERROR_LEN           5
  18:main.c        **** #define FIELD_START_WIDTH      16
  19:main.c        **** #define FIELD_STEP_WIDTH       16
  20:main.c        **** #define FIELD_NUMBER_WIDTH     16
  21:main.c        **** #define NUMBER_STACK_SIZE      32
  22:main.c        **** #define OPERATOR_STACK_SIZE    32
  23:main.c        **** #define TOKEN_LIST_SIZE        32
  24:main.c        **** #define OUTPUT_PRECISION        4
  25:main.c        **** #define MODE_TABLE_STEP_BIG    10
  26:main.c        **** #define TERM_MAX_LEN          256
  27:main.c        **** 
  28:main.c        **** #define UNSHIFT(key)             (key & ~(1 << 4))
  29:main.c        **** #define RAD_TO_DEG(rad)          ((rad) * (180.0 / M_PI))
  30:main.c        **** #define DEG_TO_RAD(deg)          ((deg) * M_PI / 180.0)
  31:main.c        **** #define SIND(x)                  (sin(DEG_TO_RAD((float)(x))))
  32:main.c        **** #define COSD(x)                  (cos(DEG_TO_RAD((float)(x))))
  33:main.c        **** #define TAND(x)                  (tan(DEG_TO_RAD((float)(x))))
  34:main.c        **** #define ASIND(x)                 (RAD_TO_DEG(asin((float)(x))))
  35:main.c        **** #define ACOSD(x)                 (RAD_TO_DEG(acos((float)(x))))
  36:main.c        **** #define ATAND(x)                 (RAD_TO_DEG(atan((float)(x))))
  37:main.c        **** #define FORMAT_NUMBER(v, s, n) \
  38:main.c        **** 	(uint8_t *)dtostrf(v, n, OUTPUT_PRECISION, (char *)s)
  39:main.c        **** 
  40:main.c        **** enum KEY
  41:main.c        **** {
  42:main.c        **** 	KEY_NULL = -1,
  43:main.c        **** 
  44:main.c        **** 	KEY_3_3,
  45:main.c        **** 	KEY_2_3,
  46:main.c        **** 	KEY_1_3,
  47:main.c        **** 	KEY_0_3,
  48:main.c        **** 
  49:main.c        **** 	KEY_3_2,
  50:main.c        **** 	KEY_2_2,
  51:main.c        **** 	KEY_1_2,
  52:main.c        **** 	KEY_0_2,
  53:main.c        **** 
  54:main.c        **** 	KEY_3_1,
  55:main.c        **** 	KEY_2_1,
  56:main.c        **** 	KEY_1_1,
  57:main.c        **** 	KEY_0_1,
  58:main.c        **** 
  59:main.c        **** 	KEY_3_0,
  60:main.c        **** 	KEY_2_0,
  61:main.c        **** 	KEY_1_0,
  62:main.c        **** 	KEY_0_0,
  63:main.c        **** 
  64:main.c        **** 	KEY_SHIFT_3_3,
  65:main.c        **** 	KEY_SHIFT_2_3,
  66:main.c        **** 	KEY_SHIFT_1_3,
  67:main.c        **** 	KEY_SHIFT_0_3,
  68:main.c        **** 
  69:main.c        **** 	KEY_SHIFT_3_2,
  70:main.c        **** 	KEY_SHIFT_2_2,
  71:main.c        **** 	KEY_SHIFT_1_2,
  72:main.c        **** 	KEY_SHIFT_0_2,
  73:main.c        **** 
  74:main.c        **** 	KEY_SHIFT_3_1,
  75:main.c        **** 	KEY_SHIFT_2_1,
  76:main.c        **** 	KEY_SHIFT_1_1,
  77:main.c        **** 	KEY_SHIFT_0_1,
  78:main.c        **** 
  79:main.c        **** 	KEY_SHIFT_3_0,
  80:main.c        **** 	KEY_SHIFT_2_0,
  81:main.c        **** 	KEY_SHIFT_1_0,
  82:main.c        **** 	KEY_SHIFT_0_0
  83:main.c        **** };
  84:main.c        **** 
  85:main.c        **** enum PGM_STRING
  86:main.c        **** {
  87:main.c        **** 	STR_PRESS_ANY_KEY,
  88:main.c        **** 	ERROR_SYNTAX,
  89:main.c        **** 	ERROR_MATH,
  90:main.c        **** 	ERROR_NOMEM,
  91:main.c        **** 	ERROR_RANGE,
  92:main.c        **** 	STR_SIN,
  93:main.c        **** 	STR_COS,
  94:main.c        **** 	STR_TAN,
  95:main.c        **** 	STR_ASIN,
  96:main.c        **** 	STR_ACOS,
  97:main.c        **** 	STR_ATAN,
  98:main.c        **** 	STR_START,
  99:main.c        **** 	STR_STEP,
 100:main.c        **** 	STR_ERROR,
 101:main.c        **** };
 102:main.c        **** 
 103:main.c        **** /* Character values for pi and div are taken
 104:main.c        **** from the Hitachi HD44780 LCD controller datasheet */
 105:main.c        **** enum CHAR
 106:main.c        **** {
 107:main.c        **** 	CHAR_X = 'x',
 108:main.c        **** 	CHAR_DP = '.',
 109:main.c        **** 	CHAR_LP = '(',
 110:main.c        **** 	CHAR_RP = ')',
 111:main.c        **** 	CHAR_PI = 0xF7, /* 0b11110111 */
 112:main.c        **** 	CHAR_ADD = '+',
 113:main.c        **** 	CHAR_SUB = '-',
 114:main.c        **** 	CHAR_MUL = '*',
 115:main.c        **** 	CHAR_DIV = 0xFD, /* 0b11111101 */
 116:main.c        **** 	CHAR_POW = '^',
 117:main.c        **** };
 118:main.c        **** 
 119:main.c        **** enum TOKEN_TYPE
 120:main.c        **** {
 121:main.c        **** 	/* Infix */
 122:main.c        **** 	TT_NULL,
 123:main.c        **** 	TT_NUMBER,
 124:main.c        **** 	TT_X,
 125:main.c        **** 	TT_LP,
 126:main.c        **** 	TT_RP,
 127:main.c        **** 
 128:main.c        **** 	/* Postfix */
 129:main.c        **** 	/* Unary */
 130:main.c        **** 	TT_UNARY_MINUS,
 131:main.c        **** 	TT_LOG,
 132:main.c        **** 	TT_SIN,
 133:main.c        **** 	TT_COS,
 134:main.c        **** 	TT_TAN,
 135:main.c        **** 	TT_ASIN,
 136:main.c        **** 	TT_ACOS,
 137:main.c        **** 	TT_ATAN,
 138:main.c        **** 
 139:main.c        **** 	/* Binary */
 140:main.c        **** 	TT_ADD,
 141:main.c        **** 	TT_SUB,
 142:main.c        **** 	TT_MUL,
 143:main.c        **** 	TT_DIV,
 144:main.c        **** 	TT_POW,
 145:main.c        **** };
 146:main.c        **** 
 147:main.c        **** typedef struct FIELD
 148:main.c        **** {
 149:main.c        **** 	uint8_t row, col, width;
 150:main.c        **** 	uint8_t *buf;
 151:main.c        **** 	int16_t pos, len, max;
 152:main.c        **** } Field;
 153:main.c        **** 
 154:main.c        **** /* Constants in Flash Memory */
 155:main.c        **** static const uint8_t _str_sin[] PROGMEM = "sin";
 156:main.c        **** static const uint8_t _str_cos[] PROGMEM = "cos";
 157:main.c        **** static const uint8_t _str_tan[] PROGMEM = "tan";
 158:main.c        **** static const uint8_t _str_asin[] PROGMEM = "asin";
 159:main.c        **** static const uint8_t _str_acos[] PROGMEM = "acos";
 160:main.c        **** static const uint8_t _str_atan[] PROGMEM = "atan";
 161:main.c        **** static const uint8_t _str_log[] PROGMEM = "log";
 162:main.c        **** static const uint8_t _str_start[] PROGMEM = "START=";
 163:main.c        **** static const uint8_t _str_step[] PROGMEM = "STEP=";
 164:main.c        **** static const uint8_t _str_error[] PROGMEM = "ERROR";
 165:main.c        **** static const uint8_t _str_press_any_key[] PROGMEM = "Press any key";
 166:main.c        **** static const uint8_t _str_syntax_error[] PROGMEM = "Syntax Error";
 167:main.c        **** static const uint8_t _str_math_error[] PROGMEM = "Math. Error";
 168:main.c        **** static const uint8_t _str_not_enough_mem[] PROGMEM = "Not enough mem.";
 169:main.c        **** static const uint8_t _str_range_error[] PROGMEM = "Range Error";
 170:main.c        **** 
 171:main.c        **** static const uint8_t *const _err_msg[] PROGMEM =
 172:main.c        **** {
 173:main.c        **** 	_str_syntax_error,
 174:main.c        **** 	_str_math_error,
 175:main.c        **** 	_str_not_enough_mem,
 176:main.c        **** 	_str_range_error
 177:main.c        **** };
 178:main.c        **** 
 179:main.c        **** static Field fld_term;
 180:main.c        **** static uint8_t buf_term[TERM_MAX_LEN];
 181:main.c        **** static uint8_t x_cnt;
 182:main.c        **** 
 183:main.c        **** static Field fld_start;
 184:main.c        **** static uint8_t buf_start[FIELD_START_WIDTH];
 185:main.c        **** 
 186:main.c        **** static Field fld_step;
 187:main.c        **** static uint8_t buf_step[FIELD_STEP_WIDTH];
 188:main.c        **** 
 189:main.c        **** static Field *tbl_cur_fld;
 190:main.c        **** static float tbl_pos, tbl_start, tbl_step;
 191:main.c        **** 
 192:main.c        **** static uint8_t tok_cnt;
 193:main.c        **** static uint8_t op_stack[OPERATOR_STACK_SIZE];
 194:main.c        **** static float num_stack[NUMBER_STACK_SIZE];
 195:main.c        **** static uint8_t tok_type_list[TOKEN_LIST_SIZE];
 196:main.c        **** static float tok_num_list[TOKEN_LIST_SIZE];
 197:main.c        **** 
 198:main.c        **** static uint8_t _buf_conv[LCD_WIDTH + 1];
 199:main.c        **** 
 200:main.c        **** static const Field _fld_term_P PROGMEM =
 201:main.c        **** {
 202:main.c        **** 	0, 0, LCD_WIDTH,
 203:main.c        **** 	buf_term,
 204:main.c        **** 	0, 0, TERM_MAX_LEN
 205:main.c        **** };
 206:main.c        **** 
 207:main.c        **** static const Field _fld_start_P PROGMEM =
 208:main.c        **** {
 209:main.c        **** 	0, MSG_START_LEN, LCD_WIDTH - MSG_START_LEN,
 210:main.c        **** 	buf_start,
 211:main.c        **** 	0, 0, FIELD_START_WIDTH
 212:main.c        **** };
 213:main.c        **** 
 214:main.c        **** static const Field _fld_step_P PROGMEM =
 215:main.c        **** {
 216:main.c        **** 	1, MSG_STEP_LEN, LCD_WIDTH - MSG_STEP_LEN,
 217:main.c        **** 	buf_step,
 218:main.c        **** 	0, 0, FIELD_STEP_WIDTH
 219:main.c        **** };
 220:main.c        **** 
 221:main.c        **** static void (*_event)(uint8_t);
 222:main.c        **** static void (*_mode)(void);
 223:main.c        **** 
 224:main.c        **** /* Field */
 225:main.c        **** static void field_grow(Field *f, uint8_t n);
 226:main.c        **** static void field_shrink(Field *f, uint8_t n);
 227:main.c        **** static void field_ins_chr(Field *f, uint8_t c);
 228:main.c        **** static void field_ins_str_P(Field *f, const uint8_t *s, uint8_t n);
 229:main.c        **** static void field_clear(Field *f);
 230:main.c        **** static void field_delete(Field *f);
 231:main.c        **** static void field_mv_left(Field *f);
 232:main.c        **** static void field_mv_right(Field *f);
 233:main.c        **** static void field_update(Field *f);
 234:main.c        **** 
 235:main.c        **** /* Term Field */
 236:main.c        **** static void field_term_delete(Field *f);
 237:main.c        **** static void field_term_mv_left(Field *f);
 238:main.c        **** static void field_term_mv_right(Field *f);
 239:main.c        **** 
 240:main.c        **** /* Number Field */
 241:main.c        **** static void field_number_event(Field *f, uint8_t key);
 242:main.c        **** 
 243:main.c        **** /* Input Mode */
 244:main.c        **** static void mode_input(void);
 245:main.c        **** static void mode_input_event(uint8_t key);
 246:main.c        **** 
 247:main.c        **** /* Result Mode */
 248:main.c        **** static void mode_result(float y);
 249:main.c        **** static void mode_result_event(uint8_t key);
 250:main.c        **** 
 251:main.c        **** /* Table Mode */
 252:main.c        **** static void mode_table(void);
 253:main.c        **** static void mode_table_event(uint8_t key);
 254:main.c        **** static void mode_table_update(void);
 255:main.c        **** 
 256:main.c        **** /* Settings Mode */
 257:main.c        **** static void mode_settings(void);
 258:main.c        **** static void mode_settings_event(uint8_t key);
 259:main.c        **** 
 260:main.c        **** /* Error Mode */
 261:main.c        **** static void mode_error(uint8_t err);
 262:main.c        **** static void mode_error_event(uint8_t key);
 263:main.c        **** 
 264:main.c        **** /* Calculation */
 265:main.c        **** static uint8_t calc_prepare(uint8_t *term);
 266:main.c        **** static uint8_t calc_solve(float x, float *y);
 267:main.c        **** static uint8_t asin_acos_range(float n);
 268:main.c        **** static uint8_t get_precedence(uint8_t tt);
 269:main.c        **** 
 270:main.c        **** int main(void)
 271:main.c        **** {
 272:main.c        **** 	lcd_init();
 273:main.c        **** 
 274:main.c        **** 	/* CTC Mode */
 275:main.c        **** 	TCCR2A = (1 << WGM21);
 276:main.c        **** 
 277:main.c        **** 	/* Prescaler 1024 */
 278:main.c        **** 	TCCR2B = (1 << CS22) | (1 << CS20);
 279:main.c        **** 
 280:main.c        **** 	/* Enable compare match interrupt */
 281:main.c        **** 	TIMSK2 = (1 << OCIE2A);
 282:main.c        **** 
 283:main.c        **** 	/* 100 Hz / 10 ms at F_OSC = 8 MHz */
 284:main.c        **** 	OCR2A = 78;
 285:main.c        **** 
 286:main.c        **** 	/* Internal pullups on shift and mode button
 287:main.c        **** 	pins and on all other unused pins */
 288:main.c        **** 	PORTB |= (1 << PIN_SHIFT) | (1 << 5) | (1 << 6) | (1 << 7);
 289:main.c        **** 	PORTC |= (1 << 4) | (1 << 5);
 290:main.c        **** 	PORTD |= (1 << 0) | (1 << 1);
 291:main.c        **** 
 292:main.c        **** 	memcpy_P(&fld_term, &_fld_term_P, sizeof(Field));
 293:main.c        **** 	memcpy_P(&fld_start, &_fld_start_P, sizeof(Field));
 294:main.c        **** 	memcpy_P(&fld_step, &_fld_step_P, sizeof(Field));
 295:main.c        **** 	mode_input();
 296:main.c        **** 
 297:main.c        **** 	sei();
 298:main.c        **** 
 299:main.c        **** 	/* Reduce power usage by disabling unused modules
 300:main.c        **** 	and enabling sleep modes */
 301:main.c        **** 	power_adc_disable();
 302:main.c        **** 	power_spi_disable();
 303:main.c        **** 	power_twi_disable();
 304:main.c        **** 	power_timer0_disable();
 305:main.c        **** 	power_timer1_disable();
 306:main.c        **** 	power_usart0_disable();
 307:main.c        **** 	sleep_enable();
 308:main.c        **** 	set_sleep_mode(SLEEP_MODE_PWR_SAVE);
 309:main.c        **** 	for(;;) { sleep_cpu(); }
 310:main.c        **** 	return 0;
 311:main.c        **** }
 312:main.c        **** 
 313:main.c        **** /* Field */
 314:main.c        **** static void field_grow(Field *f, uint8_t n)
 315:main.c        **** {
  15               		.loc 1 315 1 view -0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
  21               		.loc 1 315 1 is_stmt 0 view .LVU1
  22 0000 FC01      		movw r30,r24
 316:main.c        **** 	if(f->buf[f->pos])
  23               		.loc 1 316 2 is_stmt 1 view .LVU2
  24               		.loc 1 316 11 is_stmt 0 view .LVU3
  25 0002 A381      		ldd r26,Z+3
  26 0004 B481      		ldd r27,Z+4
  27 0006 8581      		ldd r24,Z+5
  28 0008 9681      		ldd r25,Z+6
  29               	.LVL1:
  30               		.loc 1 316 11 view .LVU4
  31 000a A80F      		add r26,r24
  32 000c B91F      		adc r27,r25
  33               		.loc 1 316 4 view .LVU5
  34 000e 8C91      		ld r24,X
  35 0010 70E0      		ldi r23,0
  36 0012 8111      		cpse r24,__zero_reg__
  37 0014 00C0      		rjmp .L2
  38               	.L5:
 317:main.c        **** 	{
 318:main.c        **** 		int16_t i;
 319:main.c        **** 		for(i = f->len - 1; i >= f->pos; --i)
 320:main.c        **** 		{
 321:main.c        **** 			f->buf[i + n] = f->buf[i];
 322:main.c        **** 		}
 323:main.c        **** 	}
 324:main.c        **** 
 325:main.c        **** 	f->len += n;
  39               		.loc 1 325 2 is_stmt 1 view .LVU6
  40               		.loc 1 325 9 is_stmt 0 view .LVU7
  41 0016 8781      		ldd r24,Z+7
  42 0018 9085      		ldd r25,Z+8
  43 001a 680F      		add r22,r24
  44 001c 791F      		adc r23,r25
  45               	.LVL2:
  46               		.loc 1 325 9 view .LVU8
  47 001e 7087      		std Z+8,r23
  48 0020 6783      		std Z+7,r22
 326:main.c        **** 	f->buf[f->len] = '\0';
  49               		.loc 1 326 2 is_stmt 1 view .LVU9
  50               		.loc 1 326 17 is_stmt 0 view .LVU10
  51 0022 8381      		ldd r24,Z+3
  52 0024 9481      		ldd r25,Z+4
  53 0026 680F      		add r22,r24
  54 0028 791F      		adc r23,r25
  55 002a FB01      		movw r30,r22
  56               	.LVL3:
  57               		.loc 1 326 17 view .LVU11
  58 002c 1082      		st Z,__zero_reg__
  59               	/* epilogue start */
 327:main.c        **** }
  60               		.loc 1 327 1 view .LVU12
  61 002e 0895      		ret
  62               	.LVL4:
  63               	.L2:
  64               	.LBB30:
 318:main.c        **** 		for(i = f->len - 1; i >= f->pos; --i)
  65               		.loc 1 318 3 is_stmt 1 view .LVU13
 319:main.c        **** 		{
  66               		.loc 1 319 3 view .LVU14
 319:main.c        **** 		{
  67               		.loc 1 319 3 is_stmt 0 view .LVU15
  68 0030 8781      		ldd r24,Z+7
  69 0032 9085      		ldd r25,Z+8
  70               	.LVL5:
  71               	.L3:
 319:main.c        **** 		{
  72               		.loc 1 319 23 is_stmt 1 discriminator 1 view .LVU16
 321:main.c        **** 		}
  73               		.loc 1 321 21 is_stmt 0 discriminator 1 view .LVU17
  74 0034 A381      		ldd r26,Z+3
  75 0036 B481      		ldd r27,Z+4
 319:main.c        **** 		{
  76               		.loc 1 319 3 discriminator 1 view .LVU18
  77 0038 0197      		sbiw r24,1
  78               	.LVL6:
 319:main.c        **** 		{
  79               		.loc 1 319 3 discriminator 1 view .LVU19
  80 003a 2581      		ldd r18,Z+5
  81 003c 3681      		ldd r19,Z+6
  82 003e 8217      		cp r24,r18
  83 0040 9307      		cpc r25,r19
  84 0042 04F0      		brlt .L5
 321:main.c        **** 		}
  85               		.loc 1 321 4 is_stmt 1 discriminator 3 view .LVU20
 321:main.c        **** 		}
  86               		.loc 1 321 26 is_stmt 0 discriminator 3 view .LVU21
  87 0044 A80F      		add r26,r24
  88 0046 B91F      		adc r27,r25
  89 0048 2C91      		ld r18,X
 321:main.c        **** 		}
  90               		.loc 1 321 18 discriminator 3 view .LVU22
  91 004a A60F      		add r26,r22
  92 004c B71F      		adc r27,r23
  93 004e 2C93      		st X,r18
 319:main.c        **** 		{
  94               		.loc 1 319 36 is_stmt 1 discriminator 3 view .LVU23
  95               	.LVL7:
 319:main.c        **** 		{
  96               		.loc 1 319 36 is_stmt 0 discriminator 3 view .LVU24
  97 0050 00C0      		rjmp .L3
  98               	.LBE30:
  99               		.cfi_endproc
 100               	.LFE23:
 103               	field_shrink:
 104               	.LVL8:
 105               	.LFB24:
 328:main.c        **** 
 329:main.c        **** static void field_shrink(Field *f, uint8_t n)
 330:main.c        **** {
 106               		.loc 1 330 1 is_stmt 1 view -0
 107               		.cfi_startproc
 108               	/* prologue: function */
 109               	/* frame size = 0 */
 110               	/* stack size = 0 */
 111               	.L__stack_usage = 0
 112               		.loc 1 330 1 is_stmt 0 view .LVU26
 113 0052 FC01      		movw r30,r24
 331:main.c        **** 	if(f->buf[f->pos])
 114               		.loc 1 331 2 is_stmt 1 view .LVU27
 115               		.loc 1 331 13 is_stmt 0 view .LVU28
 116 0054 8581      		ldd r24,Z+5
 117 0056 9681      		ldd r25,Z+6
 118               	.LVL9:
 119               		.loc 1 331 11 view .LVU29
 120 0058 A381      		ldd r26,Z+3
 121 005a B481      		ldd r27,Z+4
 122 005c A80F      		add r26,r24
 123 005e B91F      		adc r27,r25
 124               		.loc 1 331 4 view .LVU30
 125 0060 2C91      		ld r18,X
 126               	.LBB31:
 332:main.c        **** 	{
 333:main.c        **** 		int16_t i = f->pos;
 334:main.c        **** 		for(; f->buf[i]; ++i)
 335:main.c        **** 		{
 336:main.c        **** 			f->buf[i - n] = f->buf[i];
 127               		.loc 1 336 10 view .LVU31
 128 0062 70E0      		ldi r23,0
 129               	.LBE31:
 331:main.c        **** 	if(f->buf[f->pos])
 130               		.loc 1 331 4 view .LVU32
 131 0064 2111      		cpse r18,__zero_reg__
 132 0066 00C0      		rjmp .L8
 133               	.L7:
 134               	/* epilogue start */
 337:main.c        **** 		}
 338:main.c        **** 	}
 339:main.c        **** }
 135               		.loc 1 339 1 view .LVU33
 136 0068 0895      		ret
 137               	.LVL10:
 138               	.L9:
 139               	.LBB32:
 336:main.c        **** 		}
 140               		.loc 1 336 4 is_stmt 1 discriminator 2 view .LVU34
 336:main.c        **** 		}
 141               		.loc 1 336 10 is_stmt 0 discriminator 2 view .LVU35
 142 006a DC01      		movw r26,r24
 143 006c A61B      		sub r26,r22
 144 006e B70B      		sbc r27,r23
 336:main.c        **** 		}
 145               		.loc 1 336 18 discriminator 2 view .LVU36
 146 0070 A20F      		add r26,r18
 147 0072 B31F      		adc r27,r19
 148 0074 4C93      		st X,r20
 334:main.c        **** 		{
 149               		.loc 1 334 20 is_stmt 1 discriminator 2 view .LVU37
 150 0076 0196      		adiw r24,1
 151               	.LVL11:
 152               	.L8:
 334:main.c        **** 		{
 153               		.loc 1 334 9 discriminator 1 view .LVU38
 334:main.c        **** 		{
 154               		.loc 1 334 10 is_stmt 0 discriminator 1 view .LVU39
 155 0078 2381      		ldd r18,Z+3
 156 007a 3481      		ldd r19,Z+4
 334:main.c        **** 		{
 157               		.loc 1 334 15 discriminator 1 view .LVU40
 158 007c D901      		movw r26,r18
 159 007e A80F      		add r26,r24
 160 0080 B91F      		adc r27,r25
 161 0082 4C91      		ld r20,X
 334:main.c        **** 		{
 162               		.loc 1 334 3 discriminator 1 view .LVU41
 163 0084 4111      		cpse r20,__zero_reg__
 164 0086 00C0      		rjmp .L9
 165 0088 00C0      		rjmp .L7
 166               	.LBE32:
 167               		.cfi_endproc
 168               	.LFE24:
 171               	mode_error_event:
 172               	.LVL12:
 173               	.LFB46:
 340:main.c        **** 
 341:main.c        **** static void field_ins_chr(Field *f, uint8_t c)
 342:main.c        **** {
 343:main.c        **** 	if(f->len + 1 < f->max)
 344:main.c        **** 	{
 345:main.c        **** 		field_grow(f, 1);
 346:main.c        **** 		f->buf [f->pos++] = c;
 347:main.c        **** 		field_update(f);
 348:main.c        **** 	}
 349:main.c        **** }
 350:main.c        **** 
 351:main.c        **** static void field_ins_str_P(Field *f, const uint8_t *s, uint8_t n)
 352:main.c        **** {
 353:main.c        **** 	if(f->len + n + 1 < f->max)
 354:main.c        **** 	{
 355:main.c        **** 		field_grow(f, n + 1);
 356:main.c        **** 		while(n--)
 357:main.c        **** 		{
 358:main.c        **** 			f->buf[f->pos++] = pgm_read_byte(s++);
 359:main.c        **** 		}
 360:main.c        **** 
 361:main.c        **** 		f->buf[f->pos++] = '(';
 362:main.c        **** 		field_update(f);
 363:main.c        **** 	}
 364:main.c        **** }
 365:main.c        **** 
 366:main.c        **** static void field_clear(Field *f)
 367:main.c        **** {
 368:main.c        **** 	f->len = 0;
 369:main.c        **** 	f->pos = 0;
 370:main.c        **** 	f->buf[0] = '\0';
 371:main.c        **** 	field_update(f);
 372:main.c        **** }
 373:main.c        **** 
 374:main.c        **** static void field_delete(Field *f)
 375:main.c        **** {
 376:main.c        **** 	if(f->pos > 0)
 377:main.c        **** 	{
 378:main.c        **** 		field_shrink(f, 1);
 379:main.c        **** 		--(f->pos);
 380:main.c        **** 		--(f->len);
 381:main.c        **** 		f->buf[f->len] = '\0';
 382:main.c        **** 		field_update(f);
 383:main.c        **** 	}
 384:main.c        **** }
 385:main.c        **** 
 386:main.c        **** static void field_mv_left(Field *f)
 387:main.c        **** {
 388:main.c        **** 	if(f->pos > 0)
 389:main.c        **** 	{
 390:main.c        **** 		--(f->pos);
 391:main.c        **** 	}
 392:main.c        **** 	else
 393:main.c        **** 	{
 394:main.c        **** 		f->pos = f->len;
 395:main.c        **** 	}
 396:main.c        **** 
 397:main.c        **** 	field_update(f);
 398:main.c        **** }
 399:main.c        **** 
 400:main.c        **** static void field_mv_right(Field *f)
 401:main.c        **** {
 402:main.c        **** 	if(f->pos < f->len)
 403:main.c        **** 	{
 404:main.c        **** 		++(f->pos);
 405:main.c        **** 	}
 406:main.c        **** 	else
 407:main.c        **** 	{
 408:main.c        **** 		f->pos = 0;
 409:main.c        **** 	}
 410:main.c        **** 
 411:main.c        **** 	field_update(f);
 412:main.c        **** }
 413:main.c        **** 
 414:main.c        **** static void field_update(Field *f)
 415:main.c        **** {
 416:main.c        **** 	int8_t i;
 417:main.c        **** 	if(f->pos < f->width - 1)
 418:main.c        **** 	{
 419:main.c        **** 		lcd_cursor(f->col, f->row);
 420:main.c        **** 		for(i = 0; f->buf[i]; ++i)
 421:main.c        **** 		{
 422:main.c        **** 			lcd_data(f->buf[i]);
 423:main.c        **** 		}
 424:main.c        **** 
 425:main.c        **** 		for(; i < f->width; ++i)
 426:main.c        **** 		{
 427:main.c        **** 			lcd_data(' ');
 428:main.c        **** 		}
 429:main.c        **** 
 430:main.c        **** 		lcd_cursor(f->col + f->pos, f->row);
 431:main.c        **** 	}
 432:main.c        **** 	else
 433:main.c        **** 	{
 434:main.c        **** 		lcd_cursor(f->col + f->width - 1, f->row);
 435:main.c        **** 		lcd_data(' ');
 436:main.c        **** 
 437:main.c        **** 		lcd_cursor(f->col, f->row);
 438:main.c        **** 		for(i = f->pos - (f->width - 1);
 439:main.c        **** 			i < f->pos + 1 && f->buf[i]; ++i)
 440:main.c        **** 		{
 441:main.c        **** 			lcd_data(f->buf[i]);
 442:main.c        **** 		}
 443:main.c        **** 
 444:main.c        **** 		lcd_cursor(f->col + f->width - 1, f->row);
 445:main.c        **** 	}
 446:main.c        **** }
 447:main.c        **** 
 448:main.c        **** /* Term Field */
 449:main.c        **** static void field_term_delete(Field *f)
 450:main.c        **** {
 451:main.c        **** 	if(f->pos > 0)
 452:main.c        **** 	{
 453:main.c        **** 		uint8_t n = 1, a;
 454:main.c        **** 		a = f->buf[f->pos - 1];
 455:main.c        **** 		if(a == CHAR_X)
 456:main.c        **** 		{
 457:main.c        **** 			--x_cnt;
 458:main.c        **** 		}
 459:main.c        **** 		else if(a == CHAR_LP)
 460:main.c        **** 		{
 461:main.c        **** 			for(++n; islower(f->buf[f->pos - n]); ++n) ;
 462:main.c        **** 			--n;
 463:main.c        **** 		}
 464:main.c        **** 
 465:main.c        **** 		field_shrink(f, n);
 466:main.c        **** 		f->pos -= n;
 467:main.c        **** 		f->len -= n;
 468:main.c        **** 		f->buf[f->len] = '\0';
 469:main.c        **** 		field_update(f);
 470:main.c        **** 	}
 471:main.c        **** }
 472:main.c        **** 
 473:main.c        **** static void field_term_mv_left(Field *f)
 474:main.c        **** {
 475:main.c        **** 	if(f->pos > 0)
 476:main.c        **** 	{
 477:main.c        **** 		--(f->pos);
 478:main.c        **** 		if(f->buf[f->pos] == CHAR_LP)
 479:main.c        **** 		{
 480:main.c        **** 			--(f->pos);
 481:main.c        **** 			for(; islower(f->buf[f->pos]); --(f->pos)) ;
 482:main.c        **** 			++(f->pos);
 483:main.c        **** 		}
 484:main.c        **** 	}
 485:main.c        **** 	else
 486:main.c        **** 	{
 487:main.c        **** 		f->pos = f->len;
 488:main.c        **** 	}
 489:main.c        **** 
 490:main.c        **** 	field_update(f);
 491:main.c        **** }
 492:main.c        **** 
 493:main.c        **** static void field_term_mv_right(Field *f)
 494:main.c        **** {
 495:main.c        **** 	if(f->pos < f->len)
 496:main.c        **** 	{
 497:main.c        **** 		if(f->buf[f->pos] != CHAR_X)
 498:main.c        **** 		{
 499:main.c        **** 			while(islower(f->buf[f->pos]))
 500:main.c        **** 			{
 501:main.c        **** 				++(f->pos);
 502:main.c        **** 			}
 503:main.c        **** 		}
 504:main.c        **** 
 505:main.c        **** 		++(f->pos);
 506:main.c        **** 	}
 507:main.c        **** 	else
 508:main.c        **** 	{
 509:main.c        **** 		f->pos = 0;
 510:main.c        **** 	}
 511:main.c        **** 
 512:main.c        **** 	field_update(f);
 513:main.c        **** }
 514:main.c        **** 
 515:main.c        **** /* Number Field */
 516:main.c        **** static void field_number_event(Field *f, uint8_t key)
 517:main.c        **** {
 518:main.c        **** 	switch(key)
 519:main.c        **** 	{
 520:main.c        **** 	case KEY_0_0:
 521:main.c        **** 		field_ins_chr(f, '1');
 522:main.c        **** 		break;
 523:main.c        **** 
 524:main.c        **** 	case KEY_0_1:
 525:main.c        **** 		field_ins_chr(f, '4');
 526:main.c        **** 		break;
 527:main.c        **** 
 528:main.c        **** 	case KEY_0_2:
 529:main.c        **** 		field_ins_chr(f, '7');
 530:main.c        **** 		break;
 531:main.c        **** 
 532:main.c        **** 	case KEY_1_0:
 533:main.c        **** 		field_ins_chr(f, '2');
 534:main.c        **** 		break;
 535:main.c        **** 
 536:main.c        **** 	case KEY_1_1:
 537:main.c        **** 		field_ins_chr(f, '5');
 538:main.c        **** 		break;
 539:main.c        **** 
 540:main.c        **** 	case KEY_1_2:
 541:main.c        **** 		field_ins_chr(f, '8');
 542:main.c        **** 		break;
 543:main.c        **** 
 544:main.c        **** 	case KEY_1_3:
 545:main.c        **** 		field_ins_chr(f, '0');
 546:main.c        **** 		break;
 547:main.c        **** 
 548:main.c        **** 	case KEY_2_0:
 549:main.c        **** 		field_ins_chr(f, '3');
 550:main.c        **** 		break;
 551:main.c        **** 
 552:main.c        **** 	case KEY_2_1:
 553:main.c        **** 		field_ins_chr(f, '6');
 554:main.c        **** 		break;
 555:main.c        **** 
 556:main.c        **** 	case KEY_2_2:
 557:main.c        **** 		field_ins_chr(f, '9');
 558:main.c        **** 		break;
 559:main.c        **** 
 560:main.c        **** 	case KEY_3_0:
 561:main.c        **** 		field_clear(f);
 562:main.c        **** 		break;
 563:main.c        **** 
 564:main.c        **** 	case KEY_3_1:
 565:main.c        **** 		field_delete(f);
 566:main.c        **** 		break;
 567:main.c        **** 
 568:main.c        **** 	case KEY_3_2:
 569:main.c        **** 		field_ins_chr(f, CHAR_DP);
 570:main.c        **** 		break;
 571:main.c        **** 
 572:main.c        **** 	case KEY_SHIFT_0_1:
 573:main.c        **** 		/* left */
 574:main.c        **** 		field_mv_left(f);
 575:main.c        **** 		break;
 576:main.c        **** 
 577:main.c        **** 	case KEY_SHIFT_2_1:
 578:main.c        **** 		/* right */
 579:main.c        **** 		field_mv_right(f);
 580:main.c        **** 		break;
 581:main.c        **** 	}
 582:main.c        **** }
 583:main.c        **** 
 584:main.c        **** /* Input Mode */
 585:main.c        **** static void mode_input(void)
 586:main.c        **** {
 587:main.c        **** 	_mode = mode_input;
 588:main.c        **** 	_event = mode_input_event;
 589:main.c        **** 	lcd_clear();
 590:main.c        **** 	lcd_command(LCD_SET_DISPLAY | LCD_DISPLAY_ON |
 591:main.c        **** 		LCD_CURSOR_ON | LCD_BLINKING_OFF);
 592:main.c        **** 	field_update(&fld_term);
 593:main.c        **** }
 594:main.c        **** 
 595:main.c        **** static void mode_input_event(uint8_t key)
 596:main.c        **** {
 597:main.c        **** 	switch(key)
 598:main.c        **** 	{
 599:main.c        **** 	case KEY_0_0:
 600:main.c        **** 		field_ins_chr(&fld_term, '1');
 601:main.c        **** 		break;
 602:main.c        **** 
 603:main.c        **** 	case KEY_0_1:
 604:main.c        **** 		field_ins_chr(&fld_term, '4');
 605:main.c        **** 		break;
 606:main.c        **** 
 607:main.c        **** 	case KEY_0_2:
 608:main.c        **** 		field_ins_chr(&fld_term, '7');
 609:main.c        **** 		break;
 610:main.c        **** 
 611:main.c        **** 	case KEY_0_3:
 612:main.c        **** 		field_ins_chr(&fld_term, CHAR_LP);
 613:main.c        **** 		break;
 614:main.c        **** 
 615:main.c        **** 	case KEY_1_0:
 616:main.c        **** 		field_ins_chr(&fld_term, '2');
 617:main.c        **** 		break;
 618:main.c        **** 
 619:main.c        **** 	case KEY_1_1:
 620:main.c        **** 		field_ins_chr(&fld_term, '5');
 621:main.c        **** 		break;
 622:main.c        **** 
 623:main.c        **** 	case KEY_1_2:
 624:main.c        **** 		field_ins_chr(&fld_term, '8');
 625:main.c        **** 		break;
 626:main.c        **** 
 627:main.c        **** 	case KEY_1_3:
 628:main.c        **** 		field_ins_chr(&fld_term, '0');
 629:main.c        **** 		break;
 630:main.c        **** 
 631:main.c        **** 	case KEY_2_0:
 632:main.c        **** 		field_ins_chr(&fld_term, '3');
 633:main.c        **** 		break;
 634:main.c        **** 
 635:main.c        **** 	case KEY_2_1:
 636:main.c        **** 		field_ins_chr(&fld_term, '6');
 637:main.c        **** 		break;
 638:main.c        **** 
 639:main.c        **** 	case KEY_2_2:
 640:main.c        **** 		field_ins_chr(&fld_term, '9');
 641:main.c        **** 		break;
 642:main.c        **** 
 643:main.c        **** 	case KEY_2_3:
 644:main.c        **** 		field_ins_chr(&fld_term, CHAR_RP);
 645:main.c        **** 		break;
 646:main.c        **** 
 647:main.c        **** 	case KEY_3_0:
 648:main.c        **** 		field_clear(&fld_term);
 649:main.c        **** 		x_cnt = 0;
 650:main.c        **** 		break;
 651:main.c        **** 
 652:main.c        **** 	case KEY_3_1:
 653:main.c        **** 		field_term_delete(&fld_term);
 654:main.c        **** 		break;
 655:main.c        **** 
 656:main.c        **** 	case KEY_3_2:
 657:main.c        **** 		field_ins_chr(&fld_term, CHAR_DP);
 658:main.c        **** 		break;
 659:main.c        **** 
 660:main.c        **** 	case KEY_3_3:
 661:main.c        **** 	{
 662:main.c        **** 		/* enter */
 663:main.c        **** 		uint8_t err;
 664:main.c        **** 		float y = 0;
 665:main.c        **** 		if((err = calc_prepare(buf_term)))
 666:main.c        **** 		{
 667:main.c        **** 			mode_error(err);
 668:main.c        **** 			break;
 669:main.c        **** 		}
 670:main.c        **** 
 671:main.c        **** 		err = calc_solve(0, &y);
 672:main.c        **** 		if(x_cnt)
 673:main.c        **** 		{
 674:main.c        **** 			if(err && err != ERROR_MATH)
 675:main.c        **** 			{
 676:main.c        **** 				mode_error(err);
 677:main.c        **** 				break;
 678:main.c        **** 			}
 679:main.c        **** 
 680:main.c        **** 			mode_settings();
 681:main.c        **** 		}
 682:main.c        **** 		else
 683:main.c        **** 		{
 684:main.c        **** 			if(err)
 685:main.c        **** 			{
 686:main.c        **** 				mode_error(err);
 687:main.c        **** 				break;
 688:main.c        **** 			}
 689:main.c        **** 
 690:main.c        **** 			mode_result(y);
 691:main.c        **** 		}
 692:main.c        **** 		break;
 693:main.c        **** 	}
 694:main.c        **** 
 695:main.c        **** 	case KEY_SHIFT_0_0:
 696:main.c        **** 		field_ins_str_P(&fld_term, _str_sin, 3);
 697:main.c        **** 		break;
 698:main.c        **** 
 699:main.c        **** 	case KEY_SHIFT_0_1:
 700:main.c        **** 		field_term_mv_left(&fld_term);
 701:main.c        **** 		break;
 702:main.c        **** 
 703:main.c        **** 	case KEY_SHIFT_0_2:
 704:main.c        **** 		field_ins_chr(&fld_term, CHAR_X);
 705:main.c        **** 		++x_cnt;
 706:main.c        **** 		break;
 707:main.c        **** 
 708:main.c        **** 	case KEY_SHIFT_0_3:
 709:main.c        **** 		field_ins_str_P(&fld_term, _str_asin, 4);
 710:main.c        **** 		break;
 711:main.c        **** 
 712:main.c        **** 	case KEY_SHIFT_1_0:
 713:main.c        **** 		field_ins_str_P(&fld_term, _str_cos, 3);
 714:main.c        **** 		break;
 715:main.c        **** 
 716:main.c        **** 	case KEY_SHIFT_1_1:
 717:main.c        **** 		field_ins_chr(&fld_term, CHAR_PI);
 718:main.c        **** 		break;
 719:main.c        **** 
 720:main.c        **** 	case KEY_SHIFT_1_2:
 721:main.c        **** 		field_ins_chr(&fld_term, CHAR_POW);
 722:main.c        **** 		break;
 723:main.c        **** 
 724:main.c        **** 	case KEY_SHIFT_1_3:
 725:main.c        **** 		field_ins_str_P(&fld_term, _str_acos, 4);
 726:main.c        **** 		break;
 727:main.c        **** 
 728:main.c        **** 	case KEY_SHIFT_2_0:
 729:main.c        **** 		field_ins_str_P(&fld_term, _str_tan, 3);
 730:main.c        **** 		break;
 731:main.c        **** 
 732:main.c        **** 	case KEY_SHIFT_2_1:
 733:main.c        **** 		field_term_mv_right(&fld_term);
 734:main.c        **** 		break;
 735:main.c        **** 
 736:main.c        **** 	case KEY_SHIFT_2_2:
 737:main.c        **** 		field_ins_str_P(&fld_term, _str_log, 3);
 738:main.c        **** 		break;
 739:main.c        **** 
 740:main.c        **** 	case KEY_SHIFT_2_3:
 741:main.c        **** 		field_ins_str_P(&fld_term, _str_atan, 4);
 742:main.c        **** 		break;
 743:main.c        **** 
 744:main.c        **** 	case KEY_SHIFT_3_0:
 745:main.c        **** 		field_ins_chr(&fld_term, CHAR_ADD);
 746:main.c        **** 		break;
 747:main.c        **** 
 748:main.c        **** 	case KEY_SHIFT_3_1:
 749:main.c        **** 		field_ins_chr(&fld_term, CHAR_SUB);
 750:main.c        **** 		break;
 751:main.c        **** 
 752:main.c        **** 	case KEY_SHIFT_3_2:
 753:main.c        **** 		field_ins_chr(&fld_term, CHAR_MUL);
 754:main.c        **** 		break;
 755:main.c        **** 
 756:main.c        **** 	case KEY_SHIFT_3_3:
 757:main.c        **** 		field_ins_chr(&fld_term, CHAR_DIV);
 758:main.c        **** 		break;
 759:main.c        **** 
 760:main.c        **** 	default:
 761:main.c        **** 		break;
 762:main.c        **** 	}
 763:main.c        **** }
 764:main.c        **** 
 765:main.c        **** /* Result Mode */
 766:main.c        **** static void mode_result(float y)
 767:main.c        **** {
 768:main.c        **** 	_event = mode_result_event;
 769:main.c        **** 	lcd_cursor(0, 1);
 770:main.c        **** 	lcd_string(FORMAT_NUMBER(y, _buf_conv, sizeof(_buf_conv) - 1));
 771:main.c        **** 	lcd_cursor(fld_term.pos < LCD_WIDTH - 1 ?
 772:main.c        **** 		fld_term.pos : LCD_WIDTH - 1, 0);
 773:main.c        **** }
 774:main.c        **** 
 775:main.c        **** static void mode_result_event(uint8_t key)
 776:main.c        **** {
 777:main.c        **** 	mode_input();
 778:main.c        **** 	mode_input_event(key);
 779:main.c        **** }
 780:main.c        **** 
 781:main.c        **** /* Table Mode */
 782:main.c        **** static void mode_table(void)
 783:main.c        **** {
 784:main.c        **** 	tbl_pos = 0;
 785:main.c        **** 	_event = mode_table_event;
 786:main.c        **** 	lcd_command(LCD_SET_DISPLAY | LCD_DISPLAY_ON |
 787:main.c        **** 		LCD_CURSOR_OFF | LCD_BLINKING_OFF);
 788:main.c        **** 	lcd_cursor(0, 0);
 789:main.c        **** 	lcd_data('X');
 790:main.c        **** 	lcd_data('=');
 791:main.c        **** 	lcd_cursor(0, 1);
 792:main.c        **** 	lcd_data('Y');
 793:main.c        **** 	lcd_data('=');
 794:main.c        **** 	mode_table_update();
 795:main.c        **** }
 796:main.c        **** 
 797:main.c        **** static void mode_table_event(uint8_t key)
 798:main.c        **** {
 799:main.c        **** 	switch(UNSHIFT(key))
 800:main.c        **** 	{
 801:main.c        **** 	case KEY_0_0:
 802:main.c        **** 		mode_input();
 803:main.c        **** 		break;
 804:main.c        **** 
 805:main.c        **** 	case KEY_0_1:
 806:main.c        **** 		/* left arrow */
 807:main.c        **** 		tbl_pos -= MODE_TABLE_STEP_BIG;
 808:main.c        **** 		mode_table_update();
 809:main.c        **** 		break;
 810:main.c        **** 
 811:main.c        **** 	case KEY_1_0:
 812:main.c        **** 		/* up arrow */
 813:main.c        **** 		--tbl_pos;
 814:main.c        **** 		mode_table_update();
 815:main.c        **** 		break;
 816:main.c        **** 
 817:main.c        **** 	case KEY_1_1:
 818:main.c        **** 		/* reset */
 819:main.c        **** 		tbl_pos = 0;
 820:main.c        **** 		mode_table_update();
 821:main.c        **** 		break;
 822:main.c        **** 
 823:main.c        **** 	case KEY_1_2:
 824:main.c        **** 		/* down arrow */
 825:main.c        **** 		++tbl_pos;
 826:main.c        **** 		mode_table_update();
 827:main.c        **** 		break;
 828:main.c        **** 
 829:main.c        **** 	case KEY_2_1:
 830:main.c        **** 		/* right arrow */
 831:main.c        **** 		tbl_pos += MODE_TABLE_STEP_BIG;
 832:main.c        **** 		mode_table_update();
 833:main.c        **** 		break;
 834:main.c        **** 
 835:main.c        **** 	default:
 836:main.c        **** 		break;
 837:main.c        **** 	}
 838:main.c        **** }
 839:main.c        **** 
 840:main.c        **** static void mode_table_update(void)
 841:main.c        **** {
 842:main.c        **** 	float x, y;
 843:main.c        **** 	x = tbl_start + tbl_pos * tbl_step;
 844:main.c        **** 	y = 0;
 845:main.c        **** 
 846:main.c        **** 	/* Print X */
 847:main.c        **** 	lcd_cursor(2, 0);
 848:main.c        **** 	lcd_string(FORMAT_NUMBER(x, _buf_conv, 14));
 849:main.c        **** 
 850:main.c        **** 	if(calc_solve(x, &y))
 851:main.c        **** 	{
 852:main.c        **** 		/* Do not go into error mode when in table mode, because
 853:main.c        **** 		often functions are undefined for some x values. e.g.
 854:main.c        **** 		f(0) = 1 / x = NaN
 855:main.c        **** 		Print "ERROR" for y instead. */
 856:main.c        **** 		uint8_t i;
 857:main.c        **** 		lcd_cursor(2, 1);
 858:main.c        **** 		for(i = 2; i < LCD_WIDTH - MSG_ERROR_LEN; ++i)
 859:main.c        **** 		{
 860:main.c        **** 			lcd_data(' ');
 861:main.c        **** 		}
 862:main.c        **** 
 863:main.c        **** 		lcd_string_P(_str_error);
 864:main.c        **** 	}
 865:main.c        **** 	else
 866:main.c        **** 	{
 867:main.c        **** 		/* Print Y */
 868:main.c        **** 		lcd_cursor(2, 1);
 869:main.c        **** 		lcd_string(FORMAT_NUMBER(y, _buf_conv, 14));
 870:main.c        **** 	}
 871:main.c        **** }
 872:main.c        **** 
 873:main.c        **** /* Settings Mode */
 874:main.c        **** static void mode_settings(void)
 875:main.c        **** {
 876:main.c        **** 	_mode = mode_settings;
 877:main.c        **** 	_event = mode_settings_event;
 878:main.c        **** 	tbl_cur_fld = &fld_start;
 879:main.c        **** 
 880:main.c        **** 	lcd_clear();
 881:main.c        **** 	lcd_command(LCD_SET_DISPLAY | LCD_DISPLAY_ON |
 882:main.c        **** 		LCD_CURSOR_ON | LCD_BLINKING_OFF);
 883:main.c        **** 
 884:main.c        **** 	lcd_string_P(_str_start);
 885:main.c        **** 	lcd_string(buf_start);
 886:main.c        **** 
 887:main.c        **** 	lcd_cursor(0, 1);
 888:main.c        **** 	lcd_string_P(_str_step);
 889:main.c        **** 	lcd_string(buf_step);
 890:main.c        **** 	field_update(tbl_cur_fld);
 891:main.c        **** }
 892:main.c        **** 
 893:main.c        **** static void mode_settings_event(uint8_t key)
 894:main.c        **** {
 895:main.c        **** 	field_number_event(tbl_cur_fld, key);
 896:main.c        **** 	switch(key)
 897:main.c        **** 	{
 898:main.c        **** 	case KEY_3_3:
 899:main.c        **** 		/* enter */
 900:main.c        **** 		/* if the start value is invalid, ignore it and just use 0.0 instead */
 901:main.c        **** 		tbl_start = atof((char *)buf_start);
 902:main.c        **** 
 903:main.c        **** 		/* step has to be greater than zero */
 904:main.c        **** 		if((tbl_step = atof((char *)buf_step)) == 0.0)
 905:main.c        **** 		{
 906:main.c        **** 			mode_error(ERROR_RANGE);
 907:main.c        **** 			break;
 908:main.c        **** 		}
 909:main.c        **** 
 910:main.c        **** 		mode_table();
 911:main.c        **** 		break;
 912:main.c        **** 
 913:main.c        **** 	case KEY_SHIFT_0_0:
 914:main.c        **** 		/* escape */
 915:main.c        **** 		mode_input();
 916:main.c        **** 		break;
 917:main.c        **** 
 918:main.c        **** 	case KEY_SHIFT_3_1:
 919:main.c        **** 		/* minus */
 920:main.c        **** 		if(tbl_cur_fld == &fld_start)
 921:main.c        **** 		{
 922:main.c        **** 			field_ins_chr(tbl_cur_fld, '-');
 923:main.c        **** 		}
 924:main.c        **** 		break;
 925:main.c        **** 
 926:main.c        **** 	case KEY_SHIFT_1_0:
 927:main.c        **** 		/* up */
 928:main.c        **** 		tbl_cur_fld = &fld_start;
 929:main.c        **** 		field_update(tbl_cur_fld);
 930:main.c        **** 		break;
 931:main.c        **** 
 932:main.c        **** 	case KEY_SHIFT_1_2:
 933:main.c        **** 		/* down */
 934:main.c        **** 		tbl_cur_fld = &fld_step;
 935:main.c        **** 		field_update(tbl_cur_fld);
 936:main.c        **** 		break;
 937:main.c        **** 	}
 938:main.c        **** }
 939:main.c        **** 
 940:main.c        **** /* Error Mode */
 941:main.c        **** static void mode_error(uint8_t err)
 942:main.c        **** {
 943:main.c        **** 	lcd_clear();
 944:main.c        **** 	lcd_command(LCD_SET_DISPLAY | LCD_DISPLAY_ON |
 945:main.c        **** 		LCD_CURSOR_OFF | LCD_BLINKING_OFF);
 946:main.c        **** 	lcd_string_P((uint8_t *)pgm_read_word(_err_msg + err - 1));
 947:main.c        **** 	_event = mode_error_event;
 948:main.c        **** 	lcd_cursor(0, 1);
 949:main.c        **** 	lcd_string_P(_str_press_any_key);
 950:main.c        **** }
 951:main.c        **** 
 952:main.c        **** static void mode_error_event(uint8_t key)
 953:main.c        **** {
 174               		.loc 1 953 1 is_stmt 1 view -0
 175               		.cfi_startproc
 176               	/* prologue: function */
 177               	/* frame size = 0 */
 178               	/* stack size = 0 */
 179               	.L__stack_usage = 0
 954:main.c        **** 	_mode();
 180               		.loc 1 954 2 view .LVU43
 181 008a E091 0000 		lds r30,_mode
 182 008e F091 0000 		lds r31,_mode+1
 183 0092 0994      		ijmp
 184               	.LVL13:
 185               		.loc 1 954 2 is_stmt 0 view .LVU44
 186               		.cfi_endproc
 187               	.LFE46:
 190               	lcd_enable:
 191               	.LFB14:
 192               		.file 2 "lcd.c"
   1:lcd.c         **** #define LCD_DELAY_US_ENABLE    20
   2:lcd.c         **** #define LCD_DELAY_US_DATA      46
   3:lcd.c         **** #define LCD_DELAY_US_COMMAND   42
   4:lcd.c         **** 
   5:lcd.c         **** #define LCD_DELAY_MS_BOOTUP    15
   6:lcd.c         **** #define LCD_DELAY_MS_RESET_1    5
   7:lcd.c         **** #define LCD_DELAY_MS_RESET_2    1
   8:lcd.c         **** #define LCD_DELAY_MS_RESET_3    1
   9:lcd.c         **** #define LCD_DELAY_MS_4BIT       5
  10:lcd.c         **** #define LCD_DELAY_MS_HOME       2
  11:lcd.c         **** #define LCD_DELAY_MS_CLEAR      2
  12:lcd.c         **** 
  13:lcd.c         **** /* Clear Display                 00000001 */
  14:lcd.c         **** #define LCD_CLEAR_DISPLAY        0x01
  15:lcd.c         **** 
  16:lcd.c         **** /* Cursor Home                   0000001x */
  17:lcd.c         **** #define LCD_CURSOR_HOME          0x02
  18:lcd.c         **** 
  19:lcd.c         **** /* Set Entry Mode                000001xx */
  20:lcd.c         **** #define LCD_SET_ENTRY            0x04
  21:lcd.c         **** 
  22:lcd.c         **** #define LCD_ENTRY_DECREASE       0x00
  23:lcd.c         **** #define LCD_ENTRY_INCREASE       0x02
  24:lcd.c         **** #define LCD_ENTRY_NOSHIFT        0x00
  25:lcd.c         **** #define LCD_ENTRY_SHIFT          0x01
  26:lcd.c         **** 
  27:lcd.c         **** /* Set Display                   00001xxx */
  28:lcd.c         **** #define LCD_SET_DISPLAY          0x08
  29:lcd.c         **** 
  30:lcd.c         **** #define LCD_DISPLAY_OFF          0x00
  31:lcd.c         **** #define LCD_DISPLAY_ON           0x04
  32:lcd.c         **** #define LCD_CURSOR_OFF           0x00
  33:lcd.c         **** #define LCD_CURSOR_ON            0x02
  34:lcd.c         **** #define LCD_BLINKING_OFF         0x00
  35:lcd.c         **** #define LCD_BLINKING_ON          0x01
  36:lcd.c         **** 
  37:lcd.c         **** /* Set Shift                     0001xxxx */
  38:lcd.c         **** #define LCD_SET_SHIFT            0x10
  39:lcd.c         **** 
  40:lcd.c         **** #define LCD_CURSOR_MOVE          0x00
  41:lcd.c         **** #define LCD_DISPLAY_SHIFT        0x08
  42:lcd.c         **** #define LCD_SHIFT_LEFT           0x00
  43:lcd.c         **** #define LCD_SHIFT_RIGHT          0x04
  44:lcd.c         **** 
  45:lcd.c         **** /* Set Function                  001xxxxx */
  46:lcd.c         **** #define LCD_SET_FUNCTION         0x20
  47:lcd.c         **** 
  48:lcd.c         **** #define LCD_FUNCTION_4BIT        0x00
  49:lcd.c         **** #define LCD_FUNCTION_8BIT        0x10
  50:lcd.c         **** #define LCD_FUNCTION_1LINE       0x00
  51:lcd.c         **** #define LCD_FUNCTION_2LINE       0x08
  52:lcd.c         **** #define LCD_FUNCTION_5X7         0x00
  53:lcd.c         **** #define LCD_FUNCTION_5X10        0x04
  54:lcd.c         **** 
  55:lcd.c         **** #define LCD_SOFT_RESET           0x30
  56:lcd.c         **** 
  57:lcd.c         **** /* Set CGRAM Address             01xxxxxx (Character Generator RAM) */
  58:lcd.c         **** #define LCD_SET_CGADR            0x40
  59:lcd.c         **** 
  60:lcd.c         **** /* Set DDRAM Address             1xxxxxxx (Display Data RAM) */
  61:lcd.c         **** #define LCD_SET_DDADR            0x80
  62:lcd.c         **** 
  63:lcd.c         **** #define LCD_OFFSET_SECOND_ROW    0x40
  64:lcd.c         **** 
  65:lcd.c         **** #define LCD_DELAY_US(n)          _delay_us(n)
  66:lcd.c         **** #define LCD_DELAY_MS(n)          _delay_ms(n)
  67:lcd.c         **** 
  68:lcd.c         **** #define LCD_OUT                  PORTD
  69:lcd.c         **** #define LCD_DIR                  DDRD
  70:lcd.c         **** #define LCD_RS                  2
  71:lcd.c         **** #define LCD_EN                  3
  72:lcd.c         **** #define LCD_DB                  4
  73:lcd.c         **** 
  74:lcd.c         **** #define LCD_WIDTH              16
  75:lcd.c         **** #define LCD_HEIGHT              2
  76:lcd.c         **** 
  77:lcd.c         **** static void lcd_init(void);
  78:lcd.c         **** static void lcd_data(uint8_t data);
  79:lcd.c         **** static void lcd_command(uint8_t data);
  80:lcd.c         **** static void lcd_clear(void);
  81:lcd.c         **** static void lcd_string(const uint8_t *s);
  82:lcd.c         **** static void lcd_string_P(const uint8_t *s);
  83:lcd.c         **** 
  84:lcd.c         **** #define lcd_cursor(x, y) \
  85:lcd.c         **** 	lcd_command(LCD_SET_DDADR + (x) + ((y) ? LCD_OFFSET_SECOND_ROW : 0))
  86:lcd.c         **** 
  87:lcd.c         **** static void lcd_enable(void)
  88:lcd.c         **** {
 193               		.loc 2 88 1 is_stmt 1 view -0
 194               		.cfi_startproc
 195               	/* prologue: function */
 196               	/* frame size = 0 */
 197               	/* stack size = 0 */
 198               	.L__stack_usage = 0
  89:lcd.c         **** 	LCD_OUT |= (1 << LCD_EN);
 199               		.loc 2 89 2 view .LVU46
 200               		.loc 2 89 10 is_stmt 0 view .LVU47
 201 0094 5B9A      		sbi 0xb,3
  90:lcd.c         **** 	LCD_DELAY_US(LCD_DELAY_US_ENABLE);
 202               		.loc 2 90 2 is_stmt 1 view .LVU48
 203               	.LVL14:
 204               	.LBB33:
 205               	.LBI33:
 206               		.file 3 "/usr/avr/include/util/delay.h"
   1:/usr/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/avr/include/util/delay.h **** 
   6:/usr/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/avr/include/util/delay.h **** 
   9:/usr/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/avr/include/util/delay.h **** 
  12:/usr/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/avr/include/util/delay.h ****      distribution.
  16:/usr/avr/include/util/delay.h **** 
  17:/usr/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/avr/include/util/delay.h **** 
  21:/usr/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/avr/include/util/delay.h **** 
  33:/usr/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/avr/include/util/delay.h **** 
  35:/usr/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/avr/include/util/delay.h **** 
  38:/usr/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/avr/include/util/delay.h **** #  endif
  42:/usr/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/avr/include/util/delay.h **** 
  44:/usr/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/avr/include/util/delay.h **** #include <math.h>
  47:/usr/avr/include/util/delay.h **** 
  48:/usr/avr/include/util/delay.h **** /** \file */
  49:/usr/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/avr/include/util/delay.h ****     \code
  51:/usr/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/avr/include/util/delay.h ****     \endcode
  55:/usr/avr/include/util/delay.h **** 
  56:/usr/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/avr/include/util/delay.h ****     used.
  60:/usr/avr/include/util/delay.h **** 
  61:/usr/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/avr/include/util/delay.h **** 
  70:/usr/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/avr/include/util/delay.h **** 
  79:/usr/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/avr/include/util/delay.h **** 
  83:/usr/avr/include/util/delay.h **** */
  84:/usr/avr/include/util/delay.h **** 
  85:/usr/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/avr/include/util/delay.h **** #endif
  89:/usr/avr/include/util/delay.h **** 
  90:/usr/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/avr/include/util/delay.h **** 
  97:/usr/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/avr/include/util/delay.h **** 
 103:/usr/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/avr/include/util/delay.h ****     integer value.
 107:/usr/avr/include/util/delay.h ****  */
 108:/usr/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/avr/include/util/delay.h **** #endif
 110:/usr/avr/include/util/delay.h **** 
 111:/usr/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/avr/include/util/delay.h **** #endif
 114:/usr/avr/include/util/delay.h **** 
 115:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/avr/include/util/delay.h **** #endif
 120:/usr/avr/include/util/delay.h **** 
 121:/usr/avr/include/util/delay.h **** /**
 122:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/avr/include/util/delay.h **** 
 124:/usr/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/avr/include/util/delay.h **** 
 126:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/avr/include/util/delay.h **** 
 129:/usr/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/avr/include/util/delay.h **** 
 131:/usr/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/avr/include/util/delay.h **** 
 137:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/avr/include/util/delay.h **** 
 142:/usr/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/avr/include/util/delay.h **** 
 147:/usr/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/avr/include/util/delay.h ****    respectively.
 151:/usr/avr/include/util/delay.h **** 
 152:/usr/avr/include/util/delay.h ****    \note
 153:/usr/avr/include/util/delay.h **** 
 154:/usr/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/avr/include/util/delay.h **** 
 164:/usr/avr/include/util/delay.h ****  */
 165:/usr/avr/include/util/delay.h **** void
 166:/usr/avr/include/util/delay.h **** _delay_ms(double __ms)
 167:/usr/avr/include/util/delay.h **** {
 168:/usr/avr/include/util/delay.h **** 	double __tmp ;
 169:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/avr/include/util/delay.h **** 
 176:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/avr/include/util/delay.h **** 
 179:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/avr/include/util/delay.h **** 
 182:/usr/avr/include/util/delay.h **** 	#else
 183:/usr/avr/include/util/delay.h **** 		//round up by default
 184:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/avr/include/util/delay.h **** 	#endif
 186:/usr/avr/include/util/delay.h **** 
 187:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 188:/usr/avr/include/util/delay.h **** 
 189:/usr/avr/include/util/delay.h **** #else
 190:/usr/avr/include/util/delay.h **** 	uint16_t __ticks;
 191:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 192:/usr/avr/include/util/delay.h **** 	if (__tmp < 1.0)
 193:/usr/avr/include/util/delay.h **** 		__ticks = 1;
 194:/usr/avr/include/util/delay.h **** 	else if (__tmp > 65535)
 195:/usr/avr/include/util/delay.h **** 	{
 196:/usr/avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 197:/usr/avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 198:/usr/avr/include/util/delay.h **** 		while(__ticks)
 199:/usr/avr/include/util/delay.h **** 		{
 200:/usr/avr/include/util/delay.h **** 			// wait 1/10 ms
 201:/usr/avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 202:/usr/avr/include/util/delay.h **** 			__ticks --;
 203:/usr/avr/include/util/delay.h **** 		}
 204:/usr/avr/include/util/delay.h **** 		return;
 205:/usr/avr/include/util/delay.h **** 	}
 206:/usr/avr/include/util/delay.h **** 	else
 207:/usr/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
 208:/usr/avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
 209:/usr/avr/include/util/delay.h **** #endif
 210:/usr/avr/include/util/delay.h **** }
 211:/usr/avr/include/util/delay.h **** 
 212:/usr/avr/include/util/delay.h **** /**
 213:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 214:/usr/avr/include/util/delay.h **** 
 215:/usr/avr/include/util/delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 216:/usr/avr/include/util/delay.h **** 
 217:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 218:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 219:/usr/avr/include/util/delay.h **** 
 220:/usr/avr/include/util/delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 221:/usr/avr/include/util/delay.h **** 
 222:/usr/avr/include/util/delay.h ****    If the user requests a delay greater than the maximal possible one,
 223:/usr/avr/include/util/delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 224:/usr/avr/include/util/delay.h ****    will not be informed about this case.
 225:/usr/avr/include/util/delay.h **** 
 226:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 227:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 228:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflow results in
 229:/usr/avr/include/util/delay.h ****    no delay i.e., 0us.
 230:/usr/avr/include/util/delay.h **** 
 231:/usr/avr/include/util/delay.h ****    Conversion of \c __us into clock cycles may not always result in
 232:/usr/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 233:/usr/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __us
 234:/usr/avr/include/util/delay.h ****    microseconds of delay.
 235:/usr/avr/include/util/delay.h **** 
 236:/usr/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 237:/usr/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 238:/usr/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 239:/usr/avr/include/util/delay.h ****    respectively.
 240:/usr/avr/include/util/delay.h **** 
 241:/usr/avr/include/util/delay.h ****    \note
 242:/usr/avr/include/util/delay.h **** 
 243:/usr/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 244:/usr/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 245:/usr/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 246:/usr/avr/include/util/delay.h ****    with previous versions, the macro \c __DELAY_BACKWARD_COMPATIBLE__
 247:/usr/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 248:/usr/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 249:/usr/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 250:/usr/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 251:/usr/avr/include/util/delay.h ****    not available to the compiler then.
 252:/usr/avr/include/util/delay.h **** 
 253:/usr/avr/include/util/delay.h ****  */
 254:/usr/avr/include/util/delay.h **** void
 255:/usr/avr/include/util/delay.h **** _delay_us(double __us)
 207               		.loc 3 255 1 view .LVU49
 208               	.LBB34:
 256:/usr/avr/include/util/delay.h **** {
 257:/usr/avr/include/util/delay.h **** 	double __tmp ;
 209               		.loc 3 257 2 view .LVU50
 258:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 259:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 260:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 261:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 210               		.loc 3 261 2 view .LVU51
 262:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 211               		.loc 3 262 2 view .LVU52
 263:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 212               		.loc 3 263 2 view .LVU53
 264:/usr/avr/include/util/delay.h **** 
 265:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 266:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 267:/usr/avr/include/util/delay.h **** 
 268:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 269:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 270:/usr/avr/include/util/delay.h **** 
 271:/usr/avr/include/util/delay.h **** 	#else
 272:/usr/avr/include/util/delay.h **** 		//round up by default
 273:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 213               		.loc 3 273 3 view .LVU54
 274:/usr/avr/include/util/delay.h **** 	#endif
 275:/usr/avr/include/util/delay.h **** 
 276:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 214               		.loc 3 276 2 view .LVU55
 215 0096 85E3      		ldi r24,lo8(53)
 216 0098 8A95      	1:	dec r24
 217 009a 01F4      		brne 1b
 218 009c 0000      		nop
 219               	.LVL15:
 220               		.loc 3 276 2 is_stmt 0 view .LVU56
 221               	.LBE34:
 222               	.LBE33:
  91:lcd.c         **** 	LCD_OUT &= ~(1 << LCD_EN);
 223               		.loc 2 91 2 is_stmt 1 view .LVU57
 224               		.loc 2 91 10 is_stmt 0 view .LVU58
 225 009e 5B98      		cbi 0xb,3
 226               	/* epilogue start */
  92:lcd.c         **** }
 227               		.loc 2 92 1 view .LVU59
 228 00a0 0895      		ret
 229               		.cfi_endproc
 230               	.LFE14:
 233               	lcd_out:
 234               	.LVL16:
 235               	.LFB15:
  93:lcd.c         **** 
  94:lcd.c         **** static void lcd_out(uint8_t data)
  95:lcd.c         **** {
 236               		.loc 2 95 1 is_stmt 1 view -0
 237               		.cfi_startproc
 238               	/* prologue: function */
 239               	/* frame size = 0 */
 240               	/* stack size = 0 */
 241               	.L__stack_usage = 0
  96:lcd.c         **** 	data &= 0xF0;
 242               		.loc 2 96 2 view .LVU61
  97:lcd.c         **** 	LCD_OUT &= ~(0xF0 >> (4 - LCD_DB));
 243               		.loc 2 97 2 view .LVU62
 244               		.loc 2 97 10 is_stmt 0 view .LVU63
 245 00a2 9BB1      		in r25,0xb
 246 00a4 9F70      		andi r25,lo8(15)
 247 00a6 9BB9      		out 0xb,r25
  98:lcd.c         **** 	LCD_OUT |= (data >> (4 - LCD_DB));
 248               		.loc 2 98 2 is_stmt 1 view .LVU64
 249               		.loc 2 98 10 is_stmt 0 view .LVU65
 250 00a8 9BB1      		in r25,0xb
  96:lcd.c         **** 	data &= 0xF0;
 251               		.loc 2 96 7 view .LVU66
 252 00aa 807F      		andi r24,lo8(-16)
 253               	.LVL17:
 254               		.loc 2 98 10 view .LVU67
 255 00ac 892B      		or r24,r25
 256               	.LVL18:
 257               		.loc 2 98 10 view .LVU68
 258 00ae 8BB9      		out 0xb,r24
  99:lcd.c         **** 	lcd_enable();
 259               		.loc 2 99 2 is_stmt 1 view .LVU69
 260 00b0 0C94 0000 		jmp lcd_enable
 261               	.LVL19:
 262               		.cfi_endproc
 263               	.LFE15:
 266               	lcd_data:
 267               	.LVL20:
 268               	.LFB17:
 100:lcd.c         **** }
 101:lcd.c         **** 
 102:lcd.c         **** static void lcd_init(void)
 103:lcd.c         **** {
 104:lcd.c         **** 	uint8_t pins = (0x0F << LCD_DB) | (1 << LCD_RS) | (1 << LCD_EN);
 105:lcd.c         **** 	LCD_DIR |= pins;
 106:lcd.c         **** 	LCD_OUT &= ~pins;
 107:lcd.c         **** 	LCD_DELAY_MS(LCD_DELAY_MS_BOOTUP);
 108:lcd.c         **** 	lcd_out(LCD_SOFT_RESET);
 109:lcd.c         **** 	LCD_DELAY_MS(LCD_DELAY_MS_RESET_1);
 110:lcd.c         **** 	lcd_enable();
 111:lcd.c         **** 	LCD_DELAY_MS(LCD_DELAY_MS_RESET_2);
 112:lcd.c         **** 	lcd_enable();
 113:lcd.c         **** 	LCD_DELAY_MS(LCD_DELAY_MS_RESET_3);
 114:lcd.c         **** 	lcd_out(LCD_SET_FUNCTION | LCD_FUNCTION_4BIT);
 115:lcd.c         **** 	LCD_DELAY_MS(LCD_DELAY_MS_4BIT);
 116:lcd.c         **** 	lcd_command(LCD_SET_FUNCTION | LCD_FUNCTION_4BIT |
 117:lcd.c         **** 		LCD_FUNCTION_2LINE | LCD_FUNCTION_5X7);
 118:lcd.c         **** 	lcd_command(LCD_SET_DISPLAY | LCD_DISPLAY_ON |
 119:lcd.c         **** 		LCD_CURSOR_OFF | LCD_BLINKING_OFF);
 120:lcd.c         **** 	lcd_command(LCD_SET_ENTRY | LCD_ENTRY_INCREASE |
 121:lcd.c         **** 		LCD_ENTRY_NOSHIFT);
 122:lcd.c         **** 	lcd_clear();
 123:lcd.c         **** }
 124:lcd.c         **** 
 125:lcd.c         **** static void lcd_data(uint8_t data)
 126:lcd.c         **** {
 269               		.loc 2 126 1 view -0
 270               		.cfi_startproc
 271               		.loc 2 126 1 is_stmt 0 view .LVU71
 272 00b4 CF93      		push r28
 273               	.LCFI0:
 274               		.cfi_def_cfa_offset 3
 275               		.cfi_offset 28, -2
 276               	/* prologue: function */
 277               	/* frame size = 0 */
 278               	/* stack size = 1 */
 279               	.L__stack_usage = 1
 280 00b6 C82F      		mov r28,r24
 127:lcd.c         **** 	LCD_OUT |= (1 << LCD_RS);
 281               		.loc 2 127 2 is_stmt 1 view .LVU72
 282               		.loc 2 127 10 is_stmt 0 view .LVU73
 283 00b8 5A9A      		sbi 0xb,2
 128:lcd.c         **** 	lcd_out(data);
 284               		.loc 2 128 2 is_stmt 1 view .LVU74
 285 00ba 0E94 0000 		call lcd_out
 286               	.LVL21:
 129:lcd.c         **** 	lcd_out(data << 4);
 287               		.loc 2 129 2 view .LVU75
 288 00be 8C2F      		mov r24,r28
 289 00c0 8295      		swap r24
 290 00c2 807F      		andi r24,lo8(-16)
 291 00c4 0E94 0000 		call lcd_out
 292               	.LVL22:
 130:lcd.c         **** 	LCD_DELAY_US(LCD_DELAY_US_DATA);
 293               		.loc 2 130 2 view .LVU76
 294               	.LBB35:
 295               	.LBI35:
 255:/usr/avr/include/util/delay.h **** {
 296               		.loc 3 255 1 view .LVU77
 297               	.LBB36:
 257:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 298               		.loc 3 257 2 view .LVU78
 261:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 299               		.loc 3 261 2 view .LVU79
 262:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 300               		.loc 3 262 2 view .LVU80
 263:/usr/avr/include/util/delay.h **** 
 301               		.loc 3 263 2 view .LVU81
 273:/usr/avr/include/util/delay.h **** 	#endif
 302               		.loc 3 273 3 view .LVU82
 303               		.loc 3 276 2 view .LVU83
 304 00c8 8AE7      		ldi r24,lo8(122)
 305 00ca 8A95      	1:	dec r24
 306 00cc 01F4      		brne 1b
 307 00ce 00C0      		rjmp .
 308               	.LVL23:
 309               	/* epilogue start */
 310               		.loc 3 276 2 is_stmt 0 view .LVU84
 311               	.LBE36:
 312               	.LBE35:
 131:lcd.c         **** }
 313               		.loc 2 131 1 view .LVU85
 314 00d0 CF91      		pop r28
 315               	.LVL24:
 316               		.loc 2 131 1 view .LVU86
 317 00d2 0895      		ret
 318               		.cfi_endproc
 319               	.LFE17:
 322               	lcd_string:
 323               	.LVL25:
 324               	.LFB20:
 132:lcd.c         **** 
 133:lcd.c         **** static void lcd_command(uint8_t data)
 134:lcd.c         **** {
 135:lcd.c         **** 	LCD_OUT &= ~(1 << LCD_RS);
 136:lcd.c         **** 	lcd_out(data);
 137:lcd.c         **** 	lcd_out(data << 4);
 138:lcd.c         **** 	LCD_DELAY_US(LCD_DELAY_US_COMMAND);
 139:lcd.c         **** }
 140:lcd.c         **** 
 141:lcd.c         **** static void lcd_clear(void)
 142:lcd.c         **** {
 143:lcd.c         **** 	lcd_command(LCD_CLEAR_DISPLAY);
 144:lcd.c         **** 	LCD_DELAY_MS(LCD_DELAY_MS_CLEAR);
 145:lcd.c         **** }
 146:lcd.c         **** 
 147:lcd.c         **** static void lcd_string(const uint8_t *s)
 148:lcd.c         **** {
 325               		.loc 2 148 1 is_stmt 1 view -0
 326               		.cfi_startproc
 327               		.loc 2 148 1 is_stmt 0 view .LVU88
 328 00d4 CF93      		push r28
 329               	.LCFI1:
 330               		.cfi_def_cfa_offset 3
 331               		.cfi_offset 28, -2
 332 00d6 DF93      		push r29
 333               	.LCFI2:
 334               		.cfi_def_cfa_offset 4
 335               		.cfi_offset 29, -3
 336               	/* prologue: function */
 337               	/* frame size = 0 */
 338               	/* stack size = 2 */
 339               	.L__stack_usage = 2
 340 00d8 EC01      		movw r28,r24
 149:lcd.c         **** 	register uint8_t c;
 341               		.loc 2 149 2 is_stmt 1 view .LVU89
 150:lcd.c         **** 	for(; (c = *s); ++s)
 342               		.loc 2 150 2 view .LVU90
 343               	.LVL26:
 344               	.L17:
 345               		.loc 2 150 8 discriminator 1 view .LVU91
 346               		.loc 2 150 11 is_stmt 0 discriminator 1 view .LVU92
 347 00da 8991      		ld r24,Y+
 348               	.LVL27:
 349               		.loc 2 150 2 discriminator 1 view .LVU93
 350 00dc 8111      		cpse r24,__zero_reg__
 351 00de 00C0      		rjmp .L18
 352               	/* epilogue start */
 151:lcd.c         **** 	{
 152:lcd.c         **** 		lcd_data(c);
 153:lcd.c         **** 	}
 154:lcd.c         **** }
 353               		.loc 2 154 1 view .LVU94
 354 00e0 DF91      		pop r29
 355 00e2 CF91      		pop r28
 356               	.LVL28:
 357               		.loc 2 154 1 view .LVU95
 358 00e4 0895      		ret
 359               	.LVL29:
 360               	.L18:
 152:lcd.c         **** 	}
 361               		.loc 2 152 3 is_stmt 1 discriminator 2 view .LVU96
 362 00e6 0E94 0000 		call lcd_data
 363               	.LVL30:
 150:lcd.c         **** 	for(; (c = *s); ++s)
 364               		.loc 2 150 18 discriminator 2 view .LVU97
 150:lcd.c         **** 	for(; (c = *s); ++s)
 365               		.loc 2 150 18 is_stmt 0 discriminator 2 view .LVU98
 366 00ea 00C0      		rjmp .L17
 367               		.cfi_endproc
 368               	.LFE20:
 371               	lcd_string_P:
 372               	.LVL31:
 373               	.LFB21:
 155:lcd.c         **** 
 156:lcd.c         **** static void lcd_string_P(const uint8_t *s)
 157:lcd.c         **** {
 374               		.loc 2 157 1 is_stmt 1 view -0
 375               		.cfi_startproc
 376               		.loc 2 157 1 is_stmt 0 view .LVU100
 377 00ec CF93      		push r28
 378               	.LCFI3:
 379               		.cfi_def_cfa_offset 3
 380               		.cfi_offset 28, -2
 381 00ee DF93      		push r29
 382               	.LCFI4:
 383               		.cfi_def_cfa_offset 4
 384               		.cfi_offset 29, -3
 385               	/* prologue: function */
 386               	/* frame size = 0 */
 387               	/* stack size = 2 */
 388               	.L__stack_usage = 2
 389 00f0 EC01      		movw r28,r24
 158:lcd.c         **** 	register char c;
 390               		.loc 2 158 2 is_stmt 1 view .LVU101
 159:lcd.c         **** 	for(; (c = pgm_read_byte(s)); ++s)
 391               		.loc 2 159 2 view .LVU102
 392               	.LVL32:
 393               	.L20:
 394               		.loc 2 159 8 discriminator 1 view .LVU103
 395               	.LBB37:
 396               		.loc 2 159 13 discriminator 1 view .LVU104
 397               		.loc 2 159 13 discriminator 1 view .LVU105
 398               		.loc 2 159 13 discriminator 1 view .LVU106
 399 00f2 FE01      		movw r30,r28
 400               	/* #APP */
 401               	 ;  159 "lcd.c" 1
 402 00f4 8491      		lpm r24, Z
 403               		
 404               	 ;  0 "" 2
 405               	.LVL33:
 406               		.loc 2 159 13 discriminator 1 view .LVU107
 407               		.loc 2 159 13 is_stmt 0 discriminator 1 view .LVU108
 408               	/* #NOAPP */
 409               	.LBE37:
 410               		.loc 2 159 2 discriminator 1 view .LVU109
 411 00f6 8111      		cpse r24,__zero_reg__
 412 00f8 00C0      		rjmp .L21
 413               	/* epilogue start */
 160:lcd.c         **** 	{
 161:lcd.c         **** 		lcd_data(c);
 162:lcd.c         **** 	}
 163:lcd.c         **** }
 414               		.loc 2 163 1 view .LVU110
 415 00fa DF91      		pop r29
 416 00fc CF91      		pop r28
 417               	.LVL34:
 418               		.loc 2 163 1 view .LVU111
 419 00fe 0895      		ret
 420               	.LVL35:
 421               	.L21:
 161:lcd.c         **** 	}
 422               		.loc 2 161 3 is_stmt 1 discriminator 2 view .LVU112
 423 0100 0E94 0000 		call lcd_data
 424               	.LVL36:
 159:lcd.c         **** 	for(; (c = pgm_read_byte(s)); ++s)
 425               		.loc 2 159 32 discriminator 2 view .LVU113
 426 0104 2196      		adiw r28,1
 427               	.LVL37:
 159:lcd.c         **** 	for(; (c = pgm_read_byte(s)); ++s)
 428               		.loc 2 159 32 is_stmt 0 discriminator 2 view .LVU114
 429 0106 00C0      		rjmp .L20
 430               		.cfi_endproc
 431               	.LFE21:
 434               	lcd_command:
 435               	.LVL38:
 436               	.LFB18:
 134:lcd.c         **** 	LCD_OUT &= ~(1 << LCD_RS);
 437               		.loc 2 134 1 is_stmt 1 view -0
 438               		.cfi_startproc
 134:lcd.c         **** 	LCD_OUT &= ~(1 << LCD_RS);
 439               		.loc 2 134 1 is_stmt 0 view .LVU116
 440 0108 CF93      		push r28
 441               	.LCFI5:
 442               		.cfi_def_cfa_offset 3
 443               		.cfi_offset 28, -2
 444               	/* prologue: function */
 445               	/* frame size = 0 */
 446               	/* stack size = 1 */
 447               	.L__stack_usage = 1
 448 010a C82F      		mov r28,r24
 135:lcd.c         **** 	lcd_out(data);
 449               		.loc 2 135 2 is_stmt 1 view .LVU117
 135:lcd.c         **** 	lcd_out(data);
 450               		.loc 2 135 10 is_stmt 0 view .LVU118
 451 010c 5A98      		cbi 0xb,2
 136:lcd.c         **** 	lcd_out(data << 4);
 452               		.loc 2 136 2 is_stmt 1 view .LVU119
 453 010e 0E94 0000 		call lcd_out
 454               	.LVL39:
 137:lcd.c         **** 	LCD_DELAY_US(LCD_DELAY_US_COMMAND);
 455               		.loc 2 137 2 view .LVU120
 456 0112 8C2F      		mov r24,r28
 457 0114 8295      		swap r24
 458 0116 807F      		andi r24,lo8(-16)
 459 0118 0E94 0000 		call lcd_out
 460               	.LVL40:
 138:lcd.c         **** }
 461               		.loc 2 138 2 view .LVU121
 462               	.LBB38:
 463               	.LBI38:
 255:/usr/avr/include/util/delay.h **** {
 464               		.loc 3 255 1 view .LVU122
 465               	.LBB39:
 257:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 466               		.loc 3 257 2 view .LVU123
 261:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 467               		.loc 3 261 2 view .LVU124
 262:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 468               		.loc 3 262 2 view .LVU125
 263:/usr/avr/include/util/delay.h **** 
 469               		.loc 3 263 2 view .LVU126
 273:/usr/avr/include/util/delay.h **** 	#endif
 470               		.loc 3 273 3 view .LVU127
 471               		.loc 3 276 2 view .LVU128
 472 011c 80E7      		ldi r24,lo8(112)
 473 011e 8A95      	1:	dec r24
 474 0120 01F4      		brne 1b
 475               	.LVL41:
 476               	/* epilogue start */
 477               		.loc 3 276 2 is_stmt 0 view .LVU129
 478               	.LBE39:
 479               	.LBE38:
 139:lcd.c         **** 
 480               		.loc 2 139 1 view .LVU130
 481 0122 CF91      		pop r28
 482               	.LVL42:
 139:lcd.c         **** 
 483               		.loc 2 139 1 view .LVU131
 484 0124 0895      		ret
 485               		.cfi_endproc
 486               	.LFE18:
 489               	field_update:
 490               	.LVL43:
 491               	.LFB31:
 415:main.c        **** 	int8_t i;
 492               		.loc 1 415 1 is_stmt 1 view -0
 493               		.cfi_startproc
 415:main.c        **** 	int8_t i;
 494               		.loc 1 415 1 is_stmt 0 view .LVU133
 495 0126 1F93      		push r17
 496               	.LCFI6:
 497               		.cfi_def_cfa_offset 3
 498               		.cfi_offset 17, -2
 499 0128 CF93      		push r28
 500               	.LCFI7:
 501               		.cfi_def_cfa_offset 4
 502               		.cfi_offset 28, -3
 503 012a DF93      		push r29
 504               	.LCFI8:
 505               		.cfi_def_cfa_offset 5
 506               		.cfi_offset 29, -4
 507               	/* prologue: function */
 508               	/* frame size = 0 */
 509               	/* stack size = 3 */
 510               	.L__stack_usage = 3
 511 012c EC01      		movw r28,r24
 416:main.c        **** 	if(f->pos < f->width - 1)
 512               		.loc 1 416 2 is_stmt 1 view .LVU134
 417:main.c        **** 	{
 513               		.loc 1 417 2 view .LVU135
 417:main.c        **** 	{
 514               		.loc 1 417 15 is_stmt 0 view .LVU136
 515 012e 2A81      		ldd r18,Y+2
 419:main.c        **** 		for(i = 0; f->buf[i]; ++i)
 516               		.loc 1 419 3 view .LVU137
 517 0130 8981      		ldd r24,Y+1
 518               	.LVL44:
 419:main.c        **** 		for(i = 0; f->buf[i]; ++i)
 519               		.loc 1 419 3 view .LVU138
 520 0132 9881      		ld r25,Y
 417:main.c        **** 	{
 521               		.loc 1 417 23 view .LVU139
 522 0134 622F      		mov r22,r18
 523 0136 6150      		subi r22,1
 524 0138 770B      		sbc r23,r23
 525 013a AB01      		movw r20,r22
 417:main.c        **** 	{
 526               		.loc 1 417 4 view .LVU140
 527 013c 6D81      		ldd r22,Y+5
 528 013e 7E81      		ldd r23,Y+6
 529 0140 6417      		cp r22,r20
 530 0142 7507      		cpc r23,r21
 531 0144 04F4      		brge .L24
 419:main.c        **** 		for(i = 0; f->buf[i]; ++i)
 532               		.loc 1 419 3 is_stmt 1 view .LVU141
 533 0146 9111      		cpse r25,__zero_reg__
 534 0148 90E4      		ldi r25,lo8(64)
 535               	.L25:
 419:main.c        **** 		for(i = 0; f->buf[i]; ++i)
 536               		.loc 1 419 3 is_stmt 0 discriminator 4 view .LVU142
 537 014a 8058      		subi r24,lo8(-(-128))
 538 014c 890F      		add r24,r25
 539 014e 0E94 0000 		call lcd_command
 540               	.LVL45:
 420:main.c        **** 		{
 541               		.loc 1 420 3 is_stmt 1 discriminator 4 view .LVU143
 420:main.c        **** 		{
 542               		.loc 1 420 9 is_stmt 0 discriminator 4 view .LVU144
 543 0152 10E0      		ldi r17,0
 544               	.LVL46:
 545               	.L26:
 420:main.c        **** 		{
 546               		.loc 1 420 14 is_stmt 1 discriminator 1 view .LVU145
 420:main.c        **** 		{
 547               		.loc 1 420 20 is_stmt 0 discriminator 1 view .LVU146
 548 0154 EB81      		ldd r30,Y+3
 549 0156 FC81      		ldd r31,Y+4
 550 0158 E10F      		add r30,r17
 551 015a F11D      		adc r31,__zero_reg__
 552 015c 17FD      		sbrc r17,7
 553 015e FA95      		dec r31
 554 0160 8081      		ld r24,Z
 420:main.c        **** 		{
 555               		.loc 1 420 3 discriminator 1 view .LVU147
 556 0162 8111      		cpse r24,__zero_reg__
 557 0164 00C0      		rjmp .L27
 558               	.L28:
 425:main.c        **** 		{
 559               		.loc 1 425 9 is_stmt 1 discriminator 1 view .LVU148
 425:main.c        **** 		{
 560               		.loc 1 425 14 is_stmt 0 discriminator 1 view .LVU149
 561 0166 2A81      		ldd r18,Y+2
 425:main.c        **** 		{
 562               		.loc 1 425 3 discriminator 1 view .LVU150
 563 0168 812F      		mov r24,r17
 564 016a 012E      		mov __tmp_reg__,r17
 565 016c 000C      		lsl r0
 566 016e 990B      		sbc r25,r25
 567 0170 2817      		cp r18,r24
 568 0172 1906      		cpc __zero_reg__,r25
 569 0174 01F0      		breq .+2
 570 0176 04F4      		brge .L29
 430:main.c        **** 	}
 571               		.loc 1 430 3 is_stmt 1 view .LVU151
 572 0178 8D81      		ldd r24,Y+5
 573 017a 2981      		ldd r18,Y+1
 574 017c 2058      		subi r18,lo8(-(-128))
 575 017e 9881      		ld r25,Y
 576 0180 9111      		cpse r25,__zero_reg__
 577 0182 90E4      		ldi r25,lo8(64)
 578               	.L30:
 430:main.c        **** 	}
 579               		.loc 1 430 3 is_stmt 0 discriminator 4 view .LVU152
 580 0184 820F      		add r24,r18
 581               	.L43:
 444:main.c        **** 	}
 582               		.loc 1 444 3 discriminator 4 view .LVU153
 583 0186 890F      		add r24,r25
 584               	/* epilogue start */
 446:main.c        **** 
 585               		.loc 1 446 1 discriminator 4 view .LVU154
 586 0188 DF91      		pop r29
 587 018a CF91      		pop r28
 588               	.LVL47:
 446:main.c        **** 
 589               		.loc 1 446 1 discriminator 4 view .LVU155
 590 018c 1F91      		pop r17
 591               	.LVL48:
 444:main.c        **** 	}
 592               		.loc 1 444 3 discriminator 4 view .LVU156
 593 018e 0C94 0000 		jmp lcd_command
 594               	.LVL49:
 595               	.L27:
 422:main.c        **** 		}
 596               		.loc 1 422 4 is_stmt 1 discriminator 3 view .LVU157
 597 0192 0E94 0000 		call lcd_data
 598               	.LVL50:
 420:main.c        **** 		{
 599               		.loc 1 420 25 discriminator 3 view .LVU158
 600 0196 1F5F      		subi r17,lo8(-(1))
 601               	.LVL51:
 420:main.c        **** 		{
 602               		.loc 1 420 25 is_stmt 0 discriminator 3 view .LVU159
 603 0198 00C0      		rjmp .L26
 604               	.L29:
 427:main.c        **** 		}
 605               		.loc 1 427 4 is_stmt 1 discriminator 2 view .LVU160
 606 019a 80E2      		ldi r24,lo8(32)
 607 019c 0E94 0000 		call lcd_data
 608               	.LVL52:
 425:main.c        **** 		{
 609               		.loc 1 425 23 discriminator 2 view .LVU161
 610 01a0 1F5F      		subi r17,lo8(-(1))
 611               	.LVL53:
 425:main.c        **** 		{
 612               		.loc 1 425 23 is_stmt 0 discriminator 2 view .LVU162
 613 01a2 00C0      		rjmp .L28
 614               	.LVL54:
 615               	.L24:
 434:main.c        **** 		lcd_data(' ');
 616               		.loc 1 434 3 is_stmt 1 view .LVU163
 617 01a4 820F      		add r24,r18
 618 01a6 9111      		cpse r25,__zero_reg__
 619 01a8 90E4      		ldi r25,lo8(64)
 620               	.L31:
 434:main.c        **** 		lcd_data(' ');
 621               		.loc 1 434 3 is_stmt 0 discriminator 4 view .LVU164
 622 01aa 8158      		subi r24,lo8(-(127))
 623 01ac 890F      		add r24,r25
 624 01ae 0E94 0000 		call lcd_command
 625               	.LVL55:
 435:main.c        **** 
 626               		.loc 1 435 3 is_stmt 1 discriminator 4 view .LVU165
 627 01b2 80E2      		ldi r24,lo8(32)
 628 01b4 0E94 0000 		call lcd_data
 629               	.LVL56:
 437:main.c        **** 		for(i = f->pos - (f->width - 1);
 630               		.loc 1 437 3 discriminator 4 view .LVU166
 631 01b8 8981      		ldd r24,Y+1
 632 01ba 9881      		ld r25,Y
 633 01bc 9111      		cpse r25,__zero_reg__
 437:main.c        **** 		for(i = f->pos - (f->width - 1);
 634               		.loc 1 437 3 is_stmt 0 view .LVU167
 635 01be 90E4      		ldi r25,lo8(64)
 636               	.L32:
 437:main.c        **** 		for(i = f->pos - (f->width - 1);
 637               		.loc 1 437 3 discriminator 4 view .LVU168
 638 01c0 8058      		subi r24,lo8(-(-128))
 639 01c2 890F      		add r24,r25
 640 01c4 0E94 0000 		call lcd_command
 641               	.LVL57:
 438:main.c        **** 			i < f->pos + 1 && f->buf[i]; ++i)
 642               		.loc 1 438 3 is_stmt 1 discriminator 4 view .LVU169
 438:main.c        **** 			i < f->pos + 1 && f->buf[i]; ++i)
 643               		.loc 1 438 18 is_stmt 0 discriminator 4 view .LVU170
 644 01c8 1D81      		ldd r17,Y+5
 645 01ca 8A81      		ldd r24,Y+2
 646 01cc 181B      		sub r17,r24
 647               	.L42:
 439:main.c        **** 		{
 648               		.loc 1 439 33 is_stmt 1 discriminator 1 view .LVU171
 649 01ce 1F5F      		subi r17,lo8(-(1))
 650               	.LVL58:
 439:main.c        **** 		{
 651               		.loc 1 439 4 discriminator 1 view .LVU172
 439:main.c        **** 		{
 652               		.loc 1 439 6 is_stmt 0 discriminator 1 view .LVU173
 653 01d0 812F      		mov r24,r17
 654 01d2 012E      		mov __tmp_reg__,r17
 655 01d4 000C      		lsl r0
 656 01d6 990B      		sbc r25,r25
 438:main.c        **** 			i < f->pos + 1 && f->buf[i]; ++i)
 657               		.loc 1 438 3 discriminator 1 view .LVU174
 658 01d8 2D81      		ldd r18,Y+5
 659 01da 3E81      		ldd r19,Y+6
 660 01dc 2817      		cp r18,r24
 661 01de 3907      		cpc r19,r25
 662 01e0 04F0      		brlt .L34
 439:main.c        **** 		{
 663               		.loc 1 439 28 discriminator 2 view .LVU175
 664 01e2 EB81      		ldd r30,Y+3
 665 01e4 FC81      		ldd r31,Y+4
 666 01e6 E80F      		add r30,r24
 667 01e8 F91F      		adc r31,r25
 668 01ea 8081      		ld r24,Z
 439:main.c        **** 		{
 669               		.loc 1 439 19 discriminator 2 view .LVU176
 670 01ec 8111      		cpse r24,__zero_reg__
 671 01ee 00C0      		rjmp .L35
 672               	.L34:
 444:main.c        **** 	}
 673               		.loc 1 444 3 is_stmt 1 view .LVU177
 674 01f0 8981      		ldd r24,Y+1
 675 01f2 9A81      		ldd r25,Y+2
 676 01f4 890F      		add r24,r25
 677 01f6 9881      		ld r25,Y
 678 01f8 9111      		cpse r25,__zero_reg__
 679 01fa 90E4      		ldi r25,lo8(64)
 680               	.L36:
 444:main.c        **** 	}
 681               		.loc 1 444 3 is_stmt 0 discriminator 4 view .LVU178
 682 01fc 8158      		subi r24,lo8(-(127))
 683 01fe 00C0      		rjmp .L43
 684               	.L35:
 441:main.c        **** 		}
 685               		.loc 1 441 4 is_stmt 1 discriminator 1 view .LVU179
 686 0200 0E94 0000 		call lcd_data
 687               	.LVL59:
 688 0204 00C0      		rjmp .L42
 689               		.cfi_endproc
 690               	.LFE31:
 693               	lcd_clear:
 694               	.LFB19:
 142:lcd.c         **** 	lcd_command(LCD_CLEAR_DISPLAY);
 695               		.loc 2 142 1 view -0
 696               		.cfi_startproc
 697               	/* prologue: function */
 698               	/* frame size = 0 */
 699               	/* stack size = 0 */
 700               	.L__stack_usage = 0
 143:lcd.c         **** 	LCD_DELAY_MS(LCD_DELAY_MS_CLEAR);
 701               		.loc 2 143 2 view .LVU181
 702 0206 81E0      		ldi r24,lo8(1)
 703 0208 0E94 0000 		call lcd_command
 704               	.LVL60:
 144:lcd.c         **** }
 705               		.loc 2 144 2 view .LVU182
 706               	.LBB40:
 707               	.LBI40:
 166:/usr/avr/include/util/delay.h **** {
 708               		.loc 3 166 1 view .LVU183
 709               	.LBB41:
 168:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 710               		.loc 3 168 2 view .LVU184
 172:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 711               		.loc 3 172 2 view .LVU185
 173:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 712               		.loc 3 173 2 view .LVU186
 174:/usr/avr/include/util/delay.h **** 
 713               		.loc 3 174 2 view .LVU187
 184:/usr/avr/include/util/delay.h **** 	#endif
 714               		.loc 3 184 3 view .LVU188
 187:/usr/avr/include/util/delay.h **** 
 715               		.loc 3 187 2 view .LVU189
 716 020c 8FE9      		ldi r24,lo8(3999)
 717 020e 9FE0      		ldi r25,hi8(3999)
 718 0210 0197      	1:	sbiw r24,1
 719 0212 01F4      		brne 1b
 720 0214 00C0      		rjmp .
 721 0216 0000      		nop
 722               	.LVL61:
 723               	/* epilogue start */
 187:/usr/avr/include/util/delay.h **** 
 724               		.loc 3 187 2 is_stmt 0 view .LVU190
 725               	.LBE41:
 726               	.LBE40:
 145:lcd.c         **** 
 727               		.loc 2 145 1 view .LVU191
 728 0218 0895      		ret
 729               		.cfi_endproc
 730               	.LFE19:
 733               	mode_input:
 734               	.LFB36:
 586:main.c        **** 	_mode = mode_input;
 735               		.loc 1 586 1 is_stmt 1 view -0
 736               		.cfi_startproc
 737               	/* prologue: function */
 738               	/* frame size = 0 */
 739               	/* stack size = 0 */
 740               	.L__stack_usage = 0
 587:main.c        **** 	_event = mode_input_event;
 741               		.loc 1 587 2 view .LVU193
 587:main.c        **** 	_event = mode_input_event;
 742               		.loc 1 587 8 is_stmt 0 view .LVU194
 743 021a 80E0      		ldi r24,lo8(gs(mode_input))
 744 021c 90E0      		ldi r25,hi8(gs(mode_input))
 745 021e 9093 0000 		sts _mode+1,r25
 746 0222 8093 0000 		sts _mode,r24
 588:main.c        **** 	lcd_clear();
 747               		.loc 1 588 2 is_stmt 1 view .LVU195
 588:main.c        **** 	lcd_clear();
 748               		.loc 1 588 9 is_stmt 0 view .LVU196
 749 0226 80E0      		ldi r24,lo8(gs(mode_input_event))
 750 0228 90E0      		ldi r25,hi8(gs(mode_input_event))
 751 022a 9093 0000 		sts _event+1,r25
 752 022e 8093 0000 		sts _event,r24
 589:main.c        **** 	lcd_command(LCD_SET_DISPLAY | LCD_DISPLAY_ON |
 753               		.loc 1 589 2 is_stmt 1 view .LVU197
 754 0232 0E94 0000 		call lcd_clear
 755               	.LVL62:
 590:main.c        **** 		LCD_CURSOR_ON | LCD_BLINKING_OFF);
 756               		.loc 1 590 2 view .LVU198
 757 0236 8EE0      		ldi r24,lo8(14)
 758 0238 0E94 0000 		call lcd_command
 759               	.LVL63:
 592:main.c        **** }
 760               		.loc 1 592 2 view .LVU199
 761 023c 80E0      		ldi r24,lo8(fld_term)
 762 023e 90E0      		ldi r25,hi8(fld_term)
 763 0240 0C94 0000 		jmp field_update
 764               	.LVL64:
 765               		.cfi_endproc
 766               	.LFE36:
 769               	mode_settings:
 770               	.LFB43:
 875:main.c        **** 	_mode = mode_settings;
 771               		.loc 1 875 1 view -0
 772               		.cfi_startproc
 773               	/* prologue: function */
 774               	/* frame size = 0 */
 775               	/* stack size = 0 */
 776               	.L__stack_usage = 0
 876:main.c        **** 	_event = mode_settings_event;
 777               		.loc 1 876 2 view .LVU201
 876:main.c        **** 	_event = mode_settings_event;
 778               		.loc 1 876 8 is_stmt 0 view .LVU202
 779 0244 80E0      		ldi r24,lo8(gs(mode_settings))
 780 0246 90E0      		ldi r25,hi8(gs(mode_settings))
 781 0248 9093 0000 		sts _mode+1,r25
 782 024c 8093 0000 		sts _mode,r24
 877:main.c        **** 	tbl_cur_fld = &fld_start;
 783               		.loc 1 877 2 is_stmt 1 view .LVU203
 877:main.c        **** 	tbl_cur_fld = &fld_start;
 784               		.loc 1 877 9 is_stmt 0 view .LVU204
 785 0250 80E0      		ldi r24,lo8(gs(mode_settings_event))
 786 0252 90E0      		ldi r25,hi8(gs(mode_settings_event))
 787 0254 9093 0000 		sts _event+1,r25
 788 0258 8093 0000 		sts _event,r24
 878:main.c        **** 
 789               		.loc 1 878 2 is_stmt 1 view .LVU205
 878:main.c        **** 
 790               		.loc 1 878 14 is_stmt 0 view .LVU206
 791 025c 80E0      		ldi r24,lo8(fld_start)
 792 025e 90E0      		ldi r25,hi8(fld_start)
 793 0260 9093 0000 		sts tbl_cur_fld+1,r25
 794 0264 8093 0000 		sts tbl_cur_fld,r24
 880:main.c        **** 	lcd_command(LCD_SET_DISPLAY | LCD_DISPLAY_ON |
 795               		.loc 1 880 2 is_stmt 1 view .LVU207
 796 0268 0E94 0000 		call lcd_clear
 797               	.LVL65:
 881:main.c        **** 		LCD_CURSOR_ON | LCD_BLINKING_OFF);
 798               		.loc 1 881 2 view .LVU208
 799 026c 8EE0      		ldi r24,lo8(14)
 800 026e 0E94 0000 		call lcd_command
 801               	.LVL66:
 884:main.c        **** 	lcd_string(buf_start);
 802               		.loc 1 884 2 view .LVU209
 803 0272 80E0      		ldi r24,lo8(_str_start)
 804 0274 90E0      		ldi r25,hi8(_str_start)
 805 0276 0E94 0000 		call lcd_string_P
 806               	.LVL67:
 885:main.c        **** 
 807               		.loc 1 885 2 view .LVU210
 808 027a 80E0      		ldi r24,lo8(buf_start)
 809 027c 90E0      		ldi r25,hi8(buf_start)
 810 027e 0E94 0000 		call lcd_string
 811               	.LVL68:
 887:main.c        **** 	lcd_string_P(_str_step);
 812               		.loc 1 887 2 view .LVU211
 813 0282 80EC      		ldi r24,lo8(-64)
 814 0284 0E94 0000 		call lcd_command
 815               	.LVL69:
 888:main.c        **** 	lcd_string(buf_step);
 816               		.loc 1 888 2 view .LVU212
 817 0288 80E0      		ldi r24,lo8(_str_step)
 818 028a 90E0      		ldi r25,hi8(_str_step)
 819 028c 0E94 0000 		call lcd_string_P
 820               	.LVL70:
 889:main.c        **** 	field_update(tbl_cur_fld);
 821               		.loc 1 889 2 view .LVU213
 822 0290 80E0      		ldi r24,lo8(buf_step)
 823 0292 90E0      		ldi r25,hi8(buf_step)
 824 0294 0E94 0000 		call lcd_string
 825               	.LVL71:
 890:main.c        **** }
 826               		.loc 1 890 2 view .LVU214
 827 0298 8091 0000 		lds r24,tbl_cur_fld
 828 029c 9091 0000 		lds r25,tbl_cur_fld+1
 829 02a0 0C94 0000 		jmp field_update
 830               	.LVL72:
 831               		.cfi_endproc
 832               	.LFE43:
 835               	mode_error:
 836               	.LVL73:
 837               	.LFB45:
 942:main.c        **** 	lcd_clear();
 838               		.loc 1 942 1 view -0
 839               		.cfi_startproc
 942:main.c        **** 	lcd_clear();
 840               		.loc 1 942 1 is_stmt 0 view .LVU216
 841 02a4 CF93      		push r28
 842               	.LCFI9:
 843               		.cfi_def_cfa_offset 3
 844               		.cfi_offset 28, -2
 845               	/* prologue: function */
 846               	/* frame size = 0 */
 847               	/* stack size = 1 */
 848               	.L__stack_usage = 1
 849 02a6 C82F      		mov r28,r24
 943:main.c        **** 	lcd_command(LCD_SET_DISPLAY | LCD_DISPLAY_ON |
 850               		.loc 1 943 2 is_stmt 1 view .LVU217
 851 02a8 0E94 0000 		call lcd_clear
 852               	.LVL74:
 944:main.c        **** 		LCD_CURSOR_OFF | LCD_BLINKING_OFF);
 853               		.loc 1 944 2 view .LVU218
 854 02ac 8CE0      		ldi r24,lo8(12)
 855 02ae 0E94 0000 		call lcd_command
 856               	.LVL75:
 946:main.c        **** 	_event = mode_error_event;
 857               		.loc 1 946 2 view .LVU219
 858               	.LBB42:
 946:main.c        **** 	_event = mode_error_event;
 859               		.loc 1 946 26 view .LVU220
 860 02b2 EC2F      		mov r30,r28
 861 02b4 F0E0      		ldi r31,0
 862 02b6 EE0F      		lsl r30
 863 02b8 FF1F      		rol r31
 864 02ba E050      		subi r30,lo8(-(_err_msg-2))
 865 02bc F040      		sbci r31,hi8(-(_err_msg-2))
 866               	.LVL76:
 946:main.c        **** 	_event = mode_error_event;
 867               		.loc 1 946 26 view .LVU221
 946:main.c        **** 	_event = mode_error_event;
 868               		.loc 1 946 26 view .LVU222
 869               	/* #APP */
 870               	 ;  946 "main.c" 1
 871 02be 8591      		lpm r24, Z+
 872 02c0 9491      		lpm r25, Z
 873               		
 874               	 ;  0 "" 2
 875               	.LVL77:
 946:main.c        **** 	_event = mode_error_event;
 876               		.loc 1 946 26 view .LVU223
 877               	/* #NOAPP */
 878               	.LBE42:
 946:main.c        **** 	_event = mode_error_event;
 879               		.loc 1 946 2 is_stmt 0 view .LVU224
 880 02c2 0E94 0000 		call lcd_string_P
 881               	.LVL78:
 947:main.c        **** 	lcd_cursor(0, 1);
 882               		.loc 1 947 2 is_stmt 1 view .LVU225
 947:main.c        **** 	lcd_cursor(0, 1);
 883               		.loc 1 947 9 is_stmt 0 view .LVU226
 884 02c6 80E0      		ldi r24,lo8(gs(mode_error_event))
 885 02c8 90E0      		ldi r25,hi8(gs(mode_error_event))
 886 02ca 9093 0000 		sts _event+1,r25
 887 02ce 8093 0000 		sts _event,r24
 948:main.c        **** 	lcd_string_P(_str_press_any_key);
 888               		.loc 1 948 2 is_stmt 1 view .LVU227
 889 02d2 80EC      		ldi r24,lo8(-64)
 890 02d4 0E94 0000 		call lcd_command
 891               	.LVL79:
 949:main.c        **** }
 892               		.loc 1 949 2 view .LVU228
 893 02d8 80E0      		ldi r24,lo8(_str_press_any_key)
 894 02da 90E0      		ldi r25,hi8(_str_press_any_key)
 895               	/* epilogue start */
 950:main.c        **** 
 896               		.loc 1 950 1 is_stmt 0 view .LVU229
 897 02dc CF91      		pop r28
 898               	.LVL80:
 949:main.c        **** }
 899               		.loc 1 949 2 view .LVU230
 900 02de 0C94 0000 		jmp lcd_string_P
 901               	.LVL81:
 902               		.cfi_endproc
 903               	.LFE45:
 905               	.global	__addsf3
 906               	.global	__subsf3
 907               	.global	__mulsf3
 908               	.global	__eqsf2
 909               	.global	__divsf3
 910               	.global	__gesf2
 911               	.global	__lesf2
 913               	calc_solve:
 914               	.LVL82:
 915               	.LFB48:
 955:main.c        **** }
 956:main.c        **** 
 957:main.c        **** /* Calculation */
 958:main.c        **** static uint8_t calc_prepare(uint8_t *term)
 959:main.c        **** {
 960:main.c        **** 	uint8_t c, cur_type, isop, top_stack, top_num;
 961:main.c        **** 	cur_type = TT_NULL;
 962:main.c        **** 	tok_cnt = 0;
 963:main.c        **** 	top_num = 0;
 964:main.c        **** 	top_stack = 0;
 965:main.c        **** 	while((c = *term))
 966:main.c        **** 	{
 967:main.c        **** 		isop = 1;
 968:main.c        **** 
 969:main.c        **** 		/* Tokenizer */
 970:main.c        **** 		if(isdigit(c))
 971:main.c        **** 		{
 972:main.c        **** 			/* Numbers */
 973:main.c        **** 			uint8_t *begin, dps;
 974:main.c        **** 			float n, power;
 975:main.c        **** 
 976:main.c        **** 			/* Find the end of the float */
 977:main.c        **** 			for(dps = 0, begin = term; (c = *term); ++term)
 978:main.c        **** 			{
 979:main.c        **** 				if(c == CHAR_DP)
 980:main.c        **** 				{
 981:main.c        **** 					if(++dps > 1)
 982:main.c        **** 					{
 983:main.c        **** 						/* Return a syntax error if there
 984:main.c        **** 						is more than one decimal point */
 985:main.c        **** 						return ERROR_SYNTAX;
 986:main.c        **** 					}
 987:main.c        **** 				}
 988:main.c        **** 				else if(!isdigit(c))
 989:main.c        **** 				{
 990:main.c        **** 					/* Break when the end of the number
 991:main.c        **** 					(non digit character) is reached */
 992:main.c        **** 					break;
 993:main.c        **** 				}
 994:main.c        **** 			}
 995:main.c        **** 
 996:main.c        **** 			/* Digits before the decimal point */
 997:main.c        **** 			for(n = 0.0; begin < term; ++begin)
 998:main.c        **** 			{
 999:main.c        **** 				if((c = *begin) == CHAR_DP)
1000:main.c        **** 				{
1001:main.c        **** 					/* Skip the decimal point, if present */
1002:main.c        **** 					++begin;
1003:main.c        **** 					break;
1004:main.c        **** 				}
1005:main.c        **** 
1006:main.c        **** 				n = n * 10.0 + c - '0';
1007:main.c        **** 			}
1008:main.c        **** 
1009:main.c        **** 			/* Digits after the decimal point */
1010:main.c        **** 			for(power = 1.0; begin < term; ++begin)
1011:main.c        **** 			{
1012:main.c        **** 				n = n * 10.0 + *begin - '0';
1013:main.c        **** 				power *= 10.0;
1014:main.c        **** 			}
1015:main.c        **** 
1016:main.c        **** 			if(tok_cnt >= TOKEN_LIST_SIZE - 1)
1017:main.c        **** 			{
1018:main.c        **** 				return ERROR_NOMEM;
1019:main.c        **** 			}
1020:main.c        **** 
1021:main.c        **** 			tok_type_list[tok_cnt++] = cur_type = TT_NUMBER;
1022:main.c        **** 			tok_num_list[top_num++] = n / power;
1023:main.c        **** 			isop = 0;
1024:main.c        **** 		}
1025:main.c        **** 		else
1026:main.c        **** 		{
1027:main.c        **** 			/* Translate characters to tokens */
1028:main.c        **** 			switch(c)
1029:main.c        **** 			{
1030:main.c        **** 			case CHAR_SUB:
1031:main.c        **** 				switch(cur_type)
1032:main.c        **** 				{
1033:main.c        **** 				case TT_NULL:
1034:main.c        **** 				case TT_ADD:
1035:main.c        **** 				case TT_SUB:
1036:main.c        **** 				case TT_MUL:
1037:main.c        **** 				case TT_DIV:
1038:main.c        **** 				case TT_POW:
1039:main.c        **** 				case TT_LP:
1040:main.c        **** 					cur_type = TT_UNARY_MINUS;
1041:main.c        **** 					break;
1042:main.c        **** 
1043:main.c        **** 				case TT_NUMBER:
1044:main.c        **** 				case TT_X:
1045:main.c        **** 				case TT_RP:
1046:main.c        **** 					cur_type = TT_SUB;
1047:main.c        **** 					break;
1048:main.c        **** 				}
1049:main.c        **** 				break;
1050:main.c        **** 
1051:main.c        **** 			case CHAR_PI:
1052:main.c        **** 				if(tok_cnt >= TOKEN_LIST_SIZE - 1)
1053:main.c        **** 				{
1054:main.c        **** 					return ERROR_NOMEM;
1055:main.c        **** 				}
1056:main.c        **** 
1057:main.c        **** 				tok_type_list[tok_cnt++] =
1058:main.c        **** 					cur_type = TT_NUMBER;
1059:main.c        **** 				tok_num_list[top_num++] = M_PI;
1060:main.c        **** 				isop = 0;
1061:main.c        **** 				break;
1062:main.c        **** 
1063:main.c        **** 			case CHAR_X:
1064:main.c        **** 				if(tok_cnt >= TOKEN_LIST_SIZE - 1)
1065:main.c        **** 				{
1066:main.c        **** 					return ERROR_NOMEM;
1067:main.c        **** 				}
1068:main.c        **** 
1069:main.c        **** 				tok_type_list[tok_cnt++] =
1070:main.c        **** 					cur_type = TT_X;
1071:main.c        **** 				isop = 0;
1072:main.c        **** 				break;
1073:main.c        **** 
1074:main.c        **** 			/* Parenthesis */
1075:main.c        **** 			case CHAR_LP:
1076:main.c        **** 				/* Push onto the operator stack */
1077:main.c        **** 				if(top_stack >= OPERATOR_STACK_SIZE - 1)
1078:main.c        **** 				{
1079:main.c        **** 					return ERROR_NOMEM;
1080:main.c        **** 				}
1081:main.c        **** 
1082:main.c        **** 				op_stack[top_stack++] = cur_type = TT_LP;
1083:main.c        **** 				isop = 0;
1084:main.c        **** 				break;
1085:main.c        **** 
1086:main.c        **** 			case CHAR_RP:
1087:main.c        **** 			{
1088:main.c        **** 				/* Pop all operators from the stack
1089:main.c        **** 				until the opening bracket is found */
1090:main.c        **** 				uint8_t t, i;
1091:main.c        **** 				cur_type = TT_RP;
1092:main.c        **** 				i = 1;
1093:main.c        **** 				while(i)
1094:main.c        **** 				{
1095:main.c        **** 					if(top_stack == 0)
1096:main.c        **** 					{
1097:main.c        **** 						/* Missing opening bracket */
1098:main.c        **** 						return ERROR_SYNTAX;
1099:main.c        **** 					}
1100:main.c        **** 
1101:main.c        **** 					if((t = op_stack[top_stack - 1]) == TT_LP)
1102:main.c        **** 					{
1103:main.c        **** 						i = 0;
1104:main.c        **** 					}
1105:main.c        **** 					else
1106:main.c        **** 					{
1107:main.c        **** 						if(tok_cnt >= TOKEN_LIST_SIZE - 1)
1108:main.c        **** 						{
1109:main.c        **** 							return ERROR_NOMEM;
1110:main.c        **** 						}
1111:main.c        **** 
1112:main.c        **** 						tok_type_list[tok_cnt++] = t;
1113:main.c        **** 					}
1114:main.c        **** 
1115:main.c        **** 					--top_stack;
1116:main.c        **** 				}
1117:main.c        **** 
1118:main.c        **** 				isop = 0;
1119:main.c        **** 				break;
1120:main.c        **** 			}
1121:main.c        **** 
1122:main.c        **** 			/* Operators */
1123:main.c        **** 			case CHAR_ADD:
1124:main.c        **** 				cur_type = TT_ADD;
1125:main.c        **** 				break;
1126:main.c        **** 
1127:main.c        **** 			case CHAR_MUL:
1128:main.c        **** 				cur_type = TT_MUL;
1129:main.c        **** 				break;
1130:main.c        **** 
1131:main.c        **** 			case CHAR_DIV:
1132:main.c        **** 				cur_type = TT_DIV;
1133:main.c        **** 				break;
1134:main.c        **** 
1135:main.c        **** 			case CHAR_POW:
1136:main.c        **** 				cur_type = TT_POW;
1137:main.c        **** 				break;
1138:main.c        **** 
1139:main.c        **** 			/* Logarithm */
1140:main.c        **** 			case 'l':
1141:main.c        **** 				cur_type = TT_LOG;
1142:main.c        **** 				goto add2;
1143:main.c        **** 
1144:main.c        **** 			/* Trigonometric functions */
1145:main.c        **** 			case 'a':
1146:main.c        **** 				switch(*(++term))
1147:main.c        **** 				{
1148:main.c        **** 				case 's':
1149:main.c        **** 					cur_type = TT_ASIN;
1150:main.c        **** 					break;
1151:main.c        **** 
1152:main.c        **** 				case 'c':
1153:main.c        **** 					cur_type = TT_ACOS;
1154:main.c        **** 					break;
1155:main.c        **** 
1156:main.c        **** 				case 't':
1157:main.c        **** 					cur_type = TT_ATAN;
1158:main.c        **** 					break;
1159:main.c        **** 				}
1160:main.c        **** 
1161:main.c        **** 				goto add2;
1162:main.c        **** 
1163:main.c        **** 			case 's':
1164:main.c        **** 				cur_type = TT_SIN;
1165:main.c        **** 				goto add2;
1166:main.c        **** 
1167:main.c        **** 			case 'c':
1168:main.c        **** 				cur_type = TT_COS;
1169:main.c        **** 				goto add2;
1170:main.c        **** 
1171:main.c        **** 			case 't':
1172:main.c        **** 				cur_type = TT_TAN;
1173:main.c        **** 
1174:main.c        **** 			add2:
1175:main.c        **** 				term += 2;
1176:main.c        **** 			}
1177:main.c        **** 
1178:main.c        **** 			++term;
1179:main.c        **** 		}
1180:main.c        **** 
1181:main.c        **** 		/* RPN converter using the
1182:main.c        **** 		shunting yard algorithm */
1183:main.c        **** 		if(isop)
1184:main.c        **** 		{
1185:main.c        **** 			/* Any operator: Pop all operators from
1186:main.c        **** 			the stack that have a lower precedence */
1187:main.c        **** 			uint8_t precedence, tmp;
1188:main.c        **** 			precedence = get_precedence(cur_type);
1189:main.c        **** 			while(top_stack > 0)
1190:main.c        **** 			{
1191:main.c        **** 				tmp = op_stack[top_stack - 1];
1192:main.c        **** 				if((get_precedence(tmp) > precedence) ||
1193:main.c        **** 					(tmp == TT_LP))
1194:main.c        **** 				{
1195:main.c        **** 					break;
1196:main.c        **** 				}
1197:main.c        **** 
1198:main.c        **** 				--top_stack;
1199:main.c        **** 				if(tok_cnt >= TOKEN_LIST_SIZE - 1)
1200:main.c        **** 				{
1201:main.c        **** 					return ERROR_NOMEM;
1202:main.c        **** 				}
1203:main.c        **** 
1204:main.c        **** 				tok_type_list[tok_cnt++] = tmp;
1205:main.c        **** 			}
1206:main.c        **** 
1207:main.c        **** 			if(top_stack >= OPERATOR_STACK_SIZE - 1)
1208:main.c        **** 			{
1209:main.c        **** 				return ERROR_NOMEM;
1210:main.c        **** 			}
1211:main.c        **** 
1212:main.c        **** 			op_stack[top_stack++] = cur_type;
1213:main.c        **** 		}
1214:main.c        **** 	}
1215:main.c        **** 
1216:main.c        **** 	/* Pop all remaining operators from the stack */
1217:main.c        **** 	while(top_stack > 0)
1218:main.c        **** 	{
1219:main.c        **** 		if(tok_cnt >= TOKEN_LIST_SIZE - 1)
1220:main.c        **** 		{
1221:main.c        **** 			return ERROR_NOMEM;
1222:main.c        **** 		}
1223:main.c        **** 
1224:main.c        **** 		tok_type_list[tok_cnt++] =
1225:main.c        **** 			op_stack[--top_stack];
1226:main.c        **** 	}
1227:main.c        **** 
1228:main.c        **** 	return 0;
1229:main.c        **** }
1230:main.c        **** 
1231:main.c        **** static uint8_t calc_solve(float x, float *y)
1232:main.c        **** {
 916               		.loc 1 1232 1 is_stmt 1 view -0
 917               		.cfi_startproc
 918               		.loc 1 1232 1 is_stmt 0 view .LVU232
 919 02e2 4F92      		push r4
 920               	.LCFI10:
 921               		.cfi_def_cfa_offset 3
 922               		.cfi_offset 4, -2
 923 02e4 5F92      		push r5
 924               	.LCFI11:
 925               		.cfi_def_cfa_offset 4
 926               		.cfi_offset 5, -3
 927 02e6 6F92      		push r6
 928               	.LCFI12:
 929               		.cfi_def_cfa_offset 5
 930               		.cfi_offset 6, -4
 931 02e8 7F92      		push r7
 932               	.LCFI13:
 933               		.cfi_def_cfa_offset 6
 934               		.cfi_offset 7, -5
 935 02ea 8F92      		push r8
 936               	.LCFI14:
 937               		.cfi_def_cfa_offset 7
 938               		.cfi_offset 8, -6
 939 02ec 9F92      		push r9
 940               	.LCFI15:
 941               		.cfi_def_cfa_offset 8
 942               		.cfi_offset 9, -7
 943 02ee AF92      		push r10
 944               	.LCFI16:
 945               		.cfi_def_cfa_offset 9
 946               		.cfi_offset 10, -8
 947 02f0 BF92      		push r11
 948               	.LCFI17:
 949               		.cfi_def_cfa_offset 10
 950               		.cfi_offset 11, -9
 951 02f2 CF92      		push r12
 952               	.LCFI18:
 953               		.cfi_def_cfa_offset 11
 954               		.cfi_offset 12, -10
 955 02f4 DF92      		push r13
 956               	.LCFI19:
 957               		.cfi_def_cfa_offset 12
 958               		.cfi_offset 13, -11
 959 02f6 EF92      		push r14
 960               	.LCFI20:
 961               		.cfi_def_cfa_offset 13
 962               		.cfi_offset 14, -12
 963 02f8 FF92      		push r15
 964               	.LCFI21:
 965               		.cfi_def_cfa_offset 14
 966               		.cfi_offset 15, -13
 967 02fa 0F93      		push r16
 968               	.LCFI22:
 969               		.cfi_def_cfa_offset 15
 970               		.cfi_offset 16, -14
 971 02fc 1F93      		push r17
 972               	.LCFI23:
 973               		.cfi_def_cfa_offset 16
 974               		.cfi_offset 17, -15
 975 02fe CF93      		push r28
 976               	.LCFI24:
 977               		.cfi_def_cfa_offset 17
 978               		.cfi_offset 28, -16
 979 0300 DF93      		push r29
 980               	.LCFI25:
 981               		.cfi_def_cfa_offset 18
 982               		.cfi_offset 29, -17
 983 0302 CDB7      		in r28,__SP_L__
 984 0304 DEB7      		in r29,__SP_H__
 985               	.LCFI26:
 986               		.cfi_def_cfa_register 28
 987 0306 2A97      		sbiw r28,10
 988               	.LCFI27:
 989               		.cfi_def_cfa_offset 28
 990 0308 0FB6      		in __tmp_reg__,__SREG__
 991 030a F894      		cli
 992 030c DEBF      		out __SP_H__,r29
 993 030e 0FBE      		out __SREG__,__tmp_reg__
 994 0310 CDBF      		out __SP_L__,r28
 995               	/* prologue: function */
 996               	/* frame size = 10 */
 997               	/* stack size = 26 */
 998               	.L__stack_usage = 26
 999 0312 E62E      		mov r14,r22
 1000 0314 772E      		mov r7,r23
 1001 0316 682E      		mov r6,r24
 1002 0318 592E      		mov r5,r25
 1003 031a 5A01      		movw r10,r20
1233:main.c        **** 	float op_left, op_right;
 1004               		.loc 1 1233 2 is_stmt 1 view .LVU233
1234:main.c        **** 	uint8_t tok_type_i, tok_num_i, top_num;
 1005               		.loc 1 1234 2 view .LVU234
1235:main.c        **** 	tok_type_i = 0;
 1006               		.loc 1 1235 2 view .LVU235
 1007               	.LVL83:
1236:main.c        **** 	tok_num_i = 0;
 1008               		.loc 1 1236 2 view .LVU236
1237:main.c        **** 	top_num = 0;
 1009               		.loc 1 1237 2 view .LVU237
1238:main.c        **** 	for(; tok_type_i < tok_cnt; ++tok_type_i)
 1010               		.loc 1 1238 2 view .LVU238
 1011               		.loc 1 1238 19 is_stmt 0 view .LVU239
 1012 031c 4090 0000 		lds r4,tok_cnt
 1013 0320 80E0      		ldi r24,lo8(tok_type_list)
 1014 0322 882E      		mov r8,r24
 1015 0324 80E0      		ldi r24,hi8(tok_type_list)
 1016 0326 982E      		mov r9,r24
 1017               		.loc 1 1238 2 view .LVU240
 1018 0328 6401      		movw r12,r8
1237:main.c        **** 	top_num = 0;
 1019               		.loc 1 1237 10 view .LVU241
 1020 032a 1986      		std Y+9,__zero_reg__
1236:main.c        **** 	tok_num_i = 0;
 1021               		.loc 1 1236 12 view .LVU242
 1022 032c F12C      		mov r15,__zero_reg__
 1023               	.LVL84:
 1024               	.L49:
 1025               		.loc 1 1238 8 is_stmt 1 discriminator 1 view .LVU243
 1026               		.loc 1 1238 2 is_stmt 0 discriminator 1 view .LVU244
 1027 032e 8C2D      		mov r24,r12
 1028 0330 8819      		sub r24,r8
 1029 0332 8415      		cp r24,r4
 1030 0334 00F0      		brlo .L76
1239:main.c        **** 	{
1240:main.c        **** 		switch(tok_type_list[tok_type_i])
1241:main.c        **** 		{
1242:main.c        **** 		case TT_NUMBER:
1243:main.c        **** 			if(top_num >= NUMBER_STACK_SIZE - 1)
1244:main.c        **** 			{
1245:main.c        **** 				return ERROR_NOMEM;
1246:main.c        **** 			}
1247:main.c        **** 
1248:main.c        **** 			num_stack[top_num++] =
1249:main.c        **** 				tok_num_list[tok_num_i++];
1250:main.c        **** 			break;
1251:main.c        **** 
1252:main.c        **** 		case TT_X:
1253:main.c        **** 			if(top_num >= NUMBER_STACK_SIZE - 1)
1254:main.c        **** 			{
1255:main.c        **** 				return ERROR_NOMEM;
1256:main.c        **** 			}
1257:main.c        **** 
1258:main.c        **** 			num_stack[top_num++] = x;
1259:main.c        **** 			break;
1260:main.c        **** 
1261:main.c        **** 		default:
1262:main.c        **** 			op_right = 0;
1263:main.c        **** 			if(tok_type_list[tok_type_i] < TT_ADD)
1264:main.c        **** 			{
1265:main.c        **** 				if(top_num == 0)
1266:main.c        **** 				{
1267:main.c        **** 					/* Buffer underflow */
1268:main.c        **** 					return ERROR_SYNTAX;
1269:main.c        **** 				}
1270:main.c        **** 			}
1271:main.c        **** 			else
1272:main.c        **** 			{
1273:main.c        **** 				if(top_num <= 1)
1274:main.c        **** 				{
1275:main.c        **** 					/* Buffer underflow */
1276:main.c        **** 					return ERROR_SYNTAX;
1277:main.c        **** 				}
1278:main.c        **** 
1279:main.c        **** 				op_right = num_stack[--top_num];
1280:main.c        **** 			}
1281:main.c        **** 
1282:main.c        **** 			op_left = num_stack[--top_num];
1283:main.c        **** 			switch(tok_type_list[tok_type_i])
1284:main.c        **** 			{
1285:main.c        **** 			case TT_UNARY_MINUS:
1286:main.c        **** 				op_left = -op_left;
1287:main.c        **** 				break;
1288:main.c        **** 
1289:main.c        **** 			case TT_ADD:
1290:main.c        **** 				op_left += op_right;
1291:main.c        **** 				break;
1292:main.c        **** 
1293:main.c        **** 			case TT_SUB:
1294:main.c        **** 				op_left -= op_right;
1295:main.c        **** 				break;
1296:main.c        **** 
1297:main.c        **** 			case TT_MUL:
1298:main.c        **** 				op_left *= op_right;
1299:main.c        **** 				break;
1300:main.c        **** 
1301:main.c        **** 			case TT_DIV:
1302:main.c        **** 				if(op_right == 0.0)
1303:main.c        **** 				{
1304:main.c        **** 					/* Division by zero */
1305:main.c        **** 					return ERROR_MATH;
1306:main.c        **** 				}
1307:main.c        **** 
1308:main.c        **** 				op_left /= op_right;
1309:main.c        **** 				break;
1310:main.c        **** 
1311:main.c        **** 			case TT_LOG:
1312:main.c        **** 				op_left = log(op_left);
1313:main.c        **** 				break;
1314:main.c        **** 
1315:main.c        **** 			case TT_SIN:
1316:main.c        **** 				op_left = SIND(op_left);
1317:main.c        **** 				break;
1318:main.c        **** 
1319:main.c        **** 			case TT_COS:
1320:main.c        **** 				op_left = COSD(op_left);
1321:main.c        **** 				break;
1322:main.c        **** 
1323:main.c        **** 			case TT_TAN:
1324:main.c        **** 				op_left = TAND(op_left);
1325:main.c        **** 				break;
1326:main.c        **** 
1327:main.c        **** 			case TT_ASIN:
1328:main.c        **** 				if(!asin_acos_range(op_left))
1329:main.c        **** 				{
1330:main.c        **** 					return ERROR_MATH;
1331:main.c        **** 				}
1332:main.c        **** 				op_left = ASIND(op_left);
1333:main.c        **** 				break;
1334:main.c        **** 
1335:main.c        **** 			case TT_ACOS:
1336:main.c        **** 				if(!asin_acos_range(op_left))
1337:main.c        **** 				{
1338:main.c        **** 					return ERROR_MATH;
1339:main.c        **** 				}
1340:main.c        **** 				op_left = ACOSD(op_left);
1341:main.c        **** 				break;
1342:main.c        **** 
1343:main.c        **** 			case TT_ATAN:
1344:main.c        **** 				op_left = ATAND(op_left);
1345:main.c        **** 				break;
1346:main.c        **** 
1347:main.c        **** 			case TT_POW:
1348:main.c        **** 				op_left = pow(op_left, op_right);
1349:main.c        **** 				break;
1350:main.c        **** 
1351:main.c        **** 			default:
1352:main.c        **** 				continue;
1353:main.c        **** 			}
1354:main.c        **** 
1355:main.c        **** 			if(top_num >= NUMBER_STACK_SIZE - 1)
1356:main.c        **** 			{
1357:main.c        **** 				return ERROR_NOMEM;
1358:main.c        **** 			}
1359:main.c        **** 
1360:main.c        **** 			num_stack[top_num++] = op_left;
1361:main.c        **** 			break;
1362:main.c        **** 		}
1363:main.c        **** 	}
1364:main.c        **** 
1365:main.c        **** 	if(top_num != 1)
 1031               		.loc 1 1365 2 is_stmt 1 view .LVU245
 1032               		.loc 1 1365 4 is_stmt 0 view .LVU246
 1033 0336 8985      		ldd r24,Y+9
 1034               	.LVL85:
 1035               		.loc 1 1365 4 view .LVU247
 1036 0338 8130      		cpi r24,lo8(1)
 1037 033a 01F0      		breq .+2
 1038 033c 00C0      		rjmp .L85
1366:main.c        **** 	{
1367:main.c        **** 		return ERROR_SYNTAX;
1368:main.c        **** 	}
1369:main.c        **** 
1370:main.c        **** 	*y = num_stack[--top_num];
 1039               		.loc 1 1370 2 is_stmt 1 view .LVU248
 1040               	.LVL86:
 1041               		.loc 1 1370 5 is_stmt 0 view .LVU249
 1042 033e 8091 0000 		lds r24,num_stack
 1043 0342 9091 0000 		lds r25,num_stack+1
 1044 0346 A091 0000 		lds r26,num_stack+2
 1045 034a B091 0000 		lds r27,num_stack+3
 1046 034e F501      		movw r30,r10
 1047 0350 8083      		st Z,r24
 1048 0352 9183      		std Z+1,r25
 1049 0354 A283      		std Z+2,r26
 1050 0356 B383      		std Z+3,r27
1371:main.c        **** 	return 0;
 1051               		.loc 1 1371 2 is_stmt 1 view .LVU250
 1052               		.loc 1 1371 9 is_stmt 0 view .LVU251
 1053 0358 80E0      		ldi r24,0
 1054               	.LVL87:
 1055               	.L48:
 1056               	/* epilogue start */
1372:main.c        **** }
 1057               		.loc 1 1372 1 view .LVU252
 1058 035a 2A96      		adiw r28,10
 1059 035c 0FB6      		in __tmp_reg__,__SREG__
 1060 035e F894      		cli
 1061 0360 DEBF      		out __SP_H__,r29
 1062 0362 0FBE      		out __SREG__,__tmp_reg__
 1063 0364 CDBF      		out __SP_L__,r28
 1064 0366 DF91      		pop r29
 1065 0368 CF91      		pop r28
 1066 036a 1F91      		pop r17
 1067 036c 0F91      		pop r16
 1068 036e FF90      		pop r15
 1069               	.LVL88:
 1070               		.loc 1 1372 1 view .LVU253
 1071 0370 EF90      		pop r14
 1072 0372 DF90      		pop r13
 1073 0374 CF90      		pop r12
 1074 0376 BF90      		pop r11
 1075 0378 AF90      		pop r10
 1076               	.LVL89:
 1077               		.loc 1 1372 1 view .LVU254
 1078 037a 9F90      		pop r9
 1079 037c 8F90      		pop r8
 1080 037e 7F90      		pop r7
 1081 0380 6F90      		pop r6
 1082 0382 5F90      		pop r5
 1083 0384 4F90      		pop r4
 1084 0386 0895      		ret
 1085               	.LVL90:
 1086               	.L76:
1240:main.c        **** 		{
 1087               		.loc 1 1240 3 is_stmt 1 view .LVU255
1240:main.c        **** 		{
 1088               		.loc 1 1240 23 is_stmt 0 view .LVU256
 1089 0388 D601      		movw r26,r12
 1090 038a ED91      		ld r30,X+
 1091 038c 6D01      		movw r12,r26
 1092               	.LVL91:
1240:main.c        **** 		{
 1093               		.loc 1 1240 3 view .LVU257
 1094 038e E130      		cpi r30,lo8(1)
 1095 0390 01F0      		breq .L50
 1096 0392 E230      		cpi r30,lo8(2)
 1097 0394 01F4      		brne .+2
 1098 0396 00C0      		rjmp .L51
1262:main.c        **** 			if(tok_type_list[tok_type_i] < TT_ADD)
 1099               		.loc 1 1262 4 is_stmt 1 view .LVU258
 1100               	.LVL92:
1263:main.c        **** 			{
 1101               		.loc 1 1263 4 view .LVU259
1263:main.c        **** 			{
 1102               		.loc 1 1263 6 is_stmt 0 view .LVU260
 1103 0398 ED30      		cpi r30,lo8(13)
 1104 039a 00F0      		brlo .+2
 1105 039c 00C0      		rjmp .L55
1265:main.c        **** 				{
 1106               		.loc 1 1265 5 is_stmt 1 view .LVU261
1265:main.c        **** 				{
 1107               		.loc 1 1265 7 is_stmt 0 view .LVU262
 1108 039e A985      		ldd r26,Y+9
 1109 03a0 AA23      		tst r26
 1110 03a2 01F4      		brne .+2
 1111 03a4 00C0      		rjmp .L85
1262:main.c        **** 			if(tok_type_list[tok_type_i] < TT_ADD)
 1112               		.loc 1 1262 13 view .LVU263
 1113 03a6 1D82      		std Y+5,__zero_reg__
 1114 03a8 1E82      		std Y+6,__zero_reg__
 1115 03aa 1F82      		std Y+7,__zero_reg__
 1116 03ac 1886      		std Y+8,__zero_reg__
 1117               	.LVL93:
 1118               	.L56:
1282:main.c        **** 			switch(tok_type_list[tok_type_i])
 1119               		.loc 1 1282 4 is_stmt 1 discriminator 1 view .LVU264
1282:main.c        **** 			switch(tok_type_list[tok_type_i])
 1120               		.loc 1 1282 12 is_stmt 0 discriminator 1 view .LVU265
 1121 03ae 3985      		ldd r19,Y+9
 1122               	.LVL94:
1282:main.c        **** 			switch(tok_type_list[tok_type_i])
 1123               		.loc 1 1282 12 discriminator 1 view .LVU266
 1124 03b0 3150      		subi r19,lo8(-(-1))
 1125               	.LVL95:
1282:main.c        **** 			switch(tok_type_list[tok_type_i])
 1126               		.loc 1 1282 12 discriminator 1 view .LVU267
 1127 03b2 3A87      		std Y+10,r19
 1128               	.LVL96:
1282:main.c        **** 			switch(tok_type_list[tok_type_i])
 1129               		.loc 1 1282 12 discriminator 1 view .LVU268
 1130 03b4 44E0      		ldi r20,lo8(4)
 1131 03b6 349F      		mul r19,r20
 1132 03b8 8001      		movw r16,r0
 1133 03ba 1124      		clr __zero_reg__
 1134 03bc D801      		movw r26,r16
 1135 03be A050      		subi r26,lo8(-(num_stack))
 1136 03c0 B040      		sbci r27,hi8(-(num_stack))
 1137 03c2 2D91      		ld r18,X+
 1138 03c4 3D91      		ld r19,X+
 1139 03c6 4D91      		ld r20,X+
 1140 03c8 5C91      		ld r21,X
 1141 03ca 2983      		std Y+1,r18
 1142 03cc 3A83      		std Y+2,r19
 1143 03ce 4B83      		std Y+3,r20
 1144 03d0 5C83      		std Y+4,r21
 1145               	.LVL97:
1283:main.c        **** 			{
 1146               		.loc 1 1283 4 is_stmt 1 discriminator 1 view .LVU269
 1147 03d2 E550      		subi r30,lo8(-(-5))
 1148 03d4 ED30      		cpi r30,lo8(13)
 1149 03d6 00F4      		brsh .L54
 1150 03d8 F0E0      		ldi r31,0
 1151 03da E050      		subi r30,lo8(-(gs(.L58)))
 1152 03dc F040      		sbci r31,hi8(-(gs(.L58)))
 1153 03de 0C94 0000 		jmp __tablejump2__
 1154               		.section	.jumptables.gcc.calc_solve,"a",@progbits
 1155               		.p2align	1
 1156               	.L58:
 1157 0000 0000      		.word gs(.L70)
 1158 0002 0000      		.word gs(.L69)
 1159 0004 0000      		.word gs(.L68)
 1160 0006 0000      		.word gs(.L67)
 1161 0008 0000      		.word gs(.L66)
 1162 000a 0000      		.word gs(.L65)
 1163 000c 0000      		.word gs(.L64)
 1164 000e 0000      		.word gs(.L63)
 1165 0010 0000      		.word gs(.L62)
 1166 0012 0000      		.word gs(.L61)
 1167 0014 0000      		.word gs(.L60)
 1168 0016 0000      		.word gs(.L59)
 1169 0018 0000      		.word gs(.L57)
 1170               		.text
 1171               	.LVL98:
 1172               	.L50:
1243:main.c        **** 			{
 1173               		.loc 1 1243 4 view .LVU270
1243:main.c        **** 			{
 1174               		.loc 1 1243 6 is_stmt 0 view .LVU271
 1175 03e2 B985      		ldd r27,Y+9
 1176 03e4 BF31      		cpi r27,lo8(31)
 1177 03e6 00F0      		brlo .+2
 1178 03e8 00C0      		rjmp .L84
1248:main.c        **** 				tok_num_list[tok_num_i++];
 1179               		.loc 1 1248 4 is_stmt 1 view .LVU272
 1180               	.LVL99:
1248:main.c        **** 				tok_num_list[tok_num_i++];
 1181               		.loc 1 1248 21 is_stmt 0 view .LVU273
 1182 03ea BF5F      		subi r27,lo8(-(1))
 1183 03ec BA87      		std Y+10,r27
 1184               	.LVL100:
1248:main.c        **** 				tok_num_list[tok_num_i++];
 1185               		.loc 1 1248 25 view .LVU274
 1186 03ee 3985      		ldd r19,Y+9
 1187 03f0 24E0      		ldi r18,lo8(4)
 1188 03f2 329F      		mul r19,r18
 1189 03f4 F001      		movw r30,r0
 1190 03f6 1124      		clr __zero_reg__
 1191 03f8 E050      		subi r30,lo8(-(num_stack))
 1192 03fa F040      		sbci r31,hi8(-(num_stack))
1249:main.c        **** 			break;
 1193               		.loc 1 1249 17 view .LVU275
 1194 03fc 44E0      		ldi r20,lo8(4)
 1195 03fe F49E      		mul r15,r20
 1196 0400 D001      		movw r26,r0
 1197 0402 1124      		clr __zero_reg__
 1198 0404 A050      		subi r26,lo8(-(tok_num_list))
 1199 0406 B040      		sbci r27,hi8(-(tok_num_list))
1248:main.c        **** 				tok_num_list[tok_num_i++];
 1200               		.loc 1 1248 25 view .LVU276
 1201 0408 8D91      		ld r24,X+
 1202 040a 9D91      		ld r25,X+
 1203 040c 0D90      		ld __tmp_reg__,X+
 1204 040e BC91      		ld r27,X
 1205 0410 A02D      		mov r26,__tmp_reg__
 1206 0412 8083      		st Z,r24
 1207 0414 9183      		std Z+1,r25
 1208 0416 A283      		std Z+2,r26
 1209 0418 B383      		std Z+3,r27
1250:main.c        **** 
 1210               		.loc 1 1250 4 is_stmt 1 view .LVU277
1249:main.c        **** 			break;
 1211               		.loc 1 1249 27 is_stmt 0 view .LVU278
 1212 041a F394      		inc r15
 1213               	.LVL101:
 1214               	.L54:
1238:main.c        **** 	{
 1215               		.loc 1 1238 30 is_stmt 1 view .LVU279
1236:main.c        **** 	top_num = 0;
 1216               		.loc 1 1236 12 is_stmt 0 view .LVU280
 1217 041c 5A85      		ldd r21,Y+10
 1218               	.LVL102:
1236:main.c        **** 	top_num = 0;
 1219               		.loc 1 1236 12 view .LVU281
 1220 041e 5987      		std Y+9,r21
 1221 0420 00C0      		rjmp .L49
 1222               	.LVL103:
 1223               	.L51:
1253:main.c        **** 			{
 1224               		.loc 1 1253 4 is_stmt 1 view .LVU282
1253:main.c        **** 			{
 1225               		.loc 1 1253 6 is_stmt 0 view .LVU283
 1226 0422 5985      		ldd r21,Y+9
 1227 0424 5F31      		cpi r21,lo8(31)
 1228 0426 00F0      		brlo .+2
 1229 0428 00C0      		rjmp .L84
1258:main.c        **** 			break;
 1230               		.loc 1 1258 4 is_stmt 1 view .LVU284
1258:main.c        **** 			break;
 1231               		.loc 1 1258 21 is_stmt 0 view .LVU285
 1232 042a 5F5F      		subi r21,lo8(-(1))
 1233 042c 5A87      		std Y+10,r21
 1234               	.LVL104:
1258:main.c        **** 			break;
 1235               		.loc 1 1258 25 view .LVU286
 1236 042e 9985      		ldd r25,Y+9
 1237 0430 84E0      		ldi r24,lo8(4)
 1238 0432 989F      		mul r25,r24
 1239 0434 F001      		movw r30,r0
 1240 0436 1124      		clr __zero_reg__
 1241 0438 E050      		subi r30,lo8(-(num_stack))
 1242 043a F040      		sbci r31,hi8(-(num_stack))
 1243 043c 8E2D      		mov r24,r14
 1244 043e 972D      		mov r25,r7
 1245 0440 A62D      		mov r26,r6
 1246 0442 B52D      		mov r27,r5
 1247 0444 8083      		st Z,r24
 1248 0446 9183      		std Z+1,r25
 1249 0448 A283      		std Z+2,r26
 1250 044a B383      		std Z+3,r27
1259:main.c        **** 
 1251               		.loc 1 1259 4 is_stmt 1 view .LVU287
 1252 044c 00C0      		rjmp .L54
 1253               	.LVL105:
 1254               	.L55:
1273:main.c        **** 				{
 1255               		.loc 1 1273 5 view .LVU288
1273:main.c        **** 				{
 1256               		.loc 1 1273 7 is_stmt 0 view .LVU289
 1257 044e B985      		ldd r27,Y+9
 1258 0450 B230      		cpi r27,lo8(2)
 1259 0452 00F4      		brsh .+2
 1260 0454 00C0      		rjmp .L85
1279:main.c        **** 			}
 1261               		.loc 1 1279 5 is_stmt 1 view .LVU290
1279:main.c        **** 			}
 1262               		.loc 1 1279 14 is_stmt 0 view .LVU291
 1263 0456 B150      		subi r27,lo8(-(-1))
 1264 0458 B987      		std Y+9,r27
 1265               	.LVL106:
1279:main.c        **** 			}
 1266               		.loc 1 1279 14 view .LVU292
 1267 045a F4E0      		ldi r31,lo8(4)
 1268 045c BF9F      		mul r27,r31
 1269 045e D001      		movw r26,r0
 1270 0460 1124      		clr __zero_reg__
 1271 0462 A050      		subi r26,lo8(-(num_stack))
 1272 0464 B040      		sbci r27,hi8(-(num_stack))
 1273 0466 2D91      		ld r18,X+
 1274 0468 3D91      		ld r19,X+
 1275 046a 4D91      		ld r20,X+
 1276 046c 5C91      		ld r21,X
 1277 046e 2D83      		std Y+5,r18
 1278 0470 3E83      		std Y+6,r19
 1279 0472 4F83      		std Y+7,r20
 1280 0474 5887      		std Y+8,r21
 1281               	.LVL107:
1279:main.c        **** 			}
 1282               		.loc 1 1279 14 view .LVU293
 1283 0476 00C0      		rjmp .L56
 1284               	.LVL108:
 1285               	.L70:
1286:main.c        **** 				break;
 1286               		.loc 1 1286 5 is_stmt 1 view .LVU294
1286:main.c        **** 				break;
 1287               		.loc 1 1286 13 is_stmt 0 view .LVU295
 1288 0478 8981      		ldd r24,Y+1
 1289 047a 9A81      		ldd r25,Y+2
 1290 047c AB81      		ldd r26,Y+3
 1291 047e BC81      		ldd r27,Y+4
 1292 0480 B058      		subi r27,0x80
 1293               	.LVL109:
1287:main.c        **** 
 1294               		.loc 1 1287 5 is_stmt 1 view .LVU296
 1295               	.L71:
1355:main.c        **** 			{
 1296               		.loc 1 1355 4 view .LVU297
1355:main.c        **** 			{
 1297               		.loc 1 1355 6 is_stmt 0 view .LVU298
 1298 0482 3A85      		ldd r19,Y+10
 1299 0484 3F31      		cpi r19,lo8(31)
 1300 0486 00F0      		brlo .+2
 1301 0488 00C0      		rjmp .L84
1360:main.c        **** 			break;
 1302               		.loc 1 1360 4 is_stmt 1 view .LVU299
1360:main.c        **** 			break;
 1303               		.loc 1 1360 25 is_stmt 0 view .LVU300
 1304 048a F801      		movw r30,r16
 1305 048c E050      		subi r30,lo8(-(num_stack))
 1306 048e F040      		sbci r31,hi8(-(num_stack))
 1307 0490 8083      		st Z,r24
 1308 0492 9183      		std Z+1,r25
 1309 0494 A283      		std Z+2,r26
 1310 0496 B383      		std Z+3,r27
1361:main.c        **** 		}
 1311               		.loc 1 1361 4 is_stmt 1 view .LVU301
 1312 0498 4985      		ldd r20,Y+9
 1313               	.LVL110:
1361:main.c        **** 		}
 1314               		.loc 1 1361 4 is_stmt 0 view .LVU302
 1315 049a 4A87      		std Y+10,r20
 1316 049c 00C0      		rjmp .L54
 1317               	.LVL111:
 1318               	.L62:
1290:main.c        **** 				break;
 1319               		.loc 1 1290 5 is_stmt 1 view .LVU303
1290:main.c        **** 				break;
 1320               		.loc 1 1290 13 is_stmt 0 view .LVU304
 1321 049e 2981      		ldd r18,Y+1
 1322 04a0 3A81      		ldd r19,Y+2
 1323 04a2 4B81      		ldd r20,Y+3
 1324 04a4 5C81      		ldd r21,Y+4
 1325               	.LVL112:
1290:main.c        **** 				break;
 1326               		.loc 1 1290 13 view .LVU305
 1327 04a6 6D81      		ldd r22,Y+5
 1328 04a8 7E81      		ldd r23,Y+6
 1329 04aa 8F81      		ldd r24,Y+7
 1330 04ac 9885      		ldd r25,Y+8
 1331 04ae 0E94 0000 		call __addsf3
 1332               	.LVL113:
 1333               	.L91:
1348:main.c        **** 				break;
 1334               		.loc 1 1348 15 view .LVU306
 1335 04b2 382F      		mov r19,r24
 1336 04b4 292F      		mov r18,r25
 1337 04b6 CB01      		movw r24,r22
 1338 04b8 A32F      		mov r26,r19
 1339 04ba B22F      		mov r27,r18
 1340               	.LVL114:
1349:main.c        **** 
 1341               		.loc 1 1349 5 is_stmt 1 view .LVU307
 1342 04bc 00C0      		rjmp .L71
 1343               	.LVL115:
 1344               	.L61:
1294:main.c        **** 				break;
 1345               		.loc 1 1294 5 view .LVU308
1294:main.c        **** 				break;
 1346               		.loc 1 1294 13 is_stmt 0 view .LVU309
 1347 04be 2D81      		ldd r18,Y+5
 1348 04c0 3E81      		ldd r19,Y+6
 1349 04c2 4F81      		ldd r20,Y+7
 1350 04c4 5885      		ldd r21,Y+8
 1351               	.LVL116:
1294:main.c        **** 				break;
 1352               		.loc 1 1294 13 view .LVU310
 1353 04c6 6981      		ldd r22,Y+1
 1354 04c8 7A81      		ldd r23,Y+2
 1355 04ca 8B81      		ldd r24,Y+3
 1356 04cc 9C81      		ldd r25,Y+4
 1357 04ce 0E94 0000 		call __subsf3
 1358               	.LVL117:
1294:main.c        **** 				break;
 1359               		.loc 1 1294 13 view .LVU311
 1360 04d2 00C0      		rjmp .L91
 1361               	.LVL118:
 1362               	.L60:
1298:main.c        **** 				break;
 1363               		.loc 1 1298 5 is_stmt 1 view .LVU312
1298:main.c        **** 				break;
 1364               		.loc 1 1298 13 is_stmt 0 view .LVU313
 1365 04d4 2981      		ldd r18,Y+1
 1366 04d6 3A81      		ldd r19,Y+2
 1367 04d8 4B81      		ldd r20,Y+3
 1368 04da 5C81      		ldd r21,Y+4
 1369               	.LVL119:
1298:main.c        **** 				break;
 1370               		.loc 1 1298 13 view .LVU314
 1371 04dc 6D81      		ldd r22,Y+5
 1372 04de 7E81      		ldd r23,Y+6
 1373 04e0 8F81      		ldd r24,Y+7
 1374 04e2 9885      		ldd r25,Y+8
 1375               	.LVL120:
 1376               	.L93:
1340:main.c        **** 				break;
 1377               		.loc 1 1340 13 view .LVU315
 1378 04e4 0E94 0000 		call __mulsf3
 1379               	.LVL121:
 1380 04e8 00C0      		rjmp .L91
 1381               	.LVL122:
 1382               	.L59:
1302:main.c        **** 				{
 1383               		.loc 1 1302 5 is_stmt 1 view .LVU316
1302:main.c        **** 				{
 1384               		.loc 1 1302 7 is_stmt 0 view .LVU317
 1385 04ea 20E0      		ldi r18,0
 1386 04ec 30E0      		ldi r19,0
 1387 04ee A901      		movw r20,r18
 1388               	.LVL123:
1302:main.c        **** 				{
 1389               		.loc 1 1302 7 view .LVU318
 1390 04f0 6D81      		ldd r22,Y+5
 1391 04f2 7E81      		ldd r23,Y+6
 1392 04f4 8F81      		ldd r24,Y+7
 1393 04f6 9885      		ldd r25,Y+8
 1394 04f8 0E94 0000 		call __eqsf2
 1395               	.LVL124:
1302:main.c        **** 				{
 1396               		.loc 1 1302 7 view .LVU319
 1397 04fc 8823      		tst r24
 1398 04fe 01F4      		brne .+2
 1399 0500 00C0      		rjmp .L90
1308:main.c        **** 				break;
 1400               		.loc 1 1308 5 is_stmt 1 view .LVU320
1308:main.c        **** 				break;
 1401               		.loc 1 1308 13 is_stmt 0 view .LVU321
 1402 0502 2D81      		ldd r18,Y+5
 1403 0504 3E81      		ldd r19,Y+6
 1404 0506 4F81      		ldd r20,Y+7
 1405 0508 5885      		ldd r21,Y+8
 1406 050a 6981      		ldd r22,Y+1
 1407 050c 7A81      		ldd r23,Y+2
 1408 050e 8B81      		ldd r24,Y+3
 1409 0510 9C81      		ldd r25,Y+4
 1410 0512 0E94 0000 		call __divsf3
 1411               	.LVL125:
 1412 0516 00C0      		rjmp .L91
 1413               	.LVL126:
 1414               	.L69:
1312:main.c        **** 				break;
 1415               		.loc 1 1312 5 is_stmt 1 view .LVU322
1312:main.c        **** 				break;
 1416               		.loc 1 1312 15 is_stmt 0 view .LVU323
 1417 0518 6981      		ldd r22,Y+1
 1418 051a 7A81      		ldd r23,Y+2
 1419 051c 8B81      		ldd r24,Y+3
 1420 051e 9C81      		ldd r25,Y+4
 1421 0520 0E94 0000 		call log
 1422               	.LVL127:
1312:main.c        **** 				break;
 1423               		.loc 1 1312 15 view .LVU324
 1424 0524 00C0      		rjmp .L91
 1425               	.LVL128:
 1426               	.L68:
1316:main.c        **** 				break;
 1427               		.loc 1 1316 5 is_stmt 1 view .LVU325
1316:main.c        **** 				break;
 1428               		.loc 1 1316 15 is_stmt 0 view .LVU326
 1429 0526 2BED      		ldi r18,lo8(-37)
 1430 0528 3FE0      		ldi r19,lo8(15)
 1431 052a 49E4      		ldi r20,lo8(73)
 1432 052c 50E4      		ldi r21,lo8(64)
 1433               	.LVL129:
1316:main.c        **** 				break;
 1434               		.loc 1 1316 15 view .LVU327
 1435 052e 6981      		ldd r22,Y+1
 1436 0530 7A81      		ldd r23,Y+2
 1437 0532 8B81      		ldd r24,Y+3
 1438 0534 9C81      		ldd r25,Y+4
 1439 0536 0E94 0000 		call __mulsf3
 1440               	.LVL130:
1316:main.c        **** 				break;
 1441               		.loc 1 1316 15 view .LVU328
 1442 053a 20E0      		ldi r18,0
 1443 053c 30E0      		ldi r19,0
 1444 053e 44E3      		ldi r20,lo8(52)
 1445 0540 53E4      		ldi r21,lo8(67)
 1446 0542 6983      		std Y+1,r22
1316:main.c        **** 				break;
 1447               		.loc 1 1316 15 view .LVU329
 1448 0544 7A83      		std Y+2,r23
 1449 0546 8B83      		std Y+3,r24
 1450 0548 9C83      		std Y+4,r25
 1451 054a 6981      		ldd r22,Y+1
 1452 054c 7A81      		ldd r23,Y+2
 1453 054e 8B81      		ldd r24,Y+3
 1454 0550 9C81      		ldd r25,Y+4
 1455 0552 0E94 0000 		call __divsf3
 1456               	.LVL131:
 1457 0556 6983      		std Y+1,r22
 1458 0558 7A83      		std Y+2,r23
 1459 055a 8B83      		std Y+3,r24
 1460 055c 9C83      		std Y+4,r25
 1461 055e 6981      		ldd r22,Y+1
 1462 0560 7A81      		ldd r23,Y+2
 1463 0562 8B81      		ldd r24,Y+3
 1464 0564 9C81      		ldd r25,Y+4
 1465 0566 0E94 0000 		call sin
 1466               	.LVL132:
 1467 056a 00C0      		rjmp .L91
 1468               	.LVL133:
 1469               	.L67:
1320:main.c        **** 				break;
 1470               		.loc 1 1320 5 is_stmt 1 view .LVU330
1320:main.c        **** 				break;
 1471               		.loc 1 1320 15 is_stmt 0 view .LVU331
 1472 056c 2BED      		ldi r18,lo8(-37)
 1473 056e 3FE0      		ldi r19,lo8(15)
 1474 0570 49E4      		ldi r20,lo8(73)
 1475 0572 50E4      		ldi r21,lo8(64)
 1476               	.LVL134:
1320:main.c        **** 				break;
 1477               		.loc 1 1320 15 view .LVU332
 1478 0574 6981      		ldd r22,Y+1
 1479 0576 7A81      		ldd r23,Y+2
 1480 0578 8B81      		ldd r24,Y+3
 1481 057a 9C81      		ldd r25,Y+4
 1482 057c 0E94 0000 		call __mulsf3
 1483               	.LVL135:
1320:main.c        **** 				break;
 1484               		.loc 1 1320 15 view .LVU333
 1485 0580 20E0      		ldi r18,0
 1486 0582 30E0      		ldi r19,0
 1487 0584 44E3      		ldi r20,lo8(52)
 1488 0586 53E4      		ldi r21,lo8(67)
 1489 0588 6983      		std Y+1,r22
1320:main.c        **** 				break;
 1490               		.loc 1 1320 15 view .LVU334
 1491 058a 7A83      		std Y+2,r23
 1492 058c 8B83      		std Y+3,r24
 1493 058e 9C83      		std Y+4,r25
 1494 0590 6981      		ldd r22,Y+1
 1495 0592 7A81      		ldd r23,Y+2
 1496 0594 8B81      		ldd r24,Y+3
 1497 0596 9C81      		ldd r25,Y+4
 1498 0598 0E94 0000 		call __divsf3
 1499               	.LVL136:
 1500 059c 6983      		std Y+1,r22
 1501 059e 7A83      		std Y+2,r23
 1502 05a0 8B83      		std Y+3,r24
 1503 05a2 9C83      		std Y+4,r25
 1504 05a4 6981      		ldd r22,Y+1
 1505 05a6 7A81      		ldd r23,Y+2
 1506 05a8 8B81      		ldd r24,Y+3
 1507 05aa 9C81      		ldd r25,Y+4
 1508 05ac 0E94 0000 		call cos
 1509               	.LVL137:
 1510 05b0 00C0      		rjmp .L91
 1511               	.LVL138:
 1512               	.L66:
1324:main.c        **** 				break;
 1513               		.loc 1 1324 5 is_stmt 1 view .LVU335
1324:main.c        **** 				break;
 1514               		.loc 1 1324 15 is_stmt 0 view .LVU336
 1515 05b2 2BED      		ldi r18,lo8(-37)
 1516 05b4 3FE0      		ldi r19,lo8(15)
 1517 05b6 49E4      		ldi r20,lo8(73)
 1518 05b8 50E4      		ldi r21,lo8(64)
 1519               	.LVL139:
1324:main.c        **** 				break;
 1520               		.loc 1 1324 15 view .LVU337
 1521 05ba 6981      		ldd r22,Y+1
 1522 05bc 7A81      		ldd r23,Y+2
 1523 05be 8B81      		ldd r24,Y+3
 1524 05c0 9C81      		ldd r25,Y+4
 1525 05c2 0E94 0000 		call __mulsf3
 1526               	.LVL140:
1324:main.c        **** 				break;
 1527               		.loc 1 1324 15 view .LVU338
 1528 05c6 20E0      		ldi r18,0
 1529 05c8 30E0      		ldi r19,0
 1530 05ca 44E3      		ldi r20,lo8(52)
 1531 05cc 53E4      		ldi r21,lo8(67)
 1532 05ce 6983      		std Y+1,r22
1324:main.c        **** 				break;
 1533               		.loc 1 1324 15 view .LVU339
 1534 05d0 7A83      		std Y+2,r23
 1535 05d2 8B83      		std Y+3,r24
 1536 05d4 9C83      		std Y+4,r25
 1537 05d6 6981      		ldd r22,Y+1
 1538 05d8 7A81      		ldd r23,Y+2
 1539 05da 8B81      		ldd r24,Y+3
 1540 05dc 9C81      		ldd r25,Y+4
 1541 05de 0E94 0000 		call __divsf3
 1542               	.LVL141:
 1543 05e2 6983      		std Y+1,r22
 1544 05e4 7A83      		std Y+2,r23
 1545 05e6 8B83      		std Y+3,r24
 1546 05e8 9C83      		std Y+4,r25
 1547 05ea 6981      		ldd r22,Y+1
 1548 05ec 7A81      		ldd r23,Y+2
 1549 05ee 8B81      		ldd r24,Y+3
 1550 05f0 9C81      		ldd r25,Y+4
 1551 05f2 0E94 0000 		call tan
 1552               	.LVL142:
 1553 05f6 00C0      		rjmp .L91
 1554               	.LVL143:
 1555               	.L65:
1328:main.c        **** 				{
 1556               		.loc 1 1328 5 is_stmt 1 view .LVU340
 1557               	.LBB43:
 1558               	.LBI43:
1373:main.c        **** 
1374:main.c        **** static uint8_t asin_acos_range(float n)
 1559               		.loc 1 1374 16 view .LVU341
 1560               	.LBB44:
1375:main.c        **** {
1376:main.c        **** 	return n >= -1 && n <= 1;
 1561               		.loc 1 1376 2 view .LVU342
 1562               		.loc 1 1376 17 is_stmt 0 view .LVU343
 1563 05f8 20E0      		ldi r18,0
 1564 05fa 30E0      		ldi r19,0
 1565 05fc 40E8      		ldi r20,lo8(-128)
 1566 05fe 5FEB      		ldi r21,lo8(-65)
 1567               	.LVL144:
 1568               		.loc 1 1376 17 view .LVU344
 1569 0600 6981      		ldd r22,Y+1
 1570 0602 7A81      		ldd r23,Y+2
 1571 0604 8B81      		ldd r24,Y+3
 1572 0606 9C81      		ldd r25,Y+4
 1573 0608 0E94 0000 		call __gesf2
 1574               	.LVL145:
 1575               		.loc 1 1376 17 view .LVU345
 1576 060c 87FD      		sbrc r24,7
 1577 060e 00C0      		rjmp .L90
 1578 0610 20E0      		ldi r18,0
 1579 0612 30E0      		ldi r19,0
 1580 0614 40E8      		ldi r20,lo8(-128)
 1581 0616 5FE3      		ldi r21,lo8(63)
 1582 0618 6981      		ldd r22,Y+1
 1583 061a 7A81      		ldd r23,Y+2
 1584 061c 8B81      		ldd r24,Y+3
 1585 061e 9C81      		ldd r25,Y+4
 1586 0620 0E94 0000 		call __lesf2
 1587               	.LVL146:
 1588 0624 1816      		cp __zero_reg__,r24
 1589 0626 04F0      		brlt .+2
 1590 0628 00C0      		rjmp .L73
 1591               	.LVL147:
 1592               	.L90:
 1593               		.loc 1 1376 17 view .LVU346
 1594               	.LBE44:
 1595               	.LBE43:
1305:main.c        **** 				}
 1596               		.loc 1 1305 13 view .LVU347
 1597 062a 82E0      		ldi r24,lo8(2)
 1598 062c 00C0      		rjmp .L48
 1599               	.LVL148:
 1600               	.L64:
1336:main.c        **** 				{
 1601               		.loc 1 1336 5 is_stmt 1 view .LVU348
 1602               	.LBB45:
 1603               	.LBI45:
1374:main.c        **** {
 1604               		.loc 1 1374 16 view .LVU349
 1605               	.LBB46:
 1606               		.loc 1 1376 2 view .LVU350
 1607               		.loc 1 1376 17 is_stmt 0 view .LVU351
 1608 062e 20E0      		ldi r18,0
 1609 0630 30E0      		ldi r19,0
 1610 0632 40E8      		ldi r20,lo8(-128)
 1611 0634 5FEB      		ldi r21,lo8(-65)
 1612               	.LVL149:
 1613               		.loc 1 1376 17 view .LVU352
 1614 0636 6981      		ldd r22,Y+1
 1615 0638 7A81      		ldd r23,Y+2
 1616 063a 8B81      		ldd r24,Y+3
 1617 063c 9C81      		ldd r25,Y+4
 1618 063e 0E94 0000 		call __gesf2
 1619               	.LVL150:
 1620               		.loc 1 1376 17 view .LVU353
 1621 0642 87FD      		sbrc r24,7
 1622 0644 00C0      		rjmp .L90
 1623 0646 20E0      		ldi r18,0
 1624 0648 30E0      		ldi r19,0
 1625 064a 40E8      		ldi r20,lo8(-128)
 1626 064c 5FE3      		ldi r21,lo8(63)
 1627 064e 6981      		ldd r22,Y+1
 1628 0650 7A81      		ldd r23,Y+2
 1629 0652 8B81      		ldd r24,Y+3
 1630 0654 9C81      		ldd r25,Y+4
 1631 0656 0E94 0000 		call __lesf2
 1632               	.LVL151:
 1633 065a 1816      		cp __zero_reg__,r24
 1634 065c 04F0      		brlt .L90
 1635               	.LVL152:
 1636               		.loc 1 1376 17 view .LVU354
 1637               	.LBE46:
 1638               	.LBE45:
1340:main.c        **** 				break;
 1639               		.loc 1 1340 5 is_stmt 1 view .LVU355
1340:main.c        **** 				break;
 1640               		.loc 1 1340 15 is_stmt 0 view .LVU356
 1641 065e 6981      		ldd r22,Y+1
 1642 0660 7A81      		ldd r23,Y+2
 1643 0662 8B81      		ldd r24,Y+3
 1644 0664 9C81      		ldd r25,Y+4
 1645 0666 0E94 0000 		call acos
 1646               	.LVL153:
 1647 066a 00C0      		rjmp .L92
 1648               	.LVL154:
 1649               	.L63:
1344:main.c        **** 				break;
 1650               		.loc 1 1344 5 is_stmt 1 view .LVU357
1344:main.c        **** 				break;
 1651               		.loc 1 1344 15 is_stmt 0 view .LVU358
 1652 066c 6981      		ldd r22,Y+1
 1653 066e 7A81      		ldd r23,Y+2
 1654 0670 8B81      		ldd r24,Y+3
 1655 0672 9C81      		ldd r25,Y+4
 1656 0674 0E94 0000 		call atan
 1657               	.LVL155:
 1658               	.L92:
1340:main.c        **** 				break;
 1659               		.loc 1 1340 13 view .LVU359
 1660 0678 20EE      		ldi r18,lo8(-32)
 1661 067a 3EE2      		ldi r19,lo8(46)
 1662 067c 45E6      		ldi r20,lo8(101)
 1663 067e 52E4      		ldi r21,lo8(66)
 1664 0680 6983      		std Y+1,r22
1340:main.c        **** 				break;
 1665               		.loc 1 1340 13 view .LVU360
 1666 0682 7A83      		std Y+2,r23
 1667 0684 8B83      		std Y+3,r24
 1668 0686 9C83      		std Y+4,r25
 1669 0688 6981      		ldd r22,Y+1
 1670 068a 7A81      		ldd r23,Y+2
 1671 068c 8B81      		ldd r24,Y+3
 1672 068e 9C81      		ldd r25,Y+4
 1673 0690 00C0      		rjmp .L93
 1674               	.LVL156:
 1675               	.L57:
1348:main.c        **** 				break;
 1676               		.loc 1 1348 5 is_stmt 1 view .LVU361
1348:main.c        **** 				break;
 1677               		.loc 1 1348 15 is_stmt 0 view .LVU362
 1678 0692 2D81      		ldd r18,Y+5
 1679 0694 3E81      		ldd r19,Y+6
 1680 0696 4F81      		ldd r20,Y+7
 1681 0698 5885      		ldd r21,Y+8
 1682               	.LVL157:
1348:main.c        **** 				break;
 1683               		.loc 1 1348 15 view .LVU363
 1684 069a 6981      		ldd r22,Y+1
 1685 069c 7A81      		ldd r23,Y+2
 1686 069e 8B81      		ldd r24,Y+3
 1687 06a0 9C81      		ldd r25,Y+4
 1688 06a2 0E94 0000 		call pow
 1689               	.LVL158:
1348:main.c        **** 				break;
 1690               		.loc 1 1348 15 view .LVU364
 1691 06a6 00C0      		rjmp .L91
 1692               	.L84:
1245:main.c        **** 			}
 1693               		.loc 1 1245 12 view .LVU365
 1694 06a8 83E0      		ldi r24,lo8(3)
 1695 06aa 00C0      		rjmp .L48
 1696               	.LVL159:
 1697               	.L85:
1268:main.c        **** 				}
 1698               		.loc 1 1268 13 view .LVU366
 1699 06ac 81E0      		ldi r24,lo8(1)
 1700 06ae 00C0      		rjmp .L48
 1701               	.LVL160:
 1702               	.L73:
1332:main.c        **** 				break;
 1703               		.loc 1 1332 5 is_stmt 1 view .LVU367
1332:main.c        **** 				break;
 1704               		.loc 1 1332 15 is_stmt 0 view .LVU368
 1705 06b0 6981      		ldd r22,Y+1
 1706 06b2 7A81      		ldd r23,Y+2
 1707 06b4 8B81      		ldd r24,Y+3
 1708 06b6 9C81      		ldd r25,Y+4
 1709 06b8 0E94 0000 		call asin
 1710               	.LVL161:
 1711 06bc 00C0      		rjmp .L92
 1712               		.cfi_endproc
 1713               	.LFE48:
 1716               	mode_table_update:
 1717               	.LFB42:
 841:main.c        **** 	float x, y;
 1718               		.loc 1 841 1 is_stmt 1 view -0
 1719               		.cfi_startproc
 1720 06be CF92      		push r12
 1721               	.LCFI28:
 1722               		.cfi_def_cfa_offset 3
 1723               		.cfi_offset 12, -2
 1724 06c0 DF92      		push r13
 1725               	.LCFI29:
 1726               		.cfi_def_cfa_offset 4
 1727               		.cfi_offset 13, -3
 1728 06c2 EF92      		push r14
 1729               	.LCFI30:
 1730               		.cfi_def_cfa_offset 5
 1731               		.cfi_offset 14, -4
 1732 06c4 FF92      		push r15
 1733               	.LCFI31:
 1734               		.cfi_def_cfa_offset 6
 1735               		.cfi_offset 15, -5
 1736 06c6 0F93      		push r16
 1737               	.LCFI32:
 1738               		.cfi_def_cfa_offset 7
 1739               		.cfi_offset 16, -6
 1740 06c8 1F93      		push r17
 1741               	.LCFI33:
 1742               		.cfi_def_cfa_offset 8
 1743               		.cfi_offset 17, -7
 1744 06ca CF93      		push r28
 1745               	.LCFI34:
 1746               		.cfi_def_cfa_offset 9
 1747               		.cfi_offset 28, -8
 1748 06cc DF93      		push r29
 1749               	.LCFI35:
 1750               		.cfi_def_cfa_offset 10
 1751               		.cfi_offset 29, -9
 1752 06ce CDB7      		in r28,__SP_L__
 1753 06d0 DEB7      		in r29,__SP_H__
 1754               	.LCFI36:
 1755               		.cfi_def_cfa_register 28
 1756 06d2 2897      		sbiw r28,8
 1757               	.LCFI37:
 1758               		.cfi_def_cfa_offset 18
 1759 06d4 0FB6      		in __tmp_reg__,__SREG__
 1760 06d6 F894      		cli
 1761 06d8 DEBF      		out __SP_H__,r29
 1762 06da 0FBE      		out __SREG__,__tmp_reg__
 1763 06dc CDBF      		out __SP_L__,r28
 1764               	/* prologue: function */
 1765               	/* frame size = 8 */
 1766               	/* stack size = 16 */
 1767               	.L__stack_usage = 16
 842:main.c        **** 	x = tbl_start + tbl_pos * tbl_step;
 1768               		.loc 1 842 2 view .LVU370
 843:main.c        **** 	y = 0;
 1769               		.loc 1 843 2 view .LVU371
 843:main.c        **** 	y = 0;
 1770               		.loc 1 843 26 is_stmt 0 view .LVU372
 1771 06de 2091 0000 		lds r18,tbl_step
 1772 06e2 3091 0000 		lds r19,tbl_step+1
 1773 06e6 4091 0000 		lds r20,tbl_step+2
 1774 06ea 5091 0000 		lds r21,tbl_step+3
 1775 06ee 6091 0000 		lds r22,tbl_pos
 1776 06f2 7091 0000 		lds r23,tbl_pos+1
 1777 06f6 8091 0000 		lds r24,tbl_pos+2
 1778 06fa 9091 0000 		lds r25,tbl_pos+3
 1779 06fe 0E94 0000 		call __mulsf3
 1780               	.LVL162:
 843:main.c        **** 	y = 0;
 1781               		.loc 1 843 4 view .LVU373
 1782 0702 2091 0000 		lds r18,tbl_start
 1783 0706 3091 0000 		lds r19,tbl_start+1
 1784 070a 4091 0000 		lds r20,tbl_start+2
 1785 070e 5091 0000 		lds r21,tbl_start+3
 1786 0712 6D83      		std Y+5,r22
 1787 0714 7E83      		std Y+6,r23
 1788 0716 8F83      		std Y+7,r24
 1789 0718 9887      		std Y+8,r25
 1790 071a 6D81      		ldd r22,Y+5
 1791 071c 7E81      		ldd r23,Y+6
 1792 071e 8F81      		ldd r24,Y+7
 1793 0720 9885      		ldd r25,Y+8
 1794 0722 0E94 0000 		call __addsf3
 1795               	.LVL163:
 1796 0726 6B01      		movw r12,r22
 1797 0728 7C01      		movw r14,r24
 1798               	.LVL164:
 844:main.c        **** 
 1799               		.loc 1 844 2 is_stmt 1 view .LVU374
 844:main.c        **** 
 1800               		.loc 1 844 4 is_stmt 0 view .LVU375
 1801 072a 1982      		std Y+1,__zero_reg__
 1802 072c 1A82      		std Y+2,__zero_reg__
 1803 072e 1B82      		std Y+3,__zero_reg__
 1804 0730 1C82      		std Y+4,__zero_reg__
 847:main.c        **** 	lcd_string(FORMAT_NUMBER(x, _buf_conv, 14));
 1805               		.loc 1 847 2 is_stmt 1 view .LVU376
 1806 0732 82E8      		ldi r24,lo8(-126)
 1807 0734 0E94 0000 		call lcd_command
 1808               	.LVL165:
 848:main.c        **** 
 1809               		.loc 1 848 2 view .LVU377
 848:main.c        **** 
 1810               		.loc 1 848 13 is_stmt 0 view .LVU378
 1811 0738 00E0      		ldi r16,lo8(_buf_conv)
 1812 073a 10E0      		ldi r17,hi8(_buf_conv)
 1813 073c 24E0      		ldi r18,lo8(4)
 1814 073e 4EE0      		ldi r20,lo8(14)
 1815 0740 CD82      		std Y+5,r12
 1816 0742 DE82      		std Y+6,r13
 1817 0744 EF82      		std Y+7,r14
 1818 0746 F886      		std Y+8,r15
 1819 0748 6D81      		ldd r22,Y+5
 1820 074a 7E81      		ldd r23,Y+6
 1821 074c 8F81      		ldd r24,Y+7
 1822 074e 9885      		ldd r25,Y+8
 1823 0750 0E94 0000 		call dtostrf
 1824               	.LVL166:
 848:main.c        **** 
 1825               		.loc 1 848 2 view .LVU379
 1826 0754 0E94 0000 		call lcd_string
 1827               	.LVL167:
 850:main.c        **** 	{
 1828               		.loc 1 850 2 is_stmt 1 view .LVU380
 850:main.c        **** 	{
 1829               		.loc 1 850 5 is_stmt 0 view .LVU381
 1830 0758 AE01      		movw r20,r28
 1831 075a 4F5F      		subi r20,-1
 1832 075c 5F4F      		sbci r21,-1
 1833 075e CD82      		std Y+5,r12
 1834 0760 DE82      		std Y+6,r13
 1835 0762 EF82      		std Y+7,r14
 1836 0764 F886      		std Y+8,r15
 1837 0766 6D81      		ldd r22,Y+5
 1838 0768 7E81      		ldd r23,Y+6
 1839 076a 8F81      		ldd r24,Y+7
 1840 076c 9885      		ldd r25,Y+8
 1841 076e 0E94 0000 		call calc_solve
 1842               	.LVL168:
 850:main.c        **** 	{
 1843               		.loc 1 850 4 view .LVU382
 1844 0772 8823      		tst r24
 1845 0774 01F0      		breq .L95
 1846               	.LBB47:
 856:main.c        **** 		lcd_cursor(2, 1);
 1847               		.loc 1 856 3 is_stmt 1 view .LVU383
 857:main.c        **** 		for(i = 2; i < LCD_WIDTH - MSG_ERROR_LEN; ++i)
 1848               		.loc 1 857 3 view .LVU384
 1849 0776 82EC      		ldi r24,lo8(-62)
 1850 0778 0E94 0000 		call lcd_command
 1851               	.LVL169:
 858:main.c        **** 		{
 1852               		.loc 1 858 3 view .LVU385
 858:main.c        **** 		{
 1853               		.loc 1 858 14 view .LVU386
 857:main.c        **** 		for(i = 2; i < LCD_WIDTH - MSG_ERROR_LEN; ++i)
 1854               		.loc 1 857 3 is_stmt 0 view .LVU387
 1855 077c 19E0      		ldi r17,lo8(9)
 1856               	.LVL170:
 1857               	.L96:
 860:main.c        **** 		}
 1858               		.loc 1 860 4 is_stmt 1 discriminator 3 view .LVU388
 1859 077e 80E2      		ldi r24,lo8(32)
 1860 0780 0E94 0000 		call lcd_data
 1861               	.LVL171:
 858:main.c        **** 		{
 1862               		.loc 1 858 45 discriminator 3 view .LVU389
 858:main.c        **** 		{
 1863               		.loc 1 858 14 discriminator 3 view .LVU390
 858:main.c        **** 		{
 1864               		.loc 1 858 3 is_stmt 0 discriminator 3 view .LVU391
 1865 0784 1150      		subi r17,lo8(-(-1))
 1866               	.LVL172:
 858:main.c        **** 		{
 1867               		.loc 1 858 3 discriminator 3 view .LVU392
 1868 0786 01F4      		brne .L96
 863:main.c        **** 	}
 1869               		.loc 1 863 3 is_stmt 1 view .LVU393
 1870 0788 80E0      		ldi r24,lo8(_str_error)
 1871 078a 90E0      		ldi r25,hi8(_str_error)
 1872 078c 0E94 0000 		call lcd_string_P
 1873               	.LVL173:
 1874               	.L94:
 1875               	/* epilogue start */
 863:main.c        **** 	}
 1876               		.loc 1 863 3 is_stmt 0 view .LVU394
 1877               	.LBE47:
 871:main.c        **** 
 1878               		.loc 1 871 1 view .LVU395
 1879 0790 2896      		adiw r28,8
 1880 0792 0FB6      		in __tmp_reg__,__SREG__
 1881 0794 F894      		cli
 1882 0796 DEBF      		out __SP_H__,r29
 1883 0798 0FBE      		out __SREG__,__tmp_reg__
 1884 079a CDBF      		out __SP_L__,r28
 1885 079c DF91      		pop r29
 1886 079e CF91      		pop r28
 1887 07a0 1F91      		pop r17
 1888 07a2 0F91      		pop r16
 1889 07a4 FF90      		pop r15
 1890               	.LVL174:
 871:main.c        **** 
 1891               		.loc 1 871 1 view .LVU396
 1892 07a6 EF90      		pop r14
 1893               	.LVL175:
 871:main.c        **** 
 1894               		.loc 1 871 1 view .LVU397
 1895 07a8 DF90      		pop r13
 1896               	.LVL176:
 871:main.c        **** 
 1897               		.loc 1 871 1 view .LVU398
 1898 07aa CF90      		pop r12
 1899               	.LVL177:
 871:main.c        **** 
 1900               		.loc 1 871 1 view .LVU399
 1901 07ac 0895      		ret
 1902               	.LVL178:
 1903               	.L95:
 868:main.c        **** 		lcd_string(FORMAT_NUMBER(y, _buf_conv, 14));
 1904               		.loc 1 868 3 is_stmt 1 view .LVU400
 1905 07ae 82EC      		ldi r24,lo8(-62)
 1906 07b0 0E94 0000 		call lcd_command
 1907               	.LVL179:
 869:main.c        **** 	}
 1908               		.loc 1 869 3 view .LVU401
 869:main.c        **** 	}
 1909               		.loc 1 869 14 is_stmt 0 view .LVU402
 1910 07b4 8981      		ldd r24,Y+1
 1911 07b6 9A81      		ldd r25,Y+2
 1912 07b8 AB81      		ldd r26,Y+3
 1913 07ba BC81      		ldd r27,Y+4
 1914 07bc 00E0      		ldi r16,lo8(_buf_conv)
 1915 07be 10E0      		ldi r17,hi8(_buf_conv)
 1916 07c0 24E0      		ldi r18,lo8(4)
 1917 07c2 4EE0      		ldi r20,lo8(14)
 1918 07c4 BC01      		movw r22,r24
 1919 07c6 CD01      		movw r24,r26
 1920 07c8 0E94 0000 		call dtostrf
 1921               	.LVL180:
 869:main.c        **** 	}
 1922               		.loc 1 869 3 view .LVU403
 1923 07cc 0E94 0000 		call lcd_string
 1924               	.LVL181:
 871:main.c        **** 
 1925               		.loc 1 871 1 view .LVU404
 1926 07d0 00C0      		rjmp .L94
 1927               		.cfi_endproc
 1928               	.LFE42:
 1931               	mode_table_event:
 1932               	.LVL182:
 1933               	.LFB41:
 798:main.c        **** 	switch(UNSHIFT(key))
 1934               		.loc 1 798 1 is_stmt 1 view -0
 1935               		.cfi_startproc
 1936               	/* prologue: function */
 1937               	/* frame size = 0 */
 1938               	/* stack size = 0 */
 1939               	.L__stack_usage = 0
 799:main.c        **** 	{
 1940               		.loc 1 799 2 view .LVU406
 799:main.c        **** 	{
 1941               		.loc 1 799 9 is_stmt 0 view .LVU407
 1942 07d2 90E0      		ldi r25,0
 1943 07d4 8F7E      		andi r24,239
 1944               	.LVL183:
 799:main.c        **** 	{
 1945               		.loc 1 799 2 view .LVU408
 1946 07d6 8B30      		cpi r24,11
 1947 07d8 9105      		cpc r25,__zero_reg__
 1948 07da 01F0      		breq .L100
 1949 07dc 04F4      		brge .L101
 1950 07de 8930      		cpi r24,9
 1951 07e0 9105      		cpc r25,__zero_reg__
 1952 07e2 01F0      		breq .L102
 1953 07e4 8A30      		cpi r24,10
 1954 07e6 9105      		cpc r25,__zero_reg__
 1955 07e8 01F0      		breq .L103
 825:main.c        **** 		mode_table_update();
 1956               		.loc 1 825 3 view .LVU409
 1957 07ea 20E0      		ldi r18,0
 1958 07ec 30E0      		ldi r19,0
 1959 07ee 40E8      		ldi r20,lo8(-128)
 1960 07f0 5FE3      		ldi r21,lo8(63)
 799:main.c        **** 	{
 1961               		.loc 1 799 2 view .LVU410
 1962 07f2 0697      		sbiw r24,6
 1963 07f4 01F0      		breq .L109
 1964 07f6 0895      		ret
 1965               	.L101:
 1966 07f8 8E30      		cpi r24,14
 1967 07fa 9105      		cpc r25,__zero_reg__
 1968 07fc 01F0      		breq .L106
 1969 07fe 0F97      		sbiw r24,15
 1970 0800 01F4      		brne .L99
 802:main.c        **** 		break;
 1971               		.loc 1 802 3 is_stmt 1 view .LVU411
 1972 0802 0C94 0000 		jmp mode_input
 1973               	.LVL184:
 1974               	.L100:
 807:main.c        **** 		mode_table_update();
 1975               		.loc 1 807 3 view .LVU412
 807:main.c        **** 		mode_table_update();
 1976               		.loc 1 807 11 is_stmt 0 view .LVU413
 1977 0806 20E0      		ldi r18,0
 1978 0808 30E0      		ldi r19,0
 1979 080a 40E2      		ldi r20,lo8(32)
 1980 080c 51E4      		ldi r21,lo8(65)
 1981               	.L110:
 813:main.c        **** 		mode_table_update();
 1982               		.loc 1 813 3 view .LVU414
 1983 080e 6091 0000 		lds r22,tbl_pos
 1984 0812 7091 0000 		lds r23,tbl_pos+1
 1985 0816 8091 0000 		lds r24,tbl_pos+2
 1986 081a 9091 0000 		lds r25,tbl_pos+3
 1987 081e 0E94 0000 		call __subsf3
 1988               	.LVL185:
 1989               	.L107:
 831:main.c        **** 		mode_table_update();
 1990               		.loc 1 831 11 view .LVU415
 1991 0822 6093 0000 		sts tbl_pos,r22
 1992 0826 7093 0000 		sts tbl_pos+1,r23
 1993 082a 8093 0000 		sts tbl_pos+2,r24
 1994 082e 9093 0000 		sts tbl_pos+3,r25
 1995 0832 00C0      		rjmp .L108
 1996               	.L106:
 813:main.c        **** 		mode_table_update();
 1997               		.loc 1 813 3 is_stmt 1 view .LVU416
 1998 0834 20E0      		ldi r18,0
 1999 0836 30E0      		ldi r19,0
 2000 0838 40E8      		ldi r20,lo8(-128)
 2001 083a 5FE3      		ldi r21,lo8(63)
 2002 083c 00C0      		rjmp .L110
 2003               	.L103:
 819:main.c        **** 		mode_table_update();
 2004               		.loc 1 819 3 view .LVU417
 819:main.c        **** 		mode_table_update();
 2005               		.loc 1 819 11 is_stmt 0 view .LVU418
 2006 083e 1092 0000 		sts tbl_pos,__zero_reg__
 2007 0842 1092 0000 		sts tbl_pos+1,__zero_reg__
 2008 0846 1092 0000 		sts tbl_pos+2,__zero_reg__
 2009 084a 1092 0000 		sts tbl_pos+3,__zero_reg__
 820:main.c        **** 		break;
 2010               		.loc 1 820 3 is_stmt 1 view .LVU419
 2011               	.L108:
 832:main.c        **** 		break;
 2012               		.loc 1 832 3 view .LVU420
 2013 084e 0C94 0000 		jmp mode_table_update
 2014               	.LVL186:
 2015               	.L102:
 831:main.c        **** 		mode_table_update();
 2016               		.loc 1 831 3 view .LVU421
 831:main.c        **** 		mode_table_update();
 2017               		.loc 1 831 11 is_stmt 0 view .LVU422
 2018 0852 20E0      		ldi r18,0
 2019 0854 30E0      		ldi r19,0
 2020 0856 40E2      		ldi r20,lo8(32)
 2021 0858 51E4      		ldi r21,lo8(65)
 2022               	.L109:
 2023 085a 6091 0000 		lds r22,tbl_pos
 2024 085e 7091 0000 		lds r23,tbl_pos+1
 2025 0862 8091 0000 		lds r24,tbl_pos+2
 2026 0866 9091 0000 		lds r25,tbl_pos+3
 2027 086a 0E94 0000 		call __addsf3
 2028               	.LVL187:
 2029 086e 00C0      		rjmp .L107
 2030               	.L99:
 2031               	/* epilogue start */
 838:main.c        **** 
 2032               		.loc 1 838 1 view .LVU423
 2033 0870 0895      		ret
 2034               		.cfi_endproc
 2035               	.LFE41:
 2038               	field_ins_chr:
 2039               	.LVL188:
 2040               	.LFB25:
 342:main.c        **** 	if(f->len + 1 < f->max)
 2041               		.loc 1 342 1 is_stmt 1 view -0
 2042               		.cfi_startproc
 342:main.c        **** 	if(f->len + 1 < f->max)
 2043               		.loc 1 342 1 is_stmt 0 view .LVU425
 2044 0872 1F93      		push r17
 2045               	.LCFI38:
 2046               		.cfi_def_cfa_offset 3
 2047               		.cfi_offset 17, -2
 2048 0874 CF93      		push r28
 2049               	.LCFI39:
 2050               		.cfi_def_cfa_offset 4
 2051               		.cfi_offset 28, -3
 2052 0876 DF93      		push r29
 2053               	.LCFI40:
 2054               		.cfi_def_cfa_offset 5
 2055               		.cfi_offset 29, -4
 2056               	/* prologue: function */
 2057               	/* frame size = 0 */
 2058               	/* stack size = 3 */
 2059               	.L__stack_usage = 3
 2060 0878 EC01      		movw r28,r24
 2061 087a 162F      		mov r17,r22
 343:main.c        **** 	{
 2062               		.loc 1 343 2 is_stmt 1 view .LVU426
 343:main.c        **** 	{
 2063               		.loc 1 343 12 is_stmt 0 view .LVU427
 2064 087c 8F81      		ldd r24,Y+7
 2065 087e 9885      		ldd r25,Y+8
 2066               	.LVL189:
 343:main.c        **** 	{
 2067               		.loc 1 343 12 view .LVU428
 2068 0880 0196      		adiw r24,1
 343:main.c        **** 	{
 2069               		.loc 1 343 4 view .LVU429
 2070 0882 2985      		ldd r18,Y+9
 2071 0884 3A85      		ldd r19,Y+10
 2072 0886 8217      		cp r24,r18
 2073 0888 9307      		cpc r25,r19
 2074 088a 04F4      		brge .L111
 2075               	.LVL190:
 2076               	.LBB50:
 2077               	.LBI50:
 341:main.c        **** {
 2078               		.loc 1 341 13 is_stmt 1 view .LVU430
 2079               	.LBB51:
 345:main.c        **** 		f->buf [f->pos++] = c;
 2080               		.loc 1 345 3 view .LVU431
 2081 088c 61E0      		ldi r22,lo8(1)
 2082               	.LVL191:
 345:main.c        **** 		f->buf [f->pos++] = c;
 2083               		.loc 1 345 3 is_stmt 0 view .LVU432
 2084 088e CE01      		movw r24,r28
 2085 0890 0E94 0000 		call field_grow
 2086               	.LVL192:
 346:main.c        **** 		field_update(f);
 2087               		.loc 1 346 3 is_stmt 1 view .LVU433
 346:main.c        **** 		field_update(f);
 2088               		.loc 1 346 4 is_stmt 0 view .LVU434
 2089 0894 EB81      		ldd r30,Y+3
 2090 0896 FC81      		ldd r31,Y+4
 346:main.c        **** 		field_update(f);
 2091               		.loc 1 346 12 view .LVU435
 2092 0898 8D81      		ldd r24,Y+5
 2093 089a 9E81      		ldd r25,Y+6
 346:main.c        **** 		field_update(f);
 2094               		.loc 1 346 17 view .LVU436
 2095 089c 9C01      		movw r18,r24
 2096 089e 2F5F      		subi r18,-1
 2097 08a0 3F4F      		sbci r19,-1
 2098 08a2 3E83      		std Y+6,r19
 2099 08a4 2D83      		std Y+5,r18
 346:main.c        **** 		field_update(f);
 2100               		.loc 1 346 21 view .LVU437
 2101 08a6 E80F      		add r30,r24
 2102 08a8 F91F      		adc r31,r25
 2103 08aa 1083      		st Z,r17
 347:main.c        **** 	}
 2104               		.loc 1 347 3 is_stmt 1 view .LVU438
 2105 08ac CE01      		movw r24,r28
 2106               	/* epilogue start */
 2107               	.LBE51:
 2108               	.LBE50:
 349:main.c        **** 
 2109               		.loc 1 349 1 is_stmt 0 view .LVU439
 2110 08ae DF91      		pop r29
 2111 08b0 CF91      		pop r28
 2112               	.LVL193:
 349:main.c        **** 
 2113               		.loc 1 349 1 view .LVU440
 2114 08b2 1F91      		pop r17
 2115               	.LVL194:
 2116               	.LBB53:
 2117               	.LBB52:
 347:main.c        **** 	}
 2118               		.loc 1 347 3 view .LVU441
 2119 08b4 0C94 0000 		jmp field_update
 2120               	.LVL195:
 2121               	.L111:
 2122               	/* epilogue start */
 347:main.c        **** 	}
 2123               		.loc 1 347 3 view .LVU442
 2124               	.LBE52:
 2125               	.LBE53:
 349:main.c        **** 
 2126               		.loc 1 349 1 view .LVU443
 2127 08b8 DF91      		pop r29
 2128 08ba CF91      		pop r28
 2129               	.LVL196:
 349:main.c        **** 
 2130               		.loc 1 349 1 view .LVU444
 2131 08bc 1F91      		pop r17
 2132               	.LVL197:
 349:main.c        **** 
 2133               		.loc 1 349 1 view .LVU445
 2134 08be 0895      		ret
 2135               		.cfi_endproc
 2136               	.LFE25:
 2139               	field_ins_str_P.constprop.0:
 2140               	.LVL198:
 2141               	.LFB55:
 351:main.c        **** {
 2142               		.loc 1 351 13 is_stmt 1 view -0
 2143               		.cfi_startproc
 351:main.c        **** {
 2144               		.loc 1 351 13 is_stmt 0 view .LVU447
 2145 08c0 1F93      		push r17
 2146               	.LCFI41:
 2147               		.cfi_def_cfa_offset 3
 2148               		.cfi_offset 17, -2
 2149 08c2 CF93      		push r28
 2150               	.LCFI42:
 2151               		.cfi_def_cfa_offset 4
 2152               		.cfi_offset 28, -3
 2153 08c4 DF93      		push r29
 2154               	.LCFI43:
 2155               		.cfi_def_cfa_offset 5
 2156               		.cfi_offset 29, -4
 2157               	/* prologue: function */
 2158               	/* frame size = 0 */
 2159               	/* stack size = 3 */
 2160               	.L__stack_usage = 3
 2161 08c6 182F      		mov r17,r24
 2162 08c8 D92F      		mov r29,r25
 2163 08ca C62F      		mov r28,r22
 2164               	.LVL199:
 353:main.c        **** 	{
 2165               		.loc 1 353 2 is_stmt 1 view .LVU448
 353:main.c        **** 	{
 2166               		.loc 1 353 12 is_stmt 0 view .LVU449
 2167 08cc 2091 0000 		lds r18,fld_term+7
 2168 08d0 3091 0000 		lds r19,fld_term+7+1
 2169 08d4 260F      		add r18,r22
 2170 08d6 311D      		adc r19,__zero_reg__
 353:main.c        **** 	{
 2171               		.loc 1 353 16 view .LVU450
 2172 08d8 2F5F      		subi r18,-1
 2173 08da 3F4F      		sbci r19,-1
 353:main.c        **** 	{
 2174               		.loc 1 353 4 view .LVU451
 2175 08dc 8091 0000 		lds r24,fld_term+9
 2176 08e0 9091 0000 		lds r25,fld_term+9+1
 2177               	.LVL200:
 353:main.c        **** 	{
 2178               		.loc 1 353 4 view .LVU452
 2179 08e4 2817      		cp r18,r24
 2180 08e6 3907      		cpc r19,r25
 2181 08e8 04F4      		brge .L113
 2182               	.LVL201:
 2183               	.LBB57:
 2184               	.LBI57:
 351:main.c        **** {
 2185               		.loc 1 351 13 is_stmt 1 view .LVU453
 2186               	.LBB58:
 355:main.c        **** 		while(n--)
 2187               		.loc 1 355 3 view .LVU454
 2188 08ea 61E0      		ldi r22,lo8(1)
 2189               	.LVL202:
 355:main.c        **** 		while(n--)
 2190               		.loc 1 355 3 is_stmt 0 view .LVU455
 2191 08ec 6C0F      		add r22,r28
 2192 08ee 80E0      		ldi r24,lo8(fld_term)
 2193 08f0 90E0      		ldi r25,hi8(fld_term)
 2194 08f2 0E94 0000 		call field_grow
 2195               	.LVL203:
 356:main.c        **** 		{
 2196               		.loc 1 356 3 is_stmt 1 view .LVU456
 2197 08f6 E12F      		mov r30,r17
 2198 08f8 FD2F      		mov r31,r29
 2199               	.LVL204:
 2200               	.L115:
 356:main.c        **** 		{
 2201               		.loc 1 356 8 view .LVU457
 356:main.c        **** 		{
 2202               		.loc 1 356 10 is_stmt 0 view .LVU458
 2203 08fa C150      		subi r28,lo8(-(-1))
 2204               	.LVL205:
 358:main.c        **** 		}
 2205               		.loc 1 358 12 view .LVU459
 2206 08fc 2091 0000 		lds r18,fld_term+5
 2207 0900 3091 0000 		lds r19,fld_term+5+1
 358:main.c        **** 		}
 2208               		.loc 1 358 17 view .LVU460
 2209 0904 C901      		movw r24,r18
 2210 0906 0196      		adiw r24,1
 358:main.c        **** 		}
 2211               		.loc 1 358 10 view .LVU461
 2212 0908 A091 0000 		lds r26,fld_term+3
 2213 090c B091 0000 		lds r27,fld_term+3+1
 2214 0910 A20F      		add r26,r18
 2215 0912 B31F      		adc r27,r19
 356:main.c        **** 		{
 2216               		.loc 1 356 8 view .LVU462
 2217 0914 CF3F      		cpi r28,lo8(-1)
 2218 0916 01F4      		brne .L116
 361:main.c        **** 		field_update(f);
 2219               		.loc 1 361 3 is_stmt 1 view .LVU463
 361:main.c        **** 		field_update(f);
 2220               		.loc 1 361 16 is_stmt 0 view .LVU464
 2221 0918 9093 0000 		sts fld_term+5+1,r25
 2222 091c 8093 0000 		sts fld_term+5,r24
 361:main.c        **** 		field_update(f);
 2223               		.loc 1 361 20 view .LVU465
 2224 0920 88E2      		ldi r24,lo8(40)
 2225 0922 8C93      		st X,r24
 362:main.c        **** 	}
 2226               		.loc 1 362 3 is_stmt 1 view .LVU466
 2227 0924 80E0      		ldi r24,lo8(fld_term)
 2228 0926 90E0      		ldi r25,hi8(fld_term)
 2229               	/* epilogue start */
 2230               	.LBE58:
 2231               	.LBE57:
 364:main.c        **** 
 2232               		.loc 1 364 1 is_stmt 0 view .LVU467
 2233 0928 DF91      		pop r29
 2234 092a CF91      		pop r28
 2235               	.LVL206:
 364:main.c        **** 
 2236               		.loc 1 364 1 view .LVU468
 2237 092c 1F91      		pop r17
 2238               	.LBB61:
 2239               	.LBB60:
 362:main.c        **** 	}
 2240               		.loc 1 362 3 view .LVU469
 2241 092e 0C94 0000 		jmp field_update
 2242               	.LVL207:
 2243               	.L116:
 358:main.c        **** 		}
 2244               		.loc 1 358 4 is_stmt 1 view .LVU470
 2245               	.LBB59:
 358:main.c        **** 		}
 2246               		.loc 1 358 23 view .LVU471
 358:main.c        **** 		}
 2247               		.loc 1 358 23 view .LVU472
 358:main.c        **** 		}
 2248               		.loc 1 358 23 view .LVU473
 2249               	/* #APP */
 2250               	 ;  358 "main.c" 1
 2251 0932 2491      		lpm r18, Z
 2252               		
 2253               	 ;  0 "" 2
 2254               	.LVL208:
 358:main.c        **** 		}
 2255               		.loc 1 358 23 view .LVU474
 2256               	/* #NOAPP */
 2257               	.LBE59:
 358:main.c        **** 		}
 2258               		.loc 1 358 17 is_stmt 0 view .LVU475
 2259 0934 9093 0000 		sts fld_term+5+1,r25
 2260 0938 8093 0000 		sts fld_term+5,r24
 358:main.c        **** 		}
 2261               		.loc 1 358 21 view .LVU476
 2262 093c 2C93      		st X,r18
 2263 093e 3196      		adiw r30,1
 2264               	.LVL209:
 358:main.c        **** 		}
 2265               		.loc 1 358 21 view .LVU477
 2266 0940 00C0      		rjmp .L115
 2267               	.LVL210:
 2268               	.L113:
 2269               	/* epilogue start */
 358:main.c        **** 		}
 2270               		.loc 1 358 21 view .LVU478
 2271               	.LBE60:
 2272               	.LBE61:
 364:main.c        **** 
 2273               		.loc 1 364 1 view .LVU479
 2274 0942 DF91      		pop r29
 2275 0944 CF91      		pop r28
 2276 0946 1F91      		pop r17
 2277 0948 0895      		ret
 2278               		.cfi_endproc
 2279               	.LFE55:
 2281               	.global	__floatsisf
 2283               	mode_input_event:
 2284               	.LVL211:
 2285               	.LFB37:
 596:main.c        **** 	switch(key)
 2286               		.loc 1 596 1 is_stmt 1 view -0
 2287               		.cfi_startproc
 596:main.c        **** 	switch(key)
 2288               		.loc 1 596 1 is_stmt 0 view .LVU481
 2289 094a 2F92      		push r2
 2290               	.LCFI44:
 2291               		.cfi_def_cfa_offset 3
 2292               		.cfi_offset 2, -2
 2293 094c 3F92      		push r3
 2294               	.LCFI45:
 2295               		.cfi_def_cfa_offset 4
 2296               		.cfi_offset 3, -3
 2297 094e 4F92      		push r4
 2298               	.LCFI46:
 2299               		.cfi_def_cfa_offset 5
 2300               		.cfi_offset 4, -4
 2301 0950 5F92      		push r5
 2302               	.LCFI47:
 2303               		.cfi_def_cfa_offset 6
 2304               		.cfi_offset 5, -5
 2305 0952 6F92      		push r6
 2306               	.LCFI48:
 2307               		.cfi_def_cfa_offset 7
 2308               		.cfi_offset 6, -6
 2309 0954 7F92      		push r7
 2310               	.LCFI49:
 2311               		.cfi_def_cfa_offset 8
 2312               		.cfi_offset 7, -7
 2313 0956 8F92      		push r8
 2314               	.LCFI50:
 2315               		.cfi_def_cfa_offset 9
 2316               		.cfi_offset 8, -8
 2317 0958 9F92      		push r9
 2318               	.LCFI51:
 2319               		.cfi_def_cfa_offset 10
 2320               		.cfi_offset 9, -9
 2321 095a AF92      		push r10
 2322               	.LCFI52:
 2323               		.cfi_def_cfa_offset 11
 2324               		.cfi_offset 10, -10
 2325 095c BF92      		push r11
 2326               	.LCFI53:
 2327               		.cfi_def_cfa_offset 12
 2328               		.cfi_offset 11, -11
 2329 095e CF92      		push r12
 2330               	.LCFI54:
 2331               		.cfi_def_cfa_offset 13
 2332               		.cfi_offset 12, -12
 2333 0960 DF92      		push r13
 2334               	.LCFI55:
 2335               		.cfi_def_cfa_offset 14
 2336               		.cfi_offset 13, -13
 2337 0962 EF92      		push r14
 2338               	.LCFI56:
 2339               		.cfi_def_cfa_offset 15
 2340               		.cfi_offset 14, -14
 2341 0964 FF92      		push r15
 2342               	.LCFI57:
 2343               		.cfi_def_cfa_offset 16
 2344               		.cfi_offset 15, -15
 2345 0966 0F93      		push r16
 2346               	.LCFI58:
 2347               		.cfi_def_cfa_offset 17
 2348               		.cfi_offset 16, -16
 2349 0968 1F93      		push r17
 2350               	.LCFI59:
 2351               		.cfi_def_cfa_offset 18
 2352               		.cfi_offset 17, -17
 2353 096a CF93      		push r28
 2354               	.LCFI60:
 2355               		.cfi_def_cfa_offset 19
 2356               		.cfi_offset 28, -18
 2357 096c DF93      		push r29
 2358               	.LCFI61:
 2359               		.cfi_def_cfa_offset 20
 2360               		.cfi_offset 29, -19
 2361 096e CDB7      		in r28,__SP_L__
 2362 0970 DEB7      		in r29,__SP_H__
 2363               	.LCFI62:
 2364               		.cfi_def_cfa_register 28
 2365 0972 2C97      		sbiw r28,12
 2366               	.LCFI63:
 2367               		.cfi_def_cfa_offset 32
 2368 0974 0FB6      		in __tmp_reg__,__SREG__
 2369 0976 F894      		cli
 2370 0978 DEBF      		out __SP_H__,r29
 2371 097a 0FBE      		out __SREG__,__tmp_reg__
 2372 097c CDBF      		out __SP_L__,r28
 2373               	/* prologue: function */
 2374               	/* frame size = 12 */
 2375               	/* stack size = 30 */
 2376               	.L__stack_usage = 30
 2377 097e 082F      		mov r16,r24
 597:main.c        **** 	{
 2378               		.loc 1 597 2 is_stmt 1 view .LVU482
 2379 0980 8032      		cpi r24,lo8(32)
 2380 0982 00F0      		brlo .+2
 2381 0984 00C0      		rjmp .L117
 2382 0986 E82F      		mov r30,r24
 2383 0988 F0E0      		ldi r31,0
 2384 098a E050      		subi r30,lo8(-(gs(.L120)))
 2385 098c F040      		sbci r31,hi8(-(gs(.L120)))
 2386 098e 0C94 0000 		jmp __tablejump2__
 2387               		.section	.jumptables.gcc.mode_input_event,"a",@progbits
 2388               		.p2align	1
 2389               	.L120:
 2390 0000 0000      		.word gs(.L151)
 2391 0002 0000      		.word gs(.L150)
 2392 0004 0000      		.word gs(.L149)
 2393 0006 0000      		.word gs(.L148)
 2394 0008 0000      		.word gs(.L147)
 2395 000a 0000      		.word gs(.L146)
 2396 000c 0000      		.word gs(.L145)
 2397 000e 0000      		.word gs(.L144)
 2398 0010 0000      		.word gs(.L143)
 2399 0012 0000      		.word gs(.L142)
 2400 0014 0000      		.word gs(.L141)
 2401 0016 0000      		.word gs(.L140)
 2402 0018 0000      		.word gs(.L139)
 2403 001a 0000      		.word gs(.L138)
 2404 001c 0000      		.word gs(.L137)
 2405 001e 0000      		.word gs(.L136)
 2406 0020 0000      		.word gs(.L135)
 2407 0022 0000      		.word gs(.L134)
 2408 0024 0000      		.word gs(.L133)
 2409 0026 0000      		.word gs(.L132)
 2410 0028 0000      		.word gs(.L131)
 2411 002a 0000      		.word gs(.L130)
 2412 002c 0000      		.word gs(.L129)
 2413 002e 0000      		.word gs(.L128)
 2414 0030 0000      		.word gs(.L127)
 2415 0032 0000      		.word gs(.L126)
 2416 0034 0000      		.word gs(.L125)
 2417 0036 0000      		.word gs(.L124)
 2418 0038 0000      		.word gs(.L123)
 2419 003a 0000      		.word gs(.L122)
 2420 003c 0000      		.word gs(.L121)
 2421 003e 0000      		.word gs(.L119)
 2422               		.text
 2423               	.L136:
 600:main.c        **** 		break;
 2424               		.loc 1 600 3 view .LVU483
 2425 0992 61E3      		ldi r22,lo8(49)
 2426               	.L253:
 757:main.c        **** 		break;
 2427               		.loc 1 757 3 is_stmt 0 view .LVU484
 2428 0994 80E0      		ldi r24,lo8(fld_term)
 2429 0996 90E0      		ldi r25,hi8(fld_term)
 2430               	.LVL212:
 2431               	/* epilogue start */
 763:main.c        **** 
 2432               		.loc 1 763 1 view .LVU485
 2433 0998 2C96      		adiw r28,12
 2434 099a 0FB6      		in __tmp_reg__,__SREG__
 2435 099c F894      		cli
 2436 099e DEBF      		out __SP_H__,r29
 2437 09a0 0FBE      		out __SREG__,__tmp_reg__
 2438 09a2 CDBF      		out __SP_L__,r28
 2439 09a4 DF91      		pop r29
 2440 09a6 CF91      		pop r28
 2441 09a8 1F91      		pop r17
 2442 09aa 0F91      		pop r16
 2443               	.LVL213:
 763:main.c        **** 
 2444               		.loc 1 763 1 view .LVU486
 2445 09ac FF90      		pop r15
 2446 09ae EF90      		pop r14
 2447 09b0 DF90      		pop r13
 2448 09b2 CF90      		pop r12
 2449 09b4 BF90      		pop r11
 2450 09b6 AF90      		pop r10
 2451 09b8 9F90      		pop r9
 2452 09ba 8F90      		pop r8
 2453 09bc 7F90      		pop r7
 2454 09be 6F90      		pop r6
 2455 09c0 5F90      		pop r5
 2456 09c2 4F90      		pop r4
 2457 09c4 3F90      		pop r3
 2458 09c6 2F90      		pop r2
 757:main.c        **** 		break;
 2459               		.loc 1 757 3 view .LVU487
 2460 09c8 0C94 0000 		jmp field_ins_chr
 2461               	.LVL214:
 2462               	.L140:
 604:main.c        **** 		break;
 2463               		.loc 1 604 3 is_stmt 1 view .LVU488
 2464 09cc 64E3      		ldi r22,lo8(52)
 2465 09ce 00C0      		rjmp .L253
 2466               	.L144:
 608:main.c        **** 		break;
 2467               		.loc 1 608 3 view .LVU489
 2468 09d0 67E3      		ldi r22,lo8(55)
 2469 09d2 00C0      		rjmp .L253
 2470               	.L148:
 612:main.c        **** 		break;
 2471               		.loc 1 612 3 view .LVU490
 2472 09d4 68E2      		ldi r22,lo8(40)
 2473 09d6 00C0      		rjmp .L253
 2474               	.L137:
 616:main.c        **** 		break;
 2475               		.loc 1 616 3 view .LVU491
 2476 09d8 62E3      		ldi r22,lo8(50)
 2477 09da 00C0      		rjmp .L253
 2478               	.L141:
 620:main.c        **** 		break;
 2479               		.loc 1 620 3 view .LVU492
 2480 09dc 65E3      		ldi r22,lo8(53)
 2481 09de 00C0      		rjmp .L253
 2482               	.L145:
 624:main.c        **** 		break;
 2483               		.loc 1 624 3 view .LVU493
 2484 09e0 68E3      		ldi r22,lo8(56)
 2485 09e2 00C0      		rjmp .L253
 2486               	.L149:
 628:main.c        **** 		break;
 2487               		.loc 1 628 3 view .LVU494
 2488 09e4 60E3      		ldi r22,lo8(48)
 2489 09e6 00C0      		rjmp .L253
 2490               	.L138:
 632:main.c        **** 		break;
 2491               		.loc 1 632 3 view .LVU495
 2492 09e8 63E3      		ldi r22,lo8(51)
 2493 09ea 00C0      		rjmp .L253
 2494               	.L142:
 636:main.c        **** 		break;
 2495               		.loc 1 636 3 view .LVU496
 2496 09ec 66E3      		ldi r22,lo8(54)
 2497 09ee 00C0      		rjmp .L253
 2498               	.L146:
 640:main.c        **** 		break;
 2499               		.loc 1 640 3 view .LVU497
 2500 09f0 69E3      		ldi r22,lo8(57)
 2501 09f2 00C0      		rjmp .L253
 2502               	.L150:
 644:main.c        **** 		break;
 2503               		.loc 1 644 3 view .LVU498
 2504 09f4 69E2      		ldi r22,lo8(41)
 2505 09f6 00C0      		rjmp .L253
 2506               	.L139:
 648:main.c        **** 		x_cnt = 0;
 2507               		.loc 1 648 3 view .LVU499
 2508               	.LVL215:
 2509               	.LBB83:
 2510               	.LBI83:
 366:main.c        **** {
 2511               		.loc 1 366 13 view .LVU500
 2512               	.LBB84:
 368:main.c        **** 	f->pos = 0;
 2513               		.loc 1 368 2 view .LVU501
 368:main.c        **** 	f->pos = 0;
 2514               		.loc 1 368 9 is_stmt 0 view .LVU502
 2515 09f8 1092 0000 		sts fld_term+7+1,__zero_reg__
 2516 09fc 1092 0000 		sts fld_term+7,__zero_reg__
 369:main.c        **** 	f->buf[0] = '\0';
 2517               		.loc 1 369 2 is_stmt 1 view .LVU503
 369:main.c        **** 	f->buf[0] = '\0';
 2518               		.loc 1 369 9 is_stmt 0 view .LVU504
 2519 0a00 1092 0000 		sts fld_term+5+1,__zero_reg__
 2520 0a04 1092 0000 		sts fld_term+5,__zero_reg__
 370:main.c        **** 	field_update(f);
 2521               		.loc 1 370 2 is_stmt 1 view .LVU505
 370:main.c        **** 	field_update(f);
 2522               		.loc 1 370 3 is_stmt 0 view .LVU506
 2523 0a08 E091 0000 		lds r30,fld_term+3
 2524 0a0c F091 0000 		lds r31,fld_term+3+1
 370:main.c        **** 	field_update(f);
 2525               		.loc 1 370 12 view .LVU507
 2526 0a10 1082      		st Z,__zero_reg__
 371:main.c        **** }
 2527               		.loc 1 371 2 is_stmt 1 view .LVU508
 2528 0a12 80E0      		ldi r24,lo8(fld_term)
 2529 0a14 90E0      		ldi r25,hi8(fld_term)
 2530 0a16 0E94 0000 		call field_update
 2531               	.LVL216:
 371:main.c        **** }
 2532               		.loc 1 371 2 is_stmt 0 view .LVU509
 2533               	.LBE84:
 2534               	.LBE83:
 649:main.c        **** 		break;
 2535               		.loc 1 649 3 is_stmt 1 view .LVU510
 649:main.c        **** 		break;
 2536               		.loc 1 649 9 is_stmt 0 view .LVU511
 2537 0a1a 1092 0000 		sts x_cnt,__zero_reg__
 650:main.c        **** 
 2538               		.loc 1 650 3 is_stmt 1 view .LVU512
 2539               	.LVL217:
 2540               	.L117:
 2541               	/* epilogue start */
 763:main.c        **** 
 2542               		.loc 1 763 1 is_stmt 0 view .LVU513
 2543 0a1e 2C96      		adiw r28,12
 2544 0a20 0FB6      		in __tmp_reg__,__SREG__
 2545 0a22 F894      		cli
 2546 0a24 DEBF      		out __SP_H__,r29
 2547 0a26 0FBE      		out __SREG__,__tmp_reg__
 2548 0a28 CDBF      		out __SP_L__,r28
 2549 0a2a DF91      		pop r29
 2550 0a2c CF91      		pop r28
 2551 0a2e 1F91      		pop r17
 2552 0a30 0F91      		pop r16
 2553 0a32 FF90      		pop r15
 2554 0a34 EF90      		pop r14
 2555 0a36 DF90      		pop r13
 2556 0a38 CF90      		pop r12
 2557 0a3a BF90      		pop r11
 2558 0a3c AF90      		pop r10
 2559 0a3e 9F90      		pop r9
 2560 0a40 8F90      		pop r8
 2561 0a42 7F90      		pop r7
 2562 0a44 6F90      		pop r6
 2563 0a46 5F90      		pop r5
 2564 0a48 4F90      		pop r4
 2565 0a4a 3F90      		pop r3
 2566 0a4c 2F90      		pop r2
 2567 0a4e 0895      		ret
 2568               	.LVL218:
 2569               	.L143:
 653:main.c        **** 		break;
 2570               		.loc 1 653 3 is_stmt 1 view .LVU514
 2571               	.LBB85:
 2572               	.LBI85:
 449:main.c        **** {
 2573               		.loc 1 449 13 view .LVU515
 2574               	.LBB86:
 451:main.c        **** 	{
 2575               		.loc 1 451 2 view .LVU516
 451:main.c        **** 	{
 2576               		.loc 1 451 6 is_stmt 0 view .LVU517
 2577 0a50 E090 0000 		lds r14,fld_term+5
 2578 0a54 F090 0000 		lds r15,fld_term+5+1
 451:main.c        **** 	{
 2579               		.loc 1 451 4 view .LVU518
 2580 0a58 1E14      		cp __zero_reg__,r14
 2581 0a5a 1F04      		cpc __zero_reg__,r15
 2582 0a5c 04F4      		brge .L117
 2583               	.LBB87:
 453:main.c        **** 		a = f->buf[f->pos - 1];
 2584               		.loc 1 453 3 is_stmt 1 view .LVU519
 2585               	.LVL219:
 454:main.c        **** 		if(a == CHAR_X)
 2586               		.loc 1 454 3 view .LVU520
 454:main.c        **** 		if(a == CHAR_X)
 2587               		.loc 1 454 8 is_stmt 0 view .LVU521
 2588 0a5e C090 0000 		lds r12,fld_term+3
 2589 0a62 D090 0000 		lds r13,fld_term+3+1
 454:main.c        **** 		if(a == CHAR_X)
 2590               		.loc 1 454 5 view .LVU522
 2591 0a66 F601      		movw r30,r12
 2592 0a68 EE0D      		add r30,r14
 2593 0a6a FF1D      		adc r31,r15
 2594 0a6c 3197      		sbiw r30,1
 2595 0a6e 8081      		ld r24,Z
 2596               	.LVL220:
 455:main.c        **** 		{
 2597               		.loc 1 455 3 is_stmt 1 view .LVU523
 455:main.c        **** 		{
 2598               		.loc 1 455 5 is_stmt 0 view .LVU524
 2599 0a70 8837      		cpi r24,lo8(120)
 2600 0a72 01F0      		breq .+2
 2601 0a74 00C0      		rjmp .L152
 457:main.c        **** 		}
 2602               		.loc 1 457 4 is_stmt 1 view .LVU525
 2603 0a76 8091 0000 		lds r24,x_cnt
 2604               	.LVL221:
 457:main.c        **** 		}
 2605               		.loc 1 457 4 is_stmt 0 view .LVU526
 2606 0a7a 8150      		subi r24,lo8(-(-1))
 2607 0a7c 8093 0000 		sts x_cnt,r24
 2608               	.L247:
 453:main.c        **** 		a = f->buf[f->pos - 1];
 2609               		.loc 1 453 11 view .LVU527
 2610 0a80 11E0      		ldi r17,lo8(1)
 2611               	.LVL222:
 2612               	.L153:
 465:main.c        **** 		f->pos -= n;
 2613               		.loc 1 465 3 is_stmt 1 view .LVU528
 2614 0a82 612F      		mov r22,r17
 2615 0a84 80E0      		ldi r24,lo8(fld_term)
 2616 0a86 90E0      		ldi r25,hi8(fld_term)
 2617 0a88 0E94 0000 		call field_shrink
 2618               	.LVL223:
 466:main.c        **** 		f->len -= n;
 2619               		.loc 1 466 3 view .LVU529
 466:main.c        **** 		f->len -= n;
 2620               		.loc 1 466 10 is_stmt 0 view .LVU530
 2621 0a8c 612F      		mov r22,r17
 2622 0a8e 70E0      		ldi r23,0
 2623 0a90 8091 0000 		lds r24,fld_term+5
 2624 0a94 9091 0000 		lds r25,fld_term+5+1
 2625 0a98 861B      		sub r24,r22
 2626 0a9a 970B      		sbc r25,r23
 2627 0a9c 9093 0000 		sts fld_term+5+1,r25
 2628 0aa0 8093 0000 		sts fld_term+5,r24
 467:main.c        **** 		f->buf[f->len] = '\0';
 2629               		.loc 1 467 3 is_stmt 1 view .LVU531
 467:main.c        **** 		f->buf[f->len] = '\0';
 2630               		.loc 1 467 10 is_stmt 0 view .LVU532
 2631 0aa4 8091 0000 		lds r24,fld_term+7
 2632 0aa8 9091 0000 		lds r25,fld_term+7+1
 2633 0aac 861B      		sub r24,r22
 2634 0aae 970B      		sbc r25,r23
 2635 0ab0 9093 0000 		sts fld_term+7+1,r25
 2636 0ab4 8093 0000 		sts fld_term+7,r24
 468:main.c        **** 		field_update(f);
 2637               		.loc 1 468 3 is_stmt 1 view .LVU533
 468:main.c        **** 		field_update(f);
 2638               		.loc 1 468 18 is_stmt 0 view .LVU534
 2639 0ab8 2091 0000 		lds r18,fld_term+3
 2640 0abc 3091 0000 		lds r19,fld_term+3+1
 2641 0ac0 820F      		add r24,r18
 2642 0ac2 931F      		adc r25,r19
 2643 0ac4 DC01      		movw r26,r24
 2644 0ac6 1C92      		st X,__zero_reg__
 469:main.c        **** 	}
 2645               		.loc 1 469 3 is_stmt 1 view .LVU535
 2646               	.LVL224:
 2647               	.L209:
 469:main.c        **** 	}
 2648               		.loc 1 469 3 is_stmt 0 view .LVU536
 2649               	.LBE87:
 2650               	.LBE86:
 2651               	.LBE85:
 2652               	.LBB90:
 2653               	.LBB91:
 490:main.c        **** }
 2654               		.loc 1 490 2 is_stmt 1 view .LVU537
 2655 0ac8 80E0      		ldi r24,lo8(fld_term)
 2656 0aca 90E0      		ldi r25,hi8(fld_term)
 2657               	/* epilogue start */
 2658               	.LBE91:
 2659               	.LBE90:
 763:main.c        **** 
 2660               		.loc 1 763 1 is_stmt 0 view .LVU538
 2661 0acc 2C96      		adiw r28,12
 2662 0ace 0FB6      		in __tmp_reg__,__SREG__
 2663 0ad0 F894      		cli
 2664 0ad2 DEBF      		out __SP_H__,r29
 2665 0ad4 0FBE      		out __SREG__,__tmp_reg__
 2666 0ad6 CDBF      		out __SP_L__,r28
 2667 0ad8 DF91      		pop r29
 2668 0ada CF91      		pop r28
 2669 0adc 1F91      		pop r17
 2670 0ade 0F91      		pop r16
 2671 0ae0 FF90      		pop r15
 2672 0ae2 EF90      		pop r14
 2673 0ae4 DF90      		pop r13
 2674 0ae6 CF90      		pop r12
 2675 0ae8 BF90      		pop r11
 2676 0aea AF90      		pop r10
 2677 0aec 9F90      		pop r9
 2678 0aee 8F90      		pop r8
 2679 0af0 7F90      		pop r7
 2680 0af2 6F90      		pop r6
 2681 0af4 5F90      		pop r5
 2682 0af6 4F90      		pop r4
 2683 0af8 3F90      		pop r3
 2684 0afa 2F90      		pop r2
 2685               	.LBB94:
 2686               	.LBB92:
 490:main.c        **** }
 2687               		.loc 1 490 2 view .LVU539
 2688 0afc 0C94 0000 		jmp field_update
 2689               	.LVL225:
 2690               	.L152:
 490:main.c        **** }
 2691               		.loc 1 490 2 view .LVU540
 2692               	.LBE92:
 2693               	.LBE94:
 2694               	.LBB95:
 2695               	.LBB89:
 2696               	.LBB88:
 459:main.c        **** 		{
 2697               		.loc 1 459 8 is_stmt 1 view .LVU541
 459:main.c        **** 		{
 2698               		.loc 1 459 10 is_stmt 0 view .LVU542
 2699 0b00 8832      		cpi r24,lo8(40)
 2700 0b02 01F0      		breq .+2
 2701 0b04 00C0      		rjmp .L247
 461:main.c        **** 			--n;
 2702               		.loc 1 461 8 view .LVU543
 2703 0b06 12E0      		ldi r17,lo8(2)
 2704 0b08 00C0      		rjmp .L154
 2705               	.LVL226:
 2706               	.L155:
 461:main.c        **** 			--n;
 2707               		.loc 1 461 47 is_stmt 1 view .LVU544
 461:main.c        **** 			--n;
 2708               		.loc 1 461 42 view .LVU545
 2709 0b0a 1F5F      		subi r17,lo8(-(1))
 2710               	.LVL227:
 2711               	.L154:
 461:main.c        **** 			--n;
 2712               		.loc 1 461 13 view .LVU546
 461:main.c        **** 			--n;
 2713               		.loc 1 461 35 is_stmt 0 view .LVU547
 2714 0b0c F701      		movw r30,r14
 2715 0b0e E11B      		sub r30,r17
 2716 0b10 F109      		sbc r31,__zero_reg__
 461:main.c        **** 			--n;
 2717               		.loc 1 461 27 view .LVU548
 2718 0b12 EC0D      		add r30,r12
 2719 0b14 FD1D      		adc r31,r13
 461:main.c        **** 			--n;
 2720               		.loc 1 461 13 view .LVU549
 2721 0b16 8081      		ld r24,Z
 2722 0b18 90E0      		ldi r25,0
 2723 0b1a 0E94 0000 		call islower
 2724               	.LVL228:
 461:main.c        **** 			--n;
 2725               		.loc 1 461 4 view .LVU550
 2726 0b1e 892B      		or r24,r25
 2727 0b20 01F4      		brne .L155
 462:main.c        **** 		}
 2728               		.loc 1 462 4 is_stmt 1 view .LVU551
 2729 0b22 1150      		subi r17,lo8(-(-1))
 2730               	.LVL229:
 462:main.c        **** 		}
 2731               		.loc 1 462 4 is_stmt 0 view .LVU552
 2732 0b24 00C0      		rjmp .L153
 2733               	.LVL230:
 2734               	.L147:
 462:main.c        **** 		}
 2735               		.loc 1 462 4 view .LVU553
 2736               	.LBE88:
 2737               	.LBE89:
 2738               	.LBE95:
 657:main.c        **** 		break;
 2739               		.loc 1 657 3 is_stmt 1 view .LVU554
 2740 0b26 6EE2      		ldi r22,lo8(46)
 2741 0b28 00C0      		rjmp .L253
 2742               	.L151:
 2743               	.LBB96:
 663:main.c        **** 		float y = 0;
 2744               		.loc 1 663 3 view .LVU555
 664:main.c        **** 		if((err = calc_prepare(buf_term)))
 2745               		.loc 1 664 3 view .LVU556
 664:main.c        **** 		if((err = calc_prepare(buf_term)))
 2746               		.loc 1 664 9 is_stmt 0 view .LVU557
 2747 0b2a 1982      		std Y+1,__zero_reg__
 2748 0b2c 1A82      		std Y+2,__zero_reg__
 2749 0b2e 1B82      		std Y+3,__zero_reg__
 2750 0b30 1C82      		std Y+4,__zero_reg__
 665:main.c        **** 		{
 2751               		.loc 1 665 3 is_stmt 1 view .LVU558
 2752               	.LBB97:
 2753               	.LBI97:
 958:main.c        **** {
 2754               		.loc 1 958 16 view .LVU559
 2755               	.LVL231:
 2756               	.LBB98:
 960:main.c        **** 	cur_type = TT_NULL;
 2757               		.loc 1 960 2 view .LVU560
 961:main.c        **** 	tok_cnt = 0;
 2758               		.loc 1 961 2 view .LVU561
 962:main.c        **** 	top_num = 0;
 2759               		.loc 1 962 2 view .LVU562
 962:main.c        **** 	top_num = 0;
 2760               		.loc 1 962 10 is_stmt 0 view .LVU563
 2761 0b32 1092 0000 		sts tok_cnt,__zero_reg__
 963:main.c        **** 	top_stack = 0;
 2762               		.loc 1 963 2 is_stmt 1 view .LVU564
 2763               	.LVL232:
 964:main.c        **** 	while((c = *term))
 2764               		.loc 1 964 2 view .LVU565
 965:main.c        **** 	{
 2765               		.loc 1 965 2 view .LVU566
 965:main.c        **** 	{
 2766               		.loc 1 965 7 is_stmt 0 view .LVU567
 2767 0b36 382E      		mov r3,r24
 963:main.c        **** 	top_stack = 0;
 2768               		.loc 1 963 10 view .LVU568
 2769 0b38 282E      		mov r2,r24
 964:main.c        **** 	while((c = *term))
 2770               		.loc 1 964 12 view .LVU569
 2771 0b3a 182F      		mov r17,r24
 965:main.c        **** 	{
 2772               		.loc 1 965 7 view .LVU570
 2773 0b3c 40E0      		ldi r20,lo8(buf_term)
 2774 0b3e E42E      		mov r14,r20
 2775 0b40 40E0      		ldi r20,hi8(buf_term)
 2776 0b42 F42E      		mov r15,r20
 2777               	.LVL233:
 2778               	.L156:
 965:main.c        **** 	{
 2779               		.loc 1 965 7 is_stmt 1 view .LVU571
 965:main.c        **** 	{
 2780               		.loc 1 965 11 is_stmt 0 view .LVU572
 2781 0b44 D701      		movw r26,r14
 2782 0b46 9C91      		ld r25,X
 2783               	.LVL234:
 965:main.c        **** 	{
 2784               		.loc 1 965 7 view .LVU573
 2785 0b48 9111      		cpse r25,__zero_reg__
 2786 0b4a 00C0      		rjmp .L199
 2787 0b4c E32D      		mov r30,r3
 2788 0b4e F0E0      		ldi r31,0
 2789 0b50 E050      		subi r30,lo8(-(tok_type_list))
 2790 0b52 F040      		sbci r31,hi8(-(tok_type_list))
 2791               	.LVL235:
 2792               	.L200:
1217:main.c        **** 	{
 2793               		.loc 1 1217 7 is_stmt 1 view .LVU574
 2794 0b54 1111      		cpse r17,__zero_reg__
 2795 0b56 00C0      		rjmp .L202
1217:main.c        **** 	{
 2796               		.loc 1 1217 7 is_stmt 0 view .LVU575
 2797 0b58 3092 0000 		sts tok_cnt,r3
 2798               	.LVL236:
1217:main.c        **** 	{
 2799               		.loc 1 1217 7 view .LVU576
 2800               	.LBE98:
 2801               	.LBE97:
 671:main.c        **** 		if(x_cnt)
 2802               		.loc 1 671 3 is_stmt 1 view .LVU577
 671:main.c        **** 		if(x_cnt)
 2803               		.loc 1 671 9 is_stmt 0 view .LVU578
 2804 0b5c AE01      		movw r20,r28
 2805 0b5e 4F5F      		subi r20,-1
 2806 0b60 5F4F      		sbci r21,-1
 2807 0b62 60E0      		ldi r22,0
 2808 0b64 70E0      		ldi r23,0
 2809 0b66 CB01      		movw r24,r22
 2810 0b68 0E94 0000 		call calc_solve
 2811               	.LVL237:
 672:main.c        **** 		{
 2812               		.loc 1 672 3 is_stmt 1 view .LVU579
 672:main.c        **** 		{
 2813               		.loc 1 672 5 is_stmt 0 view .LVU580
 2814 0b6c 9091 0000 		lds r25,x_cnt
 2815 0b70 9111      		cpse r25,__zero_reg__
 2816 0b72 00C0      		rjmp .L216
 684:main.c        **** 			{
 2817               		.loc 1 684 4 is_stmt 1 view .LVU581
 684:main.c        **** 			{
 2818               		.loc 1 684 6 is_stmt 0 view .LVU582
 2819 0b74 8111      		cpse r24,__zero_reg__
 2820 0b76 00C0      		rjmp .L170
 690:main.c        **** 		}
 2821               		.loc 1 690 4 is_stmt 1 view .LVU583
 2822 0b78 2981      		ldd r18,Y+1
 2823 0b7a 3A81      		ldd r19,Y+2
 2824 0b7c 4B81      		ldd r20,Y+3
 2825 0b7e 5C81      		ldd r21,Y+4
 2826 0b80 2D83      		std Y+5,r18
 2827 0b82 3E83      		std Y+6,r19
 2828 0b84 4F83      		std Y+7,r20
 2829 0b86 5887      		std Y+8,r21
 2830               	.LVL238:
 2831               	.LBB114:
 2832               	.LBI114:
 766:main.c        **** {
 2833               		.loc 1 766 13 view .LVU584
 2834               	.LBB115:
 768:main.c        **** 	lcd_cursor(0, 1);
 2835               		.loc 1 768 2 view .LVU585
 768:main.c        **** 	lcd_cursor(0, 1);
 2836               		.loc 1 768 9 is_stmt 0 view .LVU586
 2837 0b88 80E0      		ldi r24,lo8(gs(mode_result_event))
 2838 0b8a 90E0      		ldi r25,hi8(gs(mode_result_event))
 2839               	.LVL239:
 768:main.c        **** 	lcd_cursor(0, 1);
 2840               		.loc 1 768 9 view .LVU587
 2841 0b8c 9093 0000 		sts _event+1,r25
 2842 0b90 8093 0000 		sts _event,r24
 769:main.c        **** 	lcd_string(FORMAT_NUMBER(y, _buf_conv, sizeof(_buf_conv) - 1));
 2843               		.loc 1 769 2 is_stmt 1 view .LVU588
 2844 0b94 80EC      		ldi r24,lo8(-64)
 2845 0b96 0E94 0000 		call lcd_command
 2846               	.LVL240:
 770:main.c        **** 	lcd_cursor(fld_term.pos < LCD_WIDTH - 1 ?
 2847               		.loc 1 770 2 view .LVU589
 770:main.c        **** 	lcd_cursor(fld_term.pos < LCD_WIDTH - 1 ?
 2848               		.loc 1 770 13 is_stmt 0 view .LVU590
 2849 0b9a 00E0      		ldi r16,lo8(_buf_conv)
 2850 0b9c 10E0      		ldi r17,hi8(_buf_conv)
 2851               	.LVL241:
 770:main.c        **** 	lcd_cursor(fld_term.pos < LCD_WIDTH - 1 ?
 2852               		.loc 1 770 13 view .LVU591
 2853 0b9e 24E0      		ldi r18,lo8(4)
 2854 0ba0 40E1      		ldi r20,lo8(16)
 2855 0ba2 6D81      		ldd r22,Y+5
 2856 0ba4 7E81      		ldd r23,Y+6
 2857 0ba6 8F81      		ldd r24,Y+7
 2858 0ba8 9885      		ldd r25,Y+8
 2859 0baa 0E94 0000 		call dtostrf
 2860               	.LVL242:
 770:main.c        **** 	lcd_cursor(fld_term.pos < LCD_WIDTH - 1 ?
 2861               		.loc 1 770 2 view .LVU592
 2862 0bae 0E94 0000 		call lcd_string
 2863               	.LVL243:
 771:main.c        **** 		fld_term.pos : LCD_WIDTH - 1, 0);
 2864               		.loc 1 771 2 is_stmt 1 view .LVU593
 2865 0bb2 8091 0000 		lds r24,fld_term+5
 2866 0bb6 9091 0000 		lds r25,fld_term+5+1
 2867 0bba 8031      		cpi r24,16
 2868 0bbc 9105      		cpc r25,__zero_reg__
 2869 0bbe 04F0      		brlt .L207
 2870 0bc0 8FE0      		ldi r24,lo8(15)
 2871 0bc2 90E0      		ldi r25,0
 2872               	.L207:
 2873 0bc4 8058      		subi r24,lo8(-(-128))
 2874 0bc6 0E94 0000 		call lcd_command
 2875               	.LVL244:
 773:main.c        **** 
 2876               		.loc 1 773 1 is_stmt 0 view .LVU594
 2877 0bca 00C0      		rjmp .L117
 2878               	.LVL245:
 2879               	.L199:
 773:main.c        **** 
 2880               		.loc 1 773 1 view .LVU595
 2881               	.LBE115:
 2882               	.LBE114:
 2883               	.LBB116:
 2884               	.LBB110:
 967:main.c        **** 
 2885               		.loc 1 967 3 is_stmt 1 view .LVU596
 970:main.c        **** 		{
 2886               		.loc 1 970 3 view .LVU597
 970:main.c        **** 		{
 2887               		.loc 1 970 6 is_stmt 0 view .LVU598
 2888 0bcc E92F      		mov r30,r25
 2889 0bce E053      		subi r30,48
 2890 0bd0 FF0B      		sbc r31,r31
 970:main.c        **** 		{
 2891               		.loc 1 970 5 view .LVU599
 2892 0bd2 3A97      		sbiw r30,10
 2893 0bd4 00F0      		brlo .+2
 2894 0bd6 00C0      		rjmp .L157
 2895 0bd8 A701      		movw r20,r14
 2896               	.LBB99:
 977:main.c        **** 			{
 2897               		.loc 1 977 12 view .LVU600
 2898 0bda 802F      		mov r24,r16
 2899               	.LVL246:
 2900               	.L158:
 977:main.c        **** 			{
 2901               		.loc 1 977 12 view .LVU601
 2902 0bdc 5A01      		movw r10,r20
 2903               	.LVL247:
 977:main.c        **** 			{
 2904               		.loc 1 977 31 is_stmt 1 view .LVU602
 977:main.c        **** 			{
 2905               		.loc 1 977 34 is_stmt 0 view .LVU603
 2906 0bde DA01      		movw r26,r20
 2907 0be0 2C91      		ld r18,X
 2908 0be2 4F5F      		subi r20,-1
 2909 0be4 5F4F      		sbci r21,-1
 2910               	.LVL248:
 977:main.c        **** 			{
 2911               		.loc 1 977 4 view .LVU604
 2912 0be6 2223      		tst r18
 2913 0be8 01F0      		breq .L219
 979:main.c        **** 				{
 2914               		.loc 1 979 5 is_stmt 1 view .LVU605
 979:main.c        **** 				{
 2915               		.loc 1 979 7 is_stmt 0 view .LVU606
 2916 0bea 2E32      		cpi r18,lo8(46)
 2917 0bec 01F4      		brne .L159
 981:main.c        **** 					{
 2918               		.loc 1 981 6 is_stmt 1 view .LVU607
 2919               	.LVL249:
 981:main.c        **** 					{
 2920               		.loc 1 981 8 is_stmt 0 view .LVU608
 2921 0bee 8130      		cpi r24,lo8(1)
 2922 0bf0 01F4      		brne .+2
 2923 0bf2 00C0      		rjmp .L160
 2924 0bf4 81E0      		ldi r24,lo8(1)
 2925               	.LVL250:
 981:main.c        **** 					{
 2926               		.loc 1 981 8 view .LVU609
 2927 0bf6 00C0      		rjmp .L158
 2928               	.LVL251:
 2929               	.L159:
 988:main.c        **** 				{
 2930               		.loc 1 988 10 is_stmt 1 view .LVU610
 988:main.c        **** 				{
 2931               		.loc 1 988 13 is_stmt 0 view .LVU611
 2932 0bf8 2053      		subi r18,48
 2933 0bfa 330B      		sbc r19,r19
 2934               	.LVL252:
 988:main.c        **** 				{
 2935               		.loc 1 988 12 view .LVU612
 2936 0bfc 2A30      		cpi r18,10
 2937 0bfe 3105      		cpc r19,__zero_reg__
 2938 0c00 00F0      		brlo .L158
 2939               	.L219:
 988:main.c        **** 				{
 2940               		.loc 1 988 12 view .LVU613
 2941 0c02 812C      		mov r8,__zero_reg__
 2942 0c04 912C      		mov r9,__zero_reg__
 2943 0c06 C12C      		mov r12,__zero_reg__
 2944 0c08 D12C      		mov r13,__zero_reg__
 2945 0c0a 00C0      		rjmp .L165
 2946               	.LVL253:
 2947               	.L166:
 999:main.c        **** 				{
 2948               		.loc 1 999 5 is_stmt 1 view .LVU614
 999:main.c        **** 				{
 2949               		.loc 1 999 11 is_stmt 0 view .LVU615
 2950 0c0c F701      		movw r30,r14
 2951 0c0e 7190      		ld r7,Z+
 2952 0c10 7F01      		movw r14,r30
 2953               	.LVL254:
 999:main.c        **** 				{
 2954               		.loc 1 999 7 view .LVU616
 2955 0c12 FEE2      		ldi r31,lo8(46)
 2956 0c14 7F16      		cp r7,r31
 2957 0c16 01F4      		brne .+2
 2958 0c18 00C0      		rjmp .L220
1006:main.c        **** 			}
 2959               		.loc 1 1006 5 is_stmt 1 view .LVU617
1006:main.c        **** 			}
 2960               		.loc 1 1006 11 is_stmt 0 view .LVU618
 2961 0c1a 20E0      		ldi r18,0
 2962 0c1c 30E0      		ldi r19,0
 2963 0c1e 40E2      		ldi r20,lo8(32)
 2964 0c20 51E4      		ldi r21,lo8(65)
 2965 0c22 8D82      		std Y+5,r8
 2966 0c24 9E82      		std Y+6,r9
 2967 0c26 CF82      		std Y+7,r12
 2968 0c28 D886      		std Y+8,r13
 2969 0c2a 6D81      		ldd r22,Y+5
 2970 0c2c 7E81      		ldd r23,Y+6
 2971 0c2e 8F81      		ldd r24,Y+7
 2972 0c30 9885      		ldd r25,Y+8
 2973 0c32 0E94 0000 		call __mulsf3
 2974               	.LVL255:
 2975 0c36 4B01      		movw r8,r22
 2976               	.LVL256:
1006:main.c        **** 			}
 2977               		.loc 1 1006 11 view .LVU619
 2978 0c38 6C01      		movw r12,r24
 2979               	.LVL257:
1006:main.c        **** 			}
 2980               		.loc 1 1006 18 view .LVU620
 2981 0c3a 272D      		mov r18,r7
 2982 0c3c 30E0      		ldi r19,0
 2983 0c3e 50E0      		ldi r21,0
 2984 0c40 40E0      		ldi r20,0
 2985 0c42 2D83      		std Y+5,r18
 2986 0c44 3E83      		std Y+6,r19
 2987 0c46 4F83      		std Y+7,r20
 2988 0c48 5887      		std Y+8,r21
 2989               	.LVL258:
1006:main.c        **** 			}
 2990               		.loc 1 1006 18 view .LVU621
 2991 0c4a CA01      		movw r24,r20
 2992 0c4c B901      		movw r22,r18
 2993 0c4e 0E94 0000 		call __floatsisf
 2994               	.LVL259:
 2995 0c52 9B01      		movw r18,r22
 2996 0c54 AC01      		movw r20,r24
 2997 0c56 8D82      		std Y+5,r8
 2998 0c58 9E82      		std Y+6,r9
 2999 0c5a CF82      		std Y+7,r12
 3000 0c5c D886      		std Y+8,r13
 3001 0c5e 6D81      		ldd r22,Y+5
 3002 0c60 7E81      		ldd r23,Y+6
 3003 0c62 8F81      		ldd r24,Y+7
 3004 0c64 9885      		ldd r25,Y+8
 3005 0c66 0E94 0000 		call __addsf3
 3006               	.LVL260:
1006:main.c        **** 			}
 3007               		.loc 1 1006 7 view .LVU622
 3008 0c6a 20E0      		ldi r18,0
 3009 0c6c 30E0      		ldi r19,0
 3010 0c6e 40E4      		ldi r20,lo8(64)
 3011 0c70 52E4      		ldi r21,lo8(66)
 3012 0c72 6D83      		std Y+5,r22
 3013 0c74 7E83      		std Y+6,r23
 3014 0c76 8F83      		std Y+7,r24
 3015 0c78 9887      		std Y+8,r25
 3016 0c7a 6D81      		ldd r22,Y+5
 3017 0c7c 7E81      		ldd r23,Y+6
 3018 0c7e 8F81      		ldd r24,Y+7
 3019 0c80 9885      		ldd r25,Y+8
 3020 0c82 0E94 0000 		call __subsf3
 3021               	.LVL261:
 3022 0c86 4B01      		movw r8,r22
 3023 0c88 6C01      		movw r12,r24
 3024               	.LVL262:
 997:main.c        **** 			{
 3025               		.loc 1 997 31 is_stmt 1 view .LVU623
 3026               	.L165:
 997:main.c        **** 			{
 3027               		.loc 1 997 17 view .LVU624
 997:main.c        **** 			{
 3028               		.loc 1 997 4 is_stmt 0 view .LVU625
 3029 0c8a EA14      		cp r14,r10
 3030 0c8c FB04      		cpc r15,r11
 3031 0c8e 00F4      		brsh .+2
 3032 0c90 00C0      		rjmp .L166
 3033 0c92 412C      		mov r4,__zero_reg__
 3034 0c94 512C      		mov r5,__zero_reg__
 3035 0c96 20E8      		ldi r18,lo8(-128)
 3036 0c98 622E      		mov r6,r18
 3037 0c9a 3FE3      		ldi r19,lo8(63)
 3038 0c9c 732E      		mov r7,r19
 3039               	.LVL263:
 3040               	.L167:
1016:main.c        **** 			{
 3041               		.loc 1 1016 4 is_stmt 1 view .LVU626
1016:main.c        **** 			{
 3042               		.loc 1 1016 6 is_stmt 0 view .LVU627
 3043 0c9e EEE1      		ldi r30,lo8(30)
 3044 0ca0 E315      		cp r30,r3
 3045 0ca2 00F0      		brlo .+2
 3046 0ca4 00C0      		rjmp .L169
 3047               	.LVL264:
 3048               	.L251:
1016:main.c        **** 			{
 3049               		.loc 1 1016 6 view .LVU628
 3050 0ca6 3092 0000 		sts tok_cnt,r3
 3051               	.LBE99:
1221:main.c        **** 		}
 3052               		.loc 1 1221 11 view .LVU629
 3053 0caa 83E0      		ldi r24,lo8(3)
 3054 0cac 00C0      		rjmp .L170
 3055               	.LVL265:
 3056               	.L168:
 3057               	.LBB100:
1012:main.c        **** 				power *= 10.0;
 3058               		.loc 1 1012 5 is_stmt 1 view .LVU630
1012:main.c        **** 				power *= 10.0;
 3059               		.loc 1 1012 20 is_stmt 0 view .LVU631
 3060 0cae D701      		movw r26,r14
 3061 0cb0 8D91      		ld r24,X+
 3062 0cb2 7D01      		movw r14,r26
 3063               	.LVL266:
1012:main.c        **** 				power *= 10.0;
 3064               		.loc 1 1012 18 view .LVU632
 3065 0cb4 282F      		mov r18,r24
 3066 0cb6 30E0      		ldi r19,0
 3067 0cb8 50E0      		ldi r21,0
 3068 0cba 40E0      		ldi r20,0
 3069 0cbc 2D83      		std Y+5,r18
 3070 0cbe 3E83      		std Y+6,r19
 3071 0cc0 4F83      		std Y+7,r20
 3072 0cc2 5887      		std Y+8,r21
 3073 0cc4 CA01      		movw r24,r20
 3074 0cc6 B901      		movw r22,r18
 3075 0cc8 0E94 0000 		call __floatsisf
 3076               	.LVL267:
 3077 0ccc 6987      		std Y+9,r22
 3078 0cce 7A87      		std Y+10,r23
 3079 0cd0 8B87      		std Y+11,r24
 3080 0cd2 9C87      		std Y+12,r25
1012:main.c        **** 				power *= 10.0;
 3081               		.loc 1 1012 11 view .LVU633
 3082 0cd4 20E0      		ldi r18,0
 3083 0cd6 30E0      		ldi r19,0
 3084 0cd8 40E2      		ldi r20,lo8(32)
 3085 0cda 51E4      		ldi r21,lo8(65)
 3086 0cdc 8D82      		std Y+5,r8
 3087 0cde 9E82      		std Y+6,r9
 3088 0ce0 CF82      		std Y+7,r12
 3089 0ce2 D886      		std Y+8,r13
 3090 0ce4 6D81      		ldd r22,Y+5
 3091 0ce6 7E81      		ldd r23,Y+6
 3092 0ce8 8F81      		ldd r24,Y+7
 3093 0cea 9885      		ldd r25,Y+8
 3094 0cec 0E94 0000 		call __mulsf3
 3095               	.LVL268:
1012:main.c        **** 				power *= 10.0;
 3096               		.loc 1 1012 18 view .LVU634
 3097 0cf0 9B01      		movw r18,r22
 3098 0cf2 AC01      		movw r20,r24
 3099 0cf4 8985      		ldd r24,Y+9
 3100 0cf6 8D83      		std Y+5,r24
 3101 0cf8 9A85      		ldd r25,Y+10
 3102 0cfa 9E83      		std Y+6,r25
 3103 0cfc AB85      		ldd r26,Y+11
 3104 0cfe AF83      		std Y+7,r26
 3105 0d00 BC85      		ldd r27,Y+12
 3106 0d02 B887      		std Y+8,r27
 3107 0d04 6D81      		ldd r22,Y+5
 3108 0d06 7E81      		ldd r23,Y+6
 3109 0d08 8F81      		ldd r24,Y+7
 3110 0d0a 9885      		ldd r25,Y+8
 3111 0d0c 0E94 0000 		call __addsf3
 3112               	.LVL269:
1012:main.c        **** 				power *= 10.0;
 3113               		.loc 1 1012 7 view .LVU635
 3114 0d10 20E0      		ldi r18,0
 3115 0d12 30E0      		ldi r19,0
 3116 0d14 40E4      		ldi r20,lo8(64)
 3117 0d16 52E4      		ldi r21,lo8(66)
 3118 0d18 6D83      		std Y+5,r22
 3119 0d1a 7E83      		std Y+6,r23
 3120 0d1c 8F83      		std Y+7,r24
 3121 0d1e 9887      		std Y+8,r25
 3122 0d20 6D81      		ldd r22,Y+5
 3123 0d22 7E81      		ldd r23,Y+6
 3124 0d24 8F81      		ldd r24,Y+7
 3125 0d26 9885      		ldd r25,Y+8
 3126 0d28 0E94 0000 		call __subsf3
 3127               	.LVL270:
 3128 0d2c 4B01      		movw r8,r22
 3129               	.LVL271:
1012:main.c        **** 				power *= 10.0;
 3130               		.loc 1 1012 7 view .LVU636
 3131 0d2e 6C01      		movw r12,r24
 3132               	.LVL272:
1013:main.c        **** 			}
 3133               		.loc 1 1013 5 is_stmt 1 view .LVU637
1013:main.c        **** 			}
 3134               		.loc 1 1013 11 is_stmt 0 view .LVU638
 3135 0d30 20E0      		ldi r18,0
 3136 0d32 30E0      		ldi r19,0
 3137 0d34 40E2      		ldi r20,lo8(32)
 3138 0d36 51E4      		ldi r21,lo8(65)
 3139 0d38 4D82      		std Y+5,r4
 3140 0d3a 5E82      		std Y+6,r5
 3141 0d3c 6F82      		std Y+7,r6
 3142 0d3e 7886      		std Y+8,r7
 3143 0d40 6D81      		ldd r22,Y+5
 3144 0d42 7E81      		ldd r23,Y+6
 3145 0d44 8F81      		ldd r24,Y+7
 3146 0d46 9885      		ldd r25,Y+8
 3147 0d48 0E94 0000 		call __mulsf3
 3148               	.LVL273:
 3149 0d4c 2B01      		movw r4,r22
 3150               	.LVL274:
1013:main.c        **** 			}
 3151               		.loc 1 1013 11 view .LVU639
 3152 0d4e 3C01      		movw r6,r24
 3153               	.LVL275:
1010:main.c        **** 			{
 3154               		.loc 1 1010 35 is_stmt 1 view .LVU640
 3155               	.L164:
1010:main.c        **** 			{
 3156               		.loc 1 1010 21 view .LVU641
1010:main.c        **** 			{
 3157               		.loc 1 1010 4 is_stmt 0 view .LVU642
 3158 0d50 EA14      		cp r14,r10
 3159 0d52 FB04      		cpc r15,r11
 3160 0d54 00F4      		brsh .+2
 3161 0d56 00C0      		rjmp .L168
 3162 0d58 00C0      		rjmp .L167
 3163               	.LVL276:
 3164               	.L220:
1010:main.c        **** 			{
 3165               		.loc 1 1010 4 view .LVU643
 3166 0d5a 412C      		mov r4,__zero_reg__
 3167 0d5c 512C      		mov r5,__zero_reg__
 3168 0d5e 80E8      		ldi r24,lo8(-128)
 3169 0d60 682E      		mov r6,r24
 3170 0d62 9FE3      		ldi r25,lo8(63)
 3171 0d64 792E      		mov r7,r25
 3172               	.LVL277:
1010:main.c        **** 			{
 3173               		.loc 1 1010 4 view .LVU644
 3174 0d66 00C0      		rjmp .L164
 3175               	.LVL278:
 3176               	.L169:
1021:main.c        **** 			tok_num_list[top_num++] = n / power;
 3177               		.loc 1 1021 4 is_stmt 1 view .LVU645
1021:main.c        **** 			tok_num_list[top_num++] = n / power;
 3178               		.loc 1 1021 25 is_stmt 0 view .LVU646
 3179 0d68 F1E0      		ldi r31,lo8(1)
 3180 0d6a F30D      		add r31,r3
 3181 0d6c F987      		std Y+9,r31
 3182 0d6e E32D      		mov r30,r3
 3183 0d70 F0E0      		ldi r31,0
1021:main.c        **** 			tok_num_list[top_num++] = n / power;
 3184               		.loc 1 1021 29 view .LVU647
 3185 0d72 E050      		subi r30,lo8(-(tok_type_list))
 3186 0d74 F040      		sbci r31,hi8(-(tok_type_list))
 3187 0d76 21E0      		ldi r18,lo8(1)
 3188 0d78 2083      		st Z,r18
1022:main.c        **** 			isop = 0;
 3189               		.loc 1 1022 4 is_stmt 1 view .LVU648
1022:main.c        **** 			isop = 0;
 3190               		.loc 1 1022 24 is_stmt 0 view .LVU649
 3191 0d7a 31E0      		ldi r19,lo8(1)
 3192 0d7c 320D      		add r19,r2
 3193 0d7e 3A87      		std Y+10,r19
 3194               	.LVL279:
1022:main.c        **** 			isop = 0;
 3195               		.loc 1 1022 28 view .LVU650
 3196 0d80 44E0      		ldi r20,lo8(4)
 3197 0d82 249E      		mul r2,r20
 3198 0d84 7001      		movw r14,r0
 3199 0d86 1124      		clr __zero_reg__
 3200 0d88 C701      		movw r24,r14
 3201 0d8a 8050      		subi r24,lo8(-(tok_num_list))
 3202 0d8c 9040      		sbci r25,hi8(-(tok_num_list))
 3203 0d8e 7C01      		movw r14,r24
1022:main.c        **** 			isop = 0;
 3204               		.loc 1 1022 32 view .LVU651
 3205 0d90 242D      		mov r18,r4
 3206 0d92 352D      		mov r19,r5
 3207               	.LVL280:
1022:main.c        **** 			isop = 0;
 3208               		.loc 1 1022 32 view .LVU652
 3209 0d94 462D      		mov r20,r6
 3210 0d96 572D      		mov r21,r7
 3211 0d98 8D82      		std Y+5,r8
 3212 0d9a 9E82      		std Y+6,r9
 3213 0d9c CF82      		std Y+7,r12
 3214 0d9e D886      		std Y+8,r13
 3215 0da0 6D81      		ldd r22,Y+5
 3216 0da2 7E81      		ldd r23,Y+6
 3217 0da4 8F81      		ldd r24,Y+7
 3218 0da6 9885      		ldd r25,Y+8
 3219 0da8 0E94 0000 		call __divsf3
 3220               	.LVL281:
 3221 0dac D701      		movw r26,r14
 3222 0dae 6D93      		st X+,r22
 3223 0db0 7D93      		st X+,r23
 3224 0db2 8D93      		st X+,r24
 3225 0db4 9C93      		st X,r25
 3226 0db6 1397      		sbiw r26,3
1023:main.c        **** 		}
 3227               		.loc 1 1023 4 is_stmt 1 view .LVU653
 3228               	.LVL282:
1023:main.c        **** 		}
 3229               		.loc 1 1023 4 is_stmt 0 view .LVU654
 3230               	.LBE100:
1183:main.c        **** 		{
 3231               		.loc 1 1183 3 is_stmt 1 view .LVU655
 3232               	.LBB101:
1021:main.c        **** 			tok_num_list[top_num++] = n / power;
 3233               		.loc 1 1021 25 is_stmt 0 view .LVU656
 3234 0db8 3984      		ldd r3,Y+9
1022:main.c        **** 			isop = 0;
 3235               		.loc 1 1022 24 view .LVU657
 3236 0dba 2A84      		ldd r2,Y+10
1021:main.c        **** 			tok_num_list[top_num++] = n / power;
 3237               		.loc 1 1021 40 view .LVU658
 3238 0dbc 81E0      		ldi r24,lo8(1)
 3239               	.LVL283:
 3240               	.L171:
1021:main.c        **** 			tok_num_list[top_num++] = n / power;
 3241               		.loc 1 1021 40 view .LVU659
 3242 0dbe 7501      		movw r14,r10
 3243 0dc0 00C0      		rjmp .L156
 3244               	.LVL284:
 3245               	.L157:
1021:main.c        **** 			tok_num_list[top_num++] = n / power;
 3246               		.loc 1 1021 40 view .LVU660
 3247               	.LBE101:
1028:main.c        **** 			{
 3248               		.loc 1 1028 4 is_stmt 1 view .LVU661
 3249 0dc2 9336      		cpi r25,lo8(99)
 3250 0dc4 01F4      		brne .+2
 3251 0dc6 00C0      		rjmp .L221
 3252 0dc8 00F4      		brsh .L173
 3253 0dca 9B32      		cpi r25,lo8(43)
 3254 0dcc 01F4      		brne .+2
 3255 0dce 00C0      		rjmp .L222
 3256 0dd0 00F4      		brsh .L175
 3257 0dd2 9932      		cpi r25,lo8(41)
 3258 0dd4 01F4      		brne .+2
 3259 0dd6 00C0      		rjmp .L176
 3260 0dd8 9A32      		cpi r25,lo8(42)
 3261 0dda 01F4      		brne .+2
 3262 0ddc 00C0      		rjmp .L223
 3263 0dde 9832      		cpi r25,lo8(40)
 3264 0de0 01F4      		brne .+2
 3265 0de2 00C0      		rjmp .L177
 3266               	.LVL285:
 3267               	.L228:
 967:main.c        **** 
 3268               		.loc 1 967 8 is_stmt 0 view .LVU662
 3269 0de4 91E0      		ldi r25,lo8(1)
 3270 0de6 00C0      		rjmp .L174
 3271               	.LVL286:
 3272               	.L175:
1028:main.c        **** 			{
 3273               		.loc 1 1028 4 view .LVU663
 3274 0de8 9E35      		cpi r25,lo8(94)
 3275 0dea 01F4      		brne .+2
 3276 0dec 00C0      		rjmp .L224
 3277 0dee 9136      		cpi r25,lo8(97)
 3278 0df0 01F4      		brne .+2
 3279 0df2 00C0      		rjmp .L178
 3280 0df4 9D32      		cpi r25,lo8(45)
 3281 0df6 01F4      		brne .L228
1031:main.c        **** 				{
 3282               		.loc 1 1031 5 is_stmt 1 view .LVU664
 3283 0df8 8330      		cpi r24,lo8(3)
 3284 0dfa 01F4      		brne .+2
 3285 0dfc 00C0      		rjmp .L233
 3286 0dfe 00F0      		brlo .+2
 3287 0e00 00C0      		rjmp .L184
 3288 0e02 8823      		tst r24
 3289 0e04 01F4      		brne .+2
 3290 0e06 00C0      		rjmp .L233
 967:main.c        **** 
 3291               		.loc 1 967 8 is_stmt 0 view .LVU665
 3292 0e08 91E0      		ldi r25,lo8(1)
 3293               	.LVL287:
 967:main.c        **** 
 3294               		.loc 1 967 8 view .LVU666
 3295 0e0a 8330      		cpi r24,lo8(3)
 3296 0e0c 01F0      		breq .L174
 3297               	.L248:
1046:main.c        **** 					break;
 3298               		.loc 1 1046 15 view .LVU667
 3299 0e0e 8EE0      		ldi r24,lo8(14)
 3300               	.LVL288:
1046:main.c        **** 					break;
 3301               		.loc 1 1046 15 view .LVU668
 3302 0e10 00C0      		rjmp .L174
 3303               	.LVL289:
 3304               	.L173:
1028:main.c        **** 			{
 3305               		.loc 1 1028 4 view .LVU669
 3306 0e12 9837      		cpi r25,lo8(120)
 3307 0e14 01F4      		brne .+2
 3308 0e16 00C0      		rjmp .L180
 3309 0e18 00F4      		brsh .L181
 3310 0e1a 9337      		cpi r25,lo8(115)
 3311 0e1c 01F4      		brne .+2
 3312 0e1e 00C0      		rjmp .L225
 3313 0e20 9437      		cpi r25,lo8(116)
 3314 0e22 01F4      		brne .+2
 3315 0e24 00C0      		rjmp .L226
 3316 0e26 9C36      		cpi r25,lo8(108)
 3317 0e28 01F4      		brne .L228
 3318 0e2a 86E0      		ldi r24,lo8(6)
 3319               	.LVL290:
1028:main.c        **** 			{
 3320               		.loc 1 1028 4 view .LVU670
 3321 0e2c 00C0      		rjmp .L172
 3322               	.LVL291:
 3323               	.L181:
1028:main.c        **** 			{
 3324               		.loc 1 1028 4 view .LVU671
 3325 0e2e 973F      		cpi r25,lo8(-9)
 3326 0e30 01F4      		brne .+2
 3327 0e32 00C0      		rjmp .L182
 3328 0e34 9D3F      		cpi r25,lo8(-3)
 3329 0e36 01F4      		brne .L228
 967:main.c        **** 
 3330               		.loc 1 967 8 view .LVU672
 3331 0e38 91E0      		ldi r25,lo8(1)
 3332               	.LVL292:
1132:main.c        **** 				break;
 3333               		.loc 1 1132 14 view .LVU673
 3334 0e3a 80E1      		ldi r24,lo8(16)
 3335               	.LVL293:
 3336               	.L174:
1178:main.c        **** 		}
 3337               		.loc 1 1178 4 is_stmt 1 view .LVU674
 3338 0e3c 5701      		movw r10,r14
 3339 0e3e EFEF      		ldi r30,-1
 3340 0e40 AE1A      		sub r10,r30
 3341 0e42 BE0A      		sbc r11,r30
 3342               	.LVL294:
1183:main.c        **** 		{
 3343               		.loc 1 1183 3 view .LVU675
1183:main.c        **** 		{
 3344               		.loc 1 1183 5 is_stmt 0 view .LVU676
 3345 0e44 9923      		tst r25
 3346 0e46 01F4      		brne .+2
 3347 0e48 00C0      		rjmp .L171
 3348               	.LVL295:
 3349               	.LBB102:
1187:main.c        **** 			precedence = get_precedence(cur_type);
 3350               		.loc 1 1187 4 is_stmt 1 view .LVU677
1188:main.c        **** 			while(top_stack > 0)
 3351               		.loc 1 1188 4 view .LVU678
 3352               	.LBB103:
 3353               	.LBI103:
1377:main.c        **** }
1378:main.c        **** 
1379:main.c        **** static uint8_t get_precedence(uint8_t tt)
 3354               		.loc 1 1379 16 view .LVU679
 3355               	.LBE103:
 3356               	.LBE102:
 3357               	.LBE110:
 3358               	.LBE116:
 3359               	.LBE96:
1380:main.c        **** {
1381:main.c        **** 	switch(tt)
 3360               		.loc 1 1381 2 view .LVU680
 3361 0e4a E3EF      		ldi r30,lo8(-13)
 3362 0e4c E80F      		add r30,r24
 3363               	.LBB120:
 3364               	.LBB117:
 3365               	.LBB111:
1183:main.c        **** 		{
 3366               		.loc 1 1183 5 is_stmt 0 view .LVU681
 3367 0e4e 402F      		mov r20,r16
 3368 0e50 E530      		cpi r30,lo8(5)
 3369 0e52 00F4      		brsh .L191
1183:main.c        **** 		{
 3370               		.loc 1 1183 5 view .LVU682
 3371 0e54 F0E0      		ldi r31,0
 3372 0e56 E050      		subi r30,lo8(-(CSWTCH.108))
 3373 0e58 F040      		sbci r31,hi8(-(CSWTCH.108))
 3374 0e5a 4081      		ld r20,Z
 3375               	.L191:
 3376               	.LVL296:
 3377               	.LBB105:
1189:main.c        **** 			{
 3378               		.loc 1 1189 4 is_stmt 1 view .LVU683
 3379 0e5c A32D      		mov r26,r3
 3380 0e5e B0E0      		ldi r27,0
 3381 0e60 A050      		subi r26,lo8(-(tok_type_list))
 3382 0e62 B040      		sbci r27,hi8(-(tok_type_list))
 3383 0e64 212F      		mov r18,r17
 3384 0e66 30E0      		ldi r19,0
 3385 0e68 2050      		subi r18,lo8(-(op_stack))
 3386 0e6a 3040      		sbci r19,hi8(-(op_stack))
 3387               	.L192:
1189:main.c        **** 			{
 3388               		.loc 1 1189 9 view .LVU684
 3389 0e6c 1111      		cpse r17,__zero_reg__
 3390 0e6e 00C0      		rjmp .L197
 3391               	.L198:
1212:main.c        **** 		}
 3392               		.loc 1 1212 4 view .LVU685
 3393               	.LVL297:
1212:main.c        **** 		}
 3394               		.loc 1 1212 22 is_stmt 0 view .LVU686
 3395 0e70 E12F      		mov r30,r17
 3396 0e72 F0E0      		ldi r31,0
1212:main.c        **** 		}
 3397               		.loc 1 1212 26 view .LVU687
 3398 0e74 E050      		subi r30,lo8(-(op_stack))
 3399 0e76 F040      		sbci r31,hi8(-(op_stack))
 3400 0e78 8083      		st Z,r24
1212:main.c        **** 		}
 3401               		.loc 1 1212 22 view .LVU688
 3402 0e7a 1F5F      		subi r17,lo8(-(1))
 3403               	.LVL298:
1212:main.c        **** 		}
 3404               		.loc 1 1212 22 view .LVU689
 3405 0e7c 00C0      		rjmp .L171
 3406               	.LVL299:
 3407               	.L176:
1212:main.c        **** 		}
 3408               		.loc 1 1212 22 view .LVU690
 3409 0e7e A32D      		mov r26,r3
 3410 0e80 B0E0      		ldi r27,0
 3411 0e82 A050      		subi r26,lo8(-(tok_type_list))
 3412 0e84 B040      		sbci r27,hi8(-(tok_type_list))
 3413 0e86 E12F      		mov r30,r17
 3414 0e88 F0E0      		ldi r31,0
 3415 0e8a E050      		subi r30,lo8(-(op_stack))
 3416 0e8c F040      		sbci r31,hi8(-(op_stack))
 3417               	.LVL300:
 3418               	.L183:
1212:main.c        **** 		}
 3419               		.loc 1 1212 22 view .LVU691
 3420               	.LBE105:
 3421               	.LBB106:
1095:main.c        **** 					{
 3422               		.loc 1 1095 6 is_stmt 1 view .LVU692
1095:main.c        **** 					{
 3423               		.loc 1 1095 8 is_stmt 0 view .LVU693
 3424 0e8e 1111      		cpse r17,__zero_reg__
 3425 0e90 00C0      		rjmp .L188
1095:main.c        **** 					{
 3426               		.loc 1 1095 8 view .LVU694
 3427 0e92 3092 0000 		sts tok_cnt,r3
1098:main.c        **** 					}
 3428               		.loc 1 1098 14 view .LVU695
 3429 0e96 81E0      		ldi r24,lo8(1)
 3430               	.LVL301:
 3431               	.L170:
1098:main.c        **** 					}
 3432               		.loc 1 1098 14 view .LVU696
 3433               	.LBE106:
 3434               	.LBE111:
 3435               	.LBE117:
 667:main.c        **** 			break;
 3436               		.loc 1 667 4 is_stmt 1 view .LVU697
 3437 0e98 0E94 0000 		call mode_error
 3438               	.LVL302:
 668:main.c        **** 		}
 3439               		.loc 1 668 4 view .LVU698
 3440 0e9c 00C0      		rjmp .L117
 3441               	.LVL303:
 3442               	.L184:
 3443               	.LBB118:
 3444               	.LBB112:
 668:main.c        **** 		}
 3445               		.loc 1 668 4 is_stmt 0 view .LVU699
 3446 0e9e 8430      		cpi r24,lo8(4)
 3447 0ea0 01F4      		brne .+2
 3448 0ea2 00C0      		rjmp .L232
 3449 0ea4 93EF      		ldi r25,lo8(-13)
 3450               	.LVL304:
 668:main.c        **** 		}
 3451               		.loc 1 668 4 view .LVU700
 3452 0ea6 980F      		add r25,r24
 3453 0ea8 9530      		cpi r25,lo8(5)
 3454 0eaa 00F0      		brlo .+2
 3455 0eac 00C0      		rjmp .L228
 3456               	.L233:
 967:main.c        **** 
 3457               		.loc 1 967 8 view .LVU701
 3458 0eae 91E0      		ldi r25,lo8(1)
1040:main.c        **** 					break;
 3459               		.loc 1 1040 15 view .LVU702
 3460 0eb0 85E0      		ldi r24,lo8(5)
 3461               	.LVL305:
1040:main.c        **** 					break;
 3462               		.loc 1 1040 15 view .LVU703
 3463 0eb2 00C0      		rjmp .L174
 3464               	.LVL306:
 3465               	.L182:
1052:main.c        **** 				{
 3466               		.loc 1 1052 5 is_stmt 1 view .LVU704
1052:main.c        **** 				{
 3467               		.loc 1 1052 7 is_stmt 0 view .LVU705
 3468 0eb4 BEE1      		ldi r27,lo8(30)
 3469 0eb6 B315      		cp r27,r3
 3470 0eb8 00F4      		brsh .+2
 3471 0eba 00C0      		rjmp .L251
1057:main.c        **** 					cur_type = TT_NUMBER;
 3472               		.loc 1 1057 5 is_stmt 1 view .LVU706
 3473               	.LVL307:
1057:main.c        **** 					cur_type = TT_NUMBER;
 3474               		.loc 1 1057 26 is_stmt 0 view .LVU707
 3475 0ebc E32D      		mov r30,r3
 3476 0ebe F0E0      		ldi r31,0
1057:main.c        **** 					cur_type = TT_NUMBER;
 3477               		.loc 1 1057 30 view .LVU708
 3478 0ec0 E050      		subi r30,lo8(-(tok_type_list))
 3479 0ec2 F040      		sbci r31,hi8(-(tok_type_list))
 3480 0ec4 21E0      		ldi r18,lo8(1)
 3481 0ec6 2083      		st Z,r18
1059:main.c        **** 				isop = 0;
 3482               		.loc 1 1059 5 is_stmt 1 view .LVU709
 3483               	.LVL308:
1059:main.c        **** 				isop = 0;
 3484               		.loc 1 1059 29 is_stmt 0 view .LVU710
 3485 0ec8 34E0      		ldi r19,lo8(4)
 3486 0eca 239E      		mul r2,r19
 3487 0ecc F001      		movw r30,r0
 3488 0ece 1124      		clr __zero_reg__
 3489 0ed0 E050      		subi r30,lo8(-(tok_num_list))
 3490 0ed2 F040      		sbci r31,hi8(-(tok_num_list))
 3491 0ed4 5BED      		ldi r21,lo8(-37)
 3492 0ed6 4FE0      		ldi r20,lo8(15)
 3493 0ed8 39E4      		ldi r19,lo8(73)
 3494 0eda 20E4      		ldi r18,lo8(64)
 3495 0edc 852F      		mov r24,r21
 3496 0ede 942F      		mov r25,r20
 3497               	.LVL309:
1059:main.c        **** 				isop = 0;
 3498               		.loc 1 1059 29 view .LVU711
 3499 0ee0 A32F      		mov r26,r19
 3500 0ee2 B22F      		mov r27,r18
 3501 0ee4 8083      		st Z,r24
 3502 0ee6 9183      		std Z+1,r25
 3503 0ee8 A283      		std Z+2,r26
 3504 0eea B383      		std Z+3,r27
1060:main.c        **** 				break;
 3505               		.loc 1 1060 5 is_stmt 1 view .LVU712
 3506               	.LVL310:
1061:main.c        **** 
 3507               		.loc 1 1061 5 view .LVU713
1057:main.c        **** 					cur_type = TT_NUMBER;
 3508               		.loc 1 1057 26 is_stmt 0 view .LVU714
 3509 0eec 3394      		inc r3
1059:main.c        **** 				isop = 0;
 3510               		.loc 1 1059 25 view .LVU715
 3511 0eee 2394      		inc r2
 3512               	.LVL311:
1060:main.c        **** 				break;
 3513               		.loc 1 1060 10 view .LVU716
 3514 0ef0 902F      		mov r25,r16
1058:main.c        **** 				tok_num_list[top_num++] = M_PI;
 3515               		.loc 1 1058 15 view .LVU717
 3516 0ef2 81E0      		ldi r24,lo8(1)
1061:main.c        **** 
 3517               		.loc 1 1061 5 view .LVU718
 3518 0ef4 00C0      		rjmp .L174
 3519               	.LVL312:
 3520               	.L180:
1064:main.c        **** 				{
 3521               		.loc 1 1064 5 is_stmt 1 view .LVU719
1064:main.c        **** 				{
 3522               		.loc 1 1064 7 is_stmt 0 view .LVU720
 3523 0ef6 4EE1      		ldi r20,lo8(30)
 3524 0ef8 4315      		cp r20,r3
 3525 0efa 00F4      		brsh .+2
 3526 0efc 00C0      		rjmp .L251
1069:main.c        **** 					cur_type = TT_X;
 3527               		.loc 1 1069 5 is_stmt 1 view .LVU721
 3528               	.LVL313:
1069:main.c        **** 					cur_type = TT_X;
 3529               		.loc 1 1069 26 is_stmt 0 view .LVU722
 3530 0efe E32D      		mov r30,r3
 3531 0f00 F0E0      		ldi r31,0
1069:main.c        **** 					cur_type = TT_X;
 3532               		.loc 1 1069 30 view .LVU723
 3533 0f02 E050      		subi r30,lo8(-(tok_type_list))
 3534 0f04 F040      		sbci r31,hi8(-(tok_type_list))
 3535 0f06 52E0      		ldi r21,lo8(2)
 3536 0f08 5083      		st Z,r21
1071:main.c        **** 				break;
 3537               		.loc 1 1071 5 is_stmt 1 view .LVU724
 3538               	.LVL314:
1072:main.c        **** 
 3539               		.loc 1 1072 5 view .LVU725
1069:main.c        **** 					cur_type = TT_X;
 3540               		.loc 1 1069 26 is_stmt 0 view .LVU726
 3541 0f0a 3394      		inc r3
1071:main.c        **** 				break;
 3542               		.loc 1 1071 10 view .LVU727
 3543 0f0c 902F      		mov r25,r16
 3544               	.LVL315:
1070:main.c        **** 				isop = 0;
 3545               		.loc 1 1070 15 view .LVU728
 3546 0f0e 82E0      		ldi r24,lo8(2)
1072:main.c        **** 
 3547               		.loc 1 1072 5 view .LVU729
 3548 0f10 00C0      		rjmp .L174
 3549               	.LVL316:
 3550               	.L177:
1077:main.c        **** 				{
 3551               		.loc 1 1077 5 is_stmt 1 view .LVU730
1077:main.c        **** 				{
 3552               		.loc 1 1077 7 is_stmt 0 view .LVU731
 3553 0f12 1F31      		cpi r17,lo8(31)
 3554 0f14 00F0      		brlo .+2
 3555 0f16 00C0      		rjmp .L251
1082:main.c        **** 				isop = 0;
 3556               		.loc 1 1082 5 is_stmt 1 view .LVU732
 3557               	.LVL317:
1082:main.c        **** 				isop = 0;
 3558               		.loc 1 1082 23 is_stmt 0 view .LVU733
 3559 0f18 E12F      		mov r30,r17
 3560 0f1a F0E0      		ldi r31,0
1082:main.c        **** 				isop = 0;
 3561               		.loc 1 1082 27 view .LVU734
 3562 0f1c E050      		subi r30,lo8(-(op_stack))
 3563 0f1e F040      		sbci r31,hi8(-(op_stack))
 3564 0f20 83E0      		ldi r24,lo8(3)
 3565 0f22 8083      		st Z,r24
1083:main.c        **** 				break;
 3566               		.loc 1 1083 5 is_stmt 1 view .LVU735
 3567               	.LVL318:
1084:main.c        **** 
 3568               		.loc 1 1084 5 view .LVU736
1082:main.c        **** 				isop = 0;
 3569               		.loc 1 1082 23 is_stmt 0 view .LVU737
 3570 0f24 1F5F      		subi r17,lo8(-(1))
 3571               	.LVL319:
1083:main.c        **** 				break;
 3572               		.loc 1 1083 10 view .LVU738
 3573 0f26 902F      		mov r25,r16
 3574               	.LVL320:
1084:main.c        **** 
 3575               		.loc 1 1084 5 view .LVU739
 3576 0f28 00C0      		rjmp .L174
 3577               	.LVL321:
 3578               	.L188:
 3579               	.LBB107:
1101:main.c        **** 					{
 3580               		.loc 1 1101 6 is_stmt 1 view .LVU740
1101:main.c        **** 					{
 3581               		.loc 1 1101 12 is_stmt 0 view .LVU741
 3582 0f2a 8291      		ld r24,-Z
 3583               	.LVL322:
1101:main.c        **** 					{
 3584               		.loc 1 1101 8 view .LVU742
 3585 0f2c 8330      		cpi r24,lo8(3)
 3586 0f2e 01F4      		brne .L189
 3587               	.LVL323:
1115:main.c        **** 				}
 3588               		.loc 1 1115 6 is_stmt 1 view .LVU743
 3589 0f30 1150      		subi r17,lo8(-(-1))
 3590               	.LVL324:
1093:main.c        **** 				{
 3591               		.loc 1 1093 10 view .LVU744
1118:main.c        **** 				break;
 3592               		.loc 1 1118 10 is_stmt 0 view .LVU745
 3593 0f32 902F      		mov r25,r16
1091:main.c        **** 				i = 1;
 3594               		.loc 1 1091 14 view .LVU746
 3595 0f34 84E0      		ldi r24,lo8(4)
 3596               	.LVL325:
1091:main.c        **** 				i = 1;
 3597               		.loc 1 1091 14 view .LVU747
 3598 0f36 00C0      		rjmp .L174
 3599               	.LVL326:
 3600               	.L189:
1107:main.c        **** 						{
 3601               		.loc 1 1107 7 is_stmt 1 view .LVU748
1107:main.c        **** 						{
 3602               		.loc 1 1107 9 is_stmt 0 view .LVU749
 3603 0f38 9EE1      		ldi r25,lo8(30)
 3604 0f3a 9315      		cp r25,r3
 3605 0f3c 00F4      		brsh .+2
 3606 0f3e 00C0      		rjmp .L251
1112:main.c        **** 					}
 3607               		.loc 1 1112 7 is_stmt 1 view .LVU750
1112:main.c        **** 					}
 3608               		.loc 1 1112 28 is_stmt 0 view .LVU751
 3609 0f40 3394      		inc r3
1112:main.c        **** 					}
 3610               		.loc 1 1112 32 view .LVU752
 3611 0f42 8D93      		st X+,r24
1115:main.c        **** 				}
 3612               		.loc 1 1115 6 is_stmt 1 view .LVU753
 3613 0f44 1150      		subi r17,lo8(-(-1))
 3614               	.LVL327:
1093:main.c        **** 				{
 3615               		.loc 1 1093 10 view .LVU754
 3616 0f46 00C0      		rjmp .L183
 3617               	.LVL328:
 3618               	.L178:
1093:main.c        **** 				{
 3619               		.loc 1 1093 10 is_stmt 0 view .LVU755
 3620               	.LBE107:
1146:main.c        **** 				{
 3621               		.loc 1 1146 5 is_stmt 1 view .LVU756
 3622 0f48 9701      		movw r18,r14
 3623 0f4a 2F5F      		subi r18,-1
 3624 0f4c 3F4F      		sbci r19,-1
 3625               	.LVL329:
1146:main.c        **** 				{
 3626               		.loc 1 1146 12 is_stmt 0 view .LVU757
 3627 0f4e D701      		movw r26,r14
 3628 0f50 1196      		adiw r26,1
 3629 0f52 9C91      		ld r25,X
 3630               	.LVL330:
1146:main.c        **** 				{
 3631               		.loc 1 1146 5 view .LVU758
 3632 0f54 7901      		movw r14,r18
 3633               	.LVL331:
1146:main.c        **** 				{
 3634               		.loc 1 1146 5 view .LVU759
 3635 0f56 9337      		cpi r25,lo8(115)
 3636 0f58 01F0      		breq .L234
1146:main.c        **** 				{
 3637               		.loc 1 1146 5 view .LVU760
 3638 0f5a 9437      		cpi r25,lo8(116)
 3639 0f5c 01F0      		breq .L235
 3640 0f5e 9336      		cpi r25,lo8(99)
 3641 0f60 01F4      		brne .L172
1153:main.c        **** 					break;
 3642               		.loc 1 1153 15 view .LVU761
 3643 0f62 8BE0      		ldi r24,lo8(11)
 3644               	.LVL332:
 3645               	.L172:
1175:main.c        **** 			}
 3646               		.loc 1 1175 5 is_stmt 1 view .LVU762
1175:main.c        **** 			}
 3647               		.loc 1 1175 10 is_stmt 0 view .LVU763
 3648 0f64 B2E0      		ldi r27,2
 3649 0f66 EB0E      		add r14,r27
 3650 0f68 F11C      		adc r15,__zero_reg__
 3651               	.LVL333:
1175:main.c        **** 			}
 3652               		.loc 1 1175 10 view .LVU764
 3653 0f6a 00C0      		rjmp .L228
 3654               	.LVL334:
 3655               	.L221:
1168:main.c        **** 				goto add2;
 3656               		.loc 1 1168 14 view .LVU765
 3657 0f6c 88E0      		ldi r24,lo8(8)
 3658               	.LVL335:
1168:main.c        **** 				goto add2;
 3659               		.loc 1 1168 14 view .LVU766
 3660 0f6e 00C0      		rjmp .L172
 3661               	.LVL336:
 3662               	.L225:
1164:main.c        **** 				goto add2;
 3663               		.loc 1 1164 14 view .LVU767
 3664 0f70 87E0      		ldi r24,lo8(7)
 3665               	.LVL337:
1164:main.c        **** 				goto add2;
 3666               		.loc 1 1164 14 view .LVU768
 3667 0f72 00C0      		rjmp .L172
 3668               	.LVL338:
 3669               	.L226:
1172:main.c        **** 
 3670               		.loc 1 1172 14 view .LVU769
 3671 0f74 89E0      		ldi r24,lo8(9)
 3672               	.LVL339:
1172:main.c        **** 
 3673               		.loc 1 1172 14 view .LVU770
 3674 0f76 00C0      		rjmp .L172
 3675               	.LVL340:
 3676               	.L234:
1172:main.c        **** 
 3677               		.loc 1 1172 14 view .LVU771
 3678 0f78 8AE0      		ldi r24,lo8(10)
 3679               	.LVL341:
1172:main.c        **** 
 3680               		.loc 1 1172 14 view .LVU772
 3681 0f7a 00C0      		rjmp .L172
 3682               	.LVL342:
 3683               	.L235:
1157:main.c        **** 					break;
 3684               		.loc 1 1157 15 view .LVU773
 3685 0f7c 8CE0      		ldi r24,lo8(12)
 3686               	.LVL343:
1157:main.c        **** 					break;
 3687               		.loc 1 1157 15 view .LVU774
 3688 0f7e 00C0      		rjmp .L172
 3689               	.LVL344:
 3690               	.L222:
1028:main.c        **** 			{
 3691               		.loc 1 1028 4 view .LVU775
 3692 0f80 91E0      		ldi r25,lo8(1)
 3693               	.LVL345:
1028:main.c        **** 			{
 3694               		.loc 1 1028 4 view .LVU776
 3695 0f82 8DE0      		ldi r24,lo8(13)
 3696               	.LVL346:
1028:main.c        **** 			{
 3697               		.loc 1 1028 4 view .LVU777
 3698 0f84 00C0      		rjmp .L174
 3699               	.LVL347:
 3700               	.L223:
 967:main.c        **** 
 3701               		.loc 1 967 8 view .LVU778
 3702 0f86 91E0      		ldi r25,lo8(1)
 3703               	.LVL348:
1128:main.c        **** 				break;
 3704               		.loc 1 1128 14 view .LVU779
 3705 0f88 8FE0      		ldi r24,lo8(15)
 3706               	.LVL349:
1128:main.c        **** 				break;
 3707               		.loc 1 1128 14 view .LVU780
 3708 0f8a 00C0      		rjmp .L174
 3709               	.LVL350:
 3710               	.L224:
 967:main.c        **** 
 3711               		.loc 1 967 8 view .LVU781
 3712 0f8c 91E0      		ldi r25,lo8(1)
 3713               	.LVL351:
1136:main.c        **** 				break;
 3714               		.loc 1 1136 14 view .LVU782
 3715 0f8e 81E1      		ldi r24,lo8(17)
 3716               	.LVL352:
1136:main.c        **** 				break;
 3717               		.loc 1 1136 14 view .LVU783
 3718 0f90 00C0      		rjmp .L174
 3719               	.LVL353:
 3720               	.L232:
 967:main.c        **** 
 3721               		.loc 1 967 8 view .LVU784
 3722 0f92 91E0      		ldi r25,lo8(1)
 3723               	.LVL354:
 967:main.c        **** 
 3724               		.loc 1 967 8 view .LVU785
 3725 0f94 00C0      		rjmp .L248
 3726               	.LVL355:
 3727               	.L197:
 3728               	.LBB108:
1191:main.c        **** 				if((get_precedence(tmp) > precedence) ||
 3729               		.loc 1 1191 5 is_stmt 1 view .LVU786
1191:main.c        **** 				if((get_precedence(tmp) > precedence) ||
 3730               		.loc 1 1191 9 is_stmt 0 view .LVU787
 3731 0f96 F901      		movw r30,r18
 3732 0f98 9291      		ld r25,-Z
 3733               	.LVL356:
1192:main.c        **** 					(tmp == TT_LP))
 3734               		.loc 1 1192 5 is_stmt 1 view .LVU788
 3735               	.LBB104:
 3736               	.LBI104:
1379:main.c        **** {
 3737               		.loc 1 1379 16 view .LVU789
 3738               	.LBE104:
 3739               	.LBE108:
 3740               	.LBE112:
 3741               	.LBE118:
 3742               	.LBE120:
 3743               		.loc 1 1381 2 view .LVU790
 3744 0f9a 23EF      		ldi r18,lo8(-13)
 3745 0f9c 290F      		add r18,r25
 3746 0f9e 6E2F      		mov r22,r30
 3747 0fa0 5F2F      		mov r21,r31
 3748 0fa2 2530      		cpi r18,lo8(5)
 3749 0fa4 00F4      		brsh .L193
 3750               	.LVL357:
 3751               	.LBB121:
 3752               	.LBB119:
 3753               	.LBB113:
 3754               	.LBB109:
1192:main.c        **** 					(tmp == TT_LP))
 3755               		.loc 1 1192 7 is_stmt 0 view .LVU791
 3756 0fa6 E22F      		mov r30,r18
 3757 0fa8 F0E0      		ldi r31,0
 3758 0faa E050      		subi r30,lo8(-(CSWTCH.108))
 3759 0fac F040      		sbci r31,hi8(-(CSWTCH.108))
 3760 0fae 2081      		ld r18,Z
 3761 0fb0 4217      		cp r20,r18
 3762 0fb2 00F4      		brsh .L195
 3763               	.L194:
1207:main.c        **** 			{
 3764               		.loc 1 1207 4 is_stmt 1 view .LVU792
1207:main.c        **** 			{
 3765               		.loc 1 1207 6 is_stmt 0 view .LVU793
 3766 0fb4 1F31      		cpi r17,lo8(31)
 3767 0fb6 00F4      		brsh .+2
 3768 0fb8 00C0      		rjmp .L198
 3769 0fba 00C0      		rjmp .L251
 3770               	.LVL358:
 3771               	.L193:
1192:main.c        **** 					(tmp == TT_LP))
 3772               		.loc 1 1192 43 view .LVU794
 3773 0fbc 9330      		cpi r25,lo8(3)
 3774 0fbe 01F0      		breq .L194
 3775               	.L195:
1198:main.c        **** 				if(tok_cnt >= TOKEN_LIST_SIZE - 1)
 3776               		.loc 1 1198 5 is_stmt 1 view .LVU795
 3777 0fc0 1150      		subi r17,lo8(-(-1))
 3778               	.LVL359:
1199:main.c        **** 				{
 3779               		.loc 1 1199 5 view .LVU796
1199:main.c        **** 				{
 3780               		.loc 1 1199 7 is_stmt 0 view .LVU797
 3781 0fc2 262F      		mov r18,r22
 3782 0fc4 352F      		mov r19,r21
 3783 0fc6 FEE1      		ldi r31,lo8(30)
 3784 0fc8 F315      		cp r31,r3
 3785 0fca 00F4      		brsh .+2
 3786 0fcc 00C0      		rjmp .L251
1204:main.c        **** 			}
 3787               		.loc 1 1204 5 is_stmt 1 view .LVU798
1204:main.c        **** 			}
 3788               		.loc 1 1204 26 is_stmt 0 view .LVU799
 3789 0fce 3394      		inc r3
1204:main.c        **** 			}
 3790               		.loc 1 1204 30 view .LVU800
 3791 0fd0 9D93      		st X+,r25
 3792 0fd2 00C0      		rjmp .L192
 3793               	.LVL360:
 3794               	.L202:
1204:main.c        **** 			}
 3795               		.loc 1 1204 30 view .LVU801
 3796               	.LBE109:
1219:main.c        **** 		{
 3797               		.loc 1 1219 3 is_stmt 1 view .LVU802
1219:main.c        **** 		{
 3798               		.loc 1 1219 5 is_stmt 0 view .LVU803
 3799 0fd4 BEE1      		ldi r27,lo8(30)
 3800 0fd6 B315      		cp r27,r3
 3801 0fd8 00F4      		brsh .+2
 3802 0fda 00C0      		rjmp .L251
1224:main.c        **** 			op_stack[--top_stack];
 3803               		.loc 1 1224 3 is_stmt 1 view .LVU804
1224:main.c        **** 			op_stack[--top_stack];
 3804               		.loc 1 1224 28 is_stmt 0 view .LVU805
 3805 0fdc 1150      		subi r17,lo8(-(-1))
 3806               	.LVL361:
1225:main.c        **** 	}
 3807               		.loc 1 1225 13 view .LVU806
 3808 0fde A12F      		mov r26,r17
 3809 0fe0 B0E0      		ldi r27,0
1225:main.c        **** 	}
 3810               		.loc 1 1225 12 view .LVU807
 3811 0fe2 A050      		subi r26,lo8(-(op_stack))
 3812 0fe4 B040      		sbci r27,hi8(-(op_stack))
1224:main.c        **** 			op_stack[--top_stack];
 3813               		.loc 1 1224 28 view .LVU808
 3814 0fe6 8C91      		ld r24,X
 3815 0fe8 8193      		st Z+,r24
 3816 0fea 3394      		inc r3
 3817 0fec 00C0      		rjmp .L200
 3818               	.LVL362:
 3819               	.L216:
1224:main.c        **** 			op_stack[--top_stack];
 3820               		.loc 1 1224 28 view .LVU809
 3821               	.LBE113:
 3822               	.LBE119:
 674:main.c        **** 			{
 3823               		.loc 1 674 4 is_stmt 1 view .LVU810
 674:main.c        **** 			{
 3824               		.loc 1 674 6 is_stmt 0 view .LVU811
 3825 0fee 982F      		mov r25,r24
 3826 0ff0 9D7F      		andi r25,lo8(-3)
 3827 0ff2 01F0      		breq .+2
 3828 0ff4 00C0      		rjmp .L170
 680:main.c        **** 		}
 3829               		.loc 1 680 4 is_stmt 1 view .LVU812
 3830 0ff6 0E94 0000 		call mode_settings
 3831               	.LVL363:
 680:main.c        **** 		}
 3832               		.loc 1 680 4 is_stmt 0 view .LVU813
 3833 0ffa 00C0      		rjmp .L117
 3834               	.L119:
 680:main.c        **** 		}
 3835               		.loc 1 680 4 view .LVU814
 3836               	.LBE121:
 696:main.c        **** 		break;
 3837               		.loc 1 696 3 is_stmt 1 view .LVU815
 3838 0ffc 63E0      		ldi r22,lo8(3)
 3839 0ffe 80E0      		ldi r24,lo8(_str_sin)
 3840 1000 90E0      		ldi r25,hi8(_str_sin)
 3841               	.L254:
 3842               	/* epilogue start */
 763:main.c        **** 
 3843               		.loc 1 763 1 is_stmt 0 view .LVU816
 3844 1002 2C96      		adiw r28,12
 3845 1004 0FB6      		in __tmp_reg__,__SREG__
 3846 1006 F894      		cli
 3847 1008 DEBF      		out __SP_H__,r29
 3848 100a 0FBE      		out __SREG__,__tmp_reg__
 3849 100c CDBF      		out __SP_L__,r28
 3850 100e DF91      		pop r29
 3851 1010 CF91      		pop r28
 3852 1012 1F91      		pop r17
 3853 1014 0F91      		pop r16
 3854               	.LVL364:
 763:main.c        **** 
 3855               		.loc 1 763 1 view .LVU817
 3856 1016 FF90      		pop r15
 3857 1018 EF90      		pop r14
 3858 101a DF90      		pop r13
 3859 101c CF90      		pop r12
 3860 101e BF90      		pop r11
 3861 1020 AF90      		pop r10
 3862 1022 9F90      		pop r9
 3863 1024 8F90      		pop r8
 3864 1026 7F90      		pop r7
 3865 1028 6F90      		pop r6
 3866 102a 5F90      		pop r5
 3867 102c 4F90      		pop r4
 3868 102e 3F90      		pop r3
 3869 1030 2F90      		pop r2
 741:main.c        **** 		break;
 3870               		.loc 1 741 3 view .LVU818
 3871 1032 0C94 0000 		jmp field_ins_str_P.constprop.0
 3872               	.LVL365:
 3873               	.L124:
 700:main.c        **** 		break;
 3874               		.loc 1 700 3 is_stmt 1 view .LVU819
 3875               	.LBB122:
 3876               	.LBI90:
 473:main.c        **** {
 3877               		.loc 1 473 13 view .LVU820
 3878               	.LBB93:
 475:main.c        **** 	{
 3879               		.loc 1 475 2 view .LVU821
 475:main.c        **** 	{
 3880               		.loc 1 475 6 is_stmt 0 view .LVU822
 3881 1036 8091 0000 		lds r24,fld_term+5
 3882 103a 9091 0000 		lds r25,fld_term+5+1
 475:main.c        **** 	{
 3883               		.loc 1 475 4 view .LVU823
 3884 103e 1816      		cp __zero_reg__,r24
 3885 1040 1906      		cpc __zero_reg__,r25
 3886 1042 04F4      		brge .L208
 477:main.c        **** 		if(f->buf[f->pos] == CHAR_LP)
 3887               		.loc 1 477 3 is_stmt 1 view .LVU824
 3888 1044 9C01      		movw r18,r24
 3889 1046 2150      		subi r18,1
 3890 1048 3109      		sbc r19,__zero_reg__
 3891 104a 3093 0000 		sts fld_term+5+1,r19
 3892 104e 2093 0000 		sts fld_term+5,r18
 478:main.c        **** 		{
 3893               		.loc 1 478 3 view .LVU825
 478:main.c        **** 		{
 3894               		.loc 1 478 7 is_stmt 0 view .LVU826
 3895 1052 E090 0000 		lds r14,fld_term+3
 3896 1056 F090 0000 		lds r15,fld_term+3+1
 478:main.c        **** 		{
 3897               		.loc 1 478 12 view .LVU827
 3898 105a 2E0D      		add r18,r14
 3899 105c 3F1D      		adc r19,r15
 478:main.c        **** 		{
 3900               		.loc 1 478 5 view .LVU828
 3901 105e D901      		movw r26,r18
 3902 1060 2C91      		ld r18,X
 3903 1062 2832      		cpi r18,lo8(40)
 3904 1064 01F0      		breq .+2
 3905 1066 00C0      		rjmp .L209
 480:main.c        **** 			for(; islower(f->buf[f->pos]); --(f->pos)) ;
 3906               		.loc 1 480 4 is_stmt 1 view .LVU829
 3907 1068 0297      		sbiw r24,2
 3908 106a 9093 0000 		sts fld_term+5+1,r25
 3909 106e 8093 0000 		sts fld_term+5,r24
 481:main.c        **** 			++(f->pos);
 3910               		.loc 1 481 4 view .LVU830
 3911               	.LVL366:
 3912               	.L210:
 481:main.c        **** 			++(f->pos);
 3913               		.loc 1 481 10 view .LVU831
 481:main.c        **** 			++(f->pos);
 3914               		.loc 1 481 26 is_stmt 0 view .LVU832
 3915 1072 0091 0000 		lds r16,fld_term+5
 3916 1076 1091 0000 		lds r17,fld_term+5+1
 481:main.c        **** 			++(f->pos);
 3917               		.loc 1 481 24 view .LVU833
 3918 107a F701      		movw r30,r14
 3919 107c E00F      		add r30,r16
 3920 107e F11F      		adc r31,r17
 481:main.c        **** 			++(f->pos);
 3921               		.loc 1 481 10 view .LVU834
 3922 1080 8081      		ld r24,Z
 3923 1082 90E0      		ldi r25,0
 3924 1084 0E94 0000 		call islower
 3925               	.LVL367:
 481:main.c        **** 			++(f->pos);
 3926               		.loc 1 481 4 view .LVU835
 3927 1088 892B      		or r24,r25
 3928 108a 01F4      		brne .L211
 482:main.c        **** 		}
 3929               		.loc 1 482 4 is_stmt 1 view .LVU836
 3930 108c 0F5F      		subi r16,-1
 3931 108e 1F4F      		sbci r17,-1
 3932 1090 1093 0000 		sts fld_term+5+1,r17
 3933 1094 0093 0000 		sts fld_term+5,r16
 3934 1098 00C0      		rjmp .L209
 3935               	.L211:
 481:main.c        **** 			++(f->pos);
 3936               		.loc 1 481 47 view .LVU837
 481:main.c        **** 			++(f->pos);
 3937               		.loc 1 481 35 view .LVU838
 3938 109a 0150      		subi r16,1
 3939 109c 1109      		sbc r17,__zero_reg__
 3940 109e 1093 0000 		sts fld_term+5+1,r17
 3941 10a2 0093 0000 		sts fld_term+5,r16
 3942 10a6 00C0      		rjmp .L210
 3943               	.LVL368:
 3944               	.L208:
 487:main.c        **** 	}
 3945               		.loc 1 487 3 view .LVU839
 487:main.c        **** 	}
 3946               		.loc 1 487 10 is_stmt 0 view .LVU840
 3947 10a8 8091 0000 		lds r24,fld_term+7
 3948 10ac 9091 0000 		lds r25,fld_term+7+1
 3949               	.LVL369:
 3950               	.L249:
 487:main.c        **** 	}
 3951               		.loc 1 487 10 view .LVU841
 3952 10b0 9093 0000 		sts fld_term+5+1,r25
 3953 10b4 8093 0000 		sts fld_term+5,r24
 3954 10b8 00C0      		rjmp .L209
 3955               	.LVL370:
 3956               	.L128:
 487:main.c        **** 	}
 3957               		.loc 1 487 10 view .LVU842
 3958               	.LBE93:
 3959               	.LBE122:
 704:main.c        **** 		++x_cnt;
 3960               		.loc 1 704 3 is_stmt 1 view .LVU843
 3961 10ba 68E7      		ldi r22,lo8(120)
 3962 10bc 80E0      		ldi r24,lo8(fld_term)
 3963 10be 90E0      		ldi r25,hi8(fld_term)
 3964 10c0 0E94 0000 		call field_ins_chr
 3965               	.LVL371:
 705:main.c        **** 		break;
 3966               		.loc 1 705 3 view .LVU844
 3967 10c4 8091 0000 		lds r24,x_cnt
 3968 10c8 8F5F      		subi r24,lo8(-(1))
 3969 10ca 8093 0000 		sts x_cnt,r24
 706:main.c        **** 
 3970               		.loc 1 706 3 view .LVU845
 3971 10ce 00C0      		rjmp .L117
 3972               	.L132:
 709:main.c        **** 		break;
 3973               		.loc 1 709 3 view .LVU846
 3974 10d0 64E0      		ldi r22,lo8(4)
 3975 10d2 80E0      		ldi r24,lo8(_str_asin)
 3976 10d4 90E0      		ldi r25,hi8(_str_asin)
 3977 10d6 00C0      		rjmp .L254
 3978               	.L121:
 713:main.c        **** 		break;
 3979               		.loc 1 713 3 view .LVU847
 3980 10d8 63E0      		ldi r22,lo8(3)
 3981 10da 80E0      		ldi r24,lo8(_str_cos)
 3982 10dc 90E0      		ldi r25,hi8(_str_cos)
 3983 10de 00C0      		rjmp .L254
 3984               	.L125:
 717:main.c        **** 		break;
 3985               		.loc 1 717 3 view .LVU848
 3986 10e0 67EF      		ldi r22,lo8(-9)
 3987 10e2 00C0      		rjmp .L253
 3988               	.L129:
 721:main.c        **** 		break;
 3989               		.loc 1 721 3 view .LVU849
 3990 10e4 6EE5      		ldi r22,lo8(94)
 3991 10e6 00C0      		rjmp .L253
 3992               	.L133:
 725:main.c        **** 		break;
 3993               		.loc 1 725 3 view .LVU850
 3994 10e8 64E0      		ldi r22,lo8(4)
 3995 10ea 80E0      		ldi r24,lo8(_str_acos)
 3996 10ec 90E0      		ldi r25,hi8(_str_acos)
 3997 10ee 00C0      		rjmp .L254
 3998               	.L122:
 729:main.c        **** 		break;
 3999               		.loc 1 729 3 view .LVU851
 4000 10f0 63E0      		ldi r22,lo8(3)
 4001 10f2 80E0      		ldi r24,lo8(_str_tan)
 4002 10f4 90E0      		ldi r25,hi8(_str_tan)
 4003 10f6 00C0      		rjmp .L254
 4004               	.L126:
 733:main.c        **** 		break;
 4005               		.loc 1 733 3 view .LVU852
 4006               	.LBB123:
 4007               	.LBI123:
 493:main.c        **** {
 4008               		.loc 1 493 13 view .LVU853
 4009               	.LVL372:
 4010               	.LBB124:
 495:main.c        **** 	{
 4011               		.loc 1 495 2 view .LVU854
 495:main.c        **** 	{
 4012               		.loc 1 495 6 is_stmt 0 view .LVU855
 4013 10f8 8091 0000 		lds r24,fld_term+5
 4014 10fc 9091 0000 		lds r25,fld_term+5+1
 495:main.c        **** 	{
 4015               		.loc 1 495 4 view .LVU856
 4016 1100 2091 0000 		lds r18,fld_term+7
 4017 1104 3091 0000 		lds r19,fld_term+7+1
 4018 1108 8217      		cp r24,r18
 4019 110a 9307      		cpc r25,r19
 4020 110c 04F4      		brge .L212
 497:main.c        **** 		{
 4021               		.loc 1 497 3 is_stmt 1 view .LVU857
 497:main.c        **** 		{
 4022               		.loc 1 497 7 is_stmt 0 view .LVU858
 4023 110e E090 0000 		lds r14,fld_term+3
 4024 1112 F090 0000 		lds r15,fld_term+3+1
 497:main.c        **** 		{
 4025               		.loc 1 497 12 view .LVU859
 4026 1116 8E0D      		add r24,r14
 4027 1118 9F1D      		adc r25,r15
 497:main.c        **** 		{
 4028               		.loc 1 497 5 view .LVU860
 4029 111a FC01      		movw r30,r24
 4030 111c 8081      		ld r24,Z
 4031 111e 8837      		cpi r24,lo8(120)
 4032 1120 01F4      		brne .L213
 4033               	.LVL373:
 4034               	.L215:
 505:main.c        **** 	}
 4035               		.loc 1 505 3 is_stmt 1 view .LVU861
 4036 1122 8091 0000 		lds r24,fld_term+5
 4037 1126 9091 0000 		lds r25,fld_term+5+1
 4038 112a 0196      		adiw r24,1
 4039 112c 00C0      		rjmp .L249
 4040               	.L214:
 501:main.c        **** 			}
 4041               		.loc 1 501 5 view .LVU862
 4042 112e 1093 0000 		sts fld_term+5+1,r17
 4043 1132 0093 0000 		sts fld_term+5,r16
 4044               	.L213:
 499:main.c        **** 			{
 4045               		.loc 1 499 9 view .LVU863
 499:main.c        **** 			{
 4046               		.loc 1 499 26 is_stmt 0 view .LVU864
 4047 1136 0091 0000 		lds r16,fld_term+5
 4048 113a 1091 0000 		lds r17,fld_term+5+1
 499:main.c        **** 			{
 4049               		.loc 1 499 24 view .LVU865
 4050 113e F701      		movw r30,r14
 4051 1140 E00F      		add r30,r16
 4052 1142 F11F      		adc r31,r17
 499:main.c        **** 			{
 4053               		.loc 1 499 10 view .LVU866
 4054 1144 8081      		ld r24,Z
 4055 1146 90E0      		ldi r25,0
 4056 1148 0E94 0000 		call islower
 4057               	.LVL374:
 501:main.c        **** 			}
 4058               		.loc 1 501 5 view .LVU867
 4059 114c 0F5F      		subi r16,-1
 4060 114e 1F4F      		sbci r17,-1
 499:main.c        **** 			{
 4061               		.loc 1 499 9 view .LVU868
 4062 1150 892B      		or r24,r25
 4063 1152 01F4      		brne .L214
 4064 1154 00C0      		rjmp .L215
 4065               	.LVL375:
 4066               	.L212:
 509:main.c        **** 	}
 4067               		.loc 1 509 3 is_stmt 1 view .LVU869
 509:main.c        **** 	}
 4068               		.loc 1 509 10 is_stmt 0 view .LVU870
 4069 1156 1092 0000 		sts fld_term+5+1,__zero_reg__
 4070 115a 1092 0000 		sts fld_term+5,__zero_reg__
 4071 115e 00C0      		rjmp .L209
 4072               	.LVL376:
 4073               	.L130:
 509:main.c        **** 	}
 4074               		.loc 1 509 10 view .LVU871
 4075               	.LBE124:
 4076               	.LBE123:
 737:main.c        **** 		break;
 4077               		.loc 1 737 3 is_stmt 1 view .LVU872
 4078 1160 63E0      		ldi r22,lo8(3)
 4079 1162 80E0      		ldi r24,lo8(_str_log)
 4080 1164 90E0      		ldi r25,hi8(_str_log)
 4081 1166 00C0      		rjmp .L254
 4082               	.L134:
 741:main.c        **** 		break;
 4083               		.loc 1 741 3 view .LVU873
 4084 1168 64E0      		ldi r22,lo8(4)
 4085 116a 80E0      		ldi r24,lo8(_str_atan)
 4086 116c 90E0      		ldi r25,hi8(_str_atan)
 4087 116e 00C0      		rjmp .L254
 4088               	.L123:
 745:main.c        **** 		break;
 4089               		.loc 1 745 3 view .LVU874
 4090 1170 6BE2      		ldi r22,lo8(43)
 4091 1172 00C0      		rjmp .L253
 4092               	.L127:
 749:main.c        **** 		break;
 4093               		.loc 1 749 3 view .LVU875
 4094 1174 6DE2      		ldi r22,lo8(45)
 4095 1176 00C0      		rjmp .L253
 4096               	.L131:
 753:main.c        **** 		break;
 4097               		.loc 1 753 3 view .LVU876
 4098 1178 6AE2      		ldi r22,lo8(42)
 4099 117a 00C0      		rjmp .L253
 4100               	.L135:
 757:main.c        **** 		break;
 4101               		.loc 1 757 3 view .LVU877
 4102 117c 6DEF      		ldi r22,lo8(-3)
 4103 117e 00C0      		rjmp .L253
 4104               	.LVL377:
 4105               	.L160:
 757:main.c        **** 		break;
 4106               		.loc 1 757 3 is_stmt 0 view .LVU878
 4107 1180 3092 0000 		sts tok_cnt,r3
 4108 1184 00C0      		rjmp .L170
 4109               		.cfi_endproc
 4110               	.LFE37:
 4113               	mode_result_event:
 4114               	.LVL378:
 4115               	.LFB39:
 776:main.c        **** 	mode_input();
 4116               		.loc 1 776 1 is_stmt 1 view -0
 4117               		.cfi_startproc
 776:main.c        **** 	mode_input();
 4118               		.loc 1 776 1 is_stmt 0 view .LVU880
 4119 1186 CF93      		push r28
 4120               	.LCFI64:
 4121               		.cfi_def_cfa_offset 3
 4122               		.cfi_offset 28, -2
 4123               	/* prologue: function */
 4124               	/* frame size = 0 */
 4125               	/* stack size = 1 */
 4126               	.L__stack_usage = 1
 4127 1188 C82F      		mov r28,r24
 777:main.c        **** 	mode_input_event(key);
 4128               		.loc 1 777 2 is_stmt 1 view .LVU881
 4129 118a 0E94 0000 		call mode_input
 4130               	.LVL379:
 778:main.c        **** }
 4131               		.loc 1 778 2 view .LVU882
 4132 118e 8C2F      		mov r24,r28
 4133               	/* epilogue start */
 779:main.c        **** 
 4134               		.loc 1 779 1 is_stmt 0 view .LVU883
 4135 1190 CF91      		pop r28
 4136               	.LVL380:
 778:main.c        **** }
 4137               		.loc 1 778 2 view .LVU884
 4138 1192 0C94 0000 		jmp mode_input_event
 4139               	.LVL381:
 778:main.c        **** }
 4140               		.loc 1 778 2 view .LVU885
 4141               		.cfi_endproc
 4142               	.LFE39:
 4145               	mode_settings_event:
 4146               	.LVL382:
 4147               	.LFB44:
 894:main.c        **** 	field_number_event(tbl_cur_fld, key);
 4148               		.loc 1 894 1 is_stmt 1 view -0
 4149               		.cfi_startproc
 894:main.c        **** 	field_number_event(tbl_cur_fld, key);
 4150               		.loc 1 894 1 is_stmt 0 view .LVU887
 4151 1196 CF93      		push r28
 4152               	.LCFI65:
 4153               		.cfi_def_cfa_offset 3
 4154               		.cfi_offset 28, -2
 4155 1198 DF93      		push r29
 4156               	.LCFI66:
 4157               		.cfi_def_cfa_offset 4
 4158               		.cfi_offset 29, -3
 4159 119a 00D0      		rcall .
 4160 119c 00D0      		rcall .
 4161               	.LCFI67:
 4162               		.cfi_def_cfa_offset 8
 4163 119e CDB7      		in r28,__SP_L__
 4164 11a0 DEB7      		in r29,__SP_H__
 4165               	.LCFI68:
 4166               		.cfi_def_cfa_register 28
 4167               	/* prologue: function */
 4168               	/* frame size = 4 */
 4169               	/* stack size = 6 */
 4170               	.L__stack_usage = 6
 895:main.c        **** 	switch(key)
 4171               		.loc 1 895 2 is_stmt 1 view .LVU888
 4172 11a2 2091 0000 		lds r18,tbl_cur_fld
 4173 11a6 3091 0000 		lds r19,tbl_cur_fld+1
 4174 11aa 3A83      		std Y+2,r19
 4175 11ac 2983      		std Y+1,r18
 4176               	.LVL383:
 4177               	.LBB137:
 4178               	.LBI137:
 516:main.c        **** {
 4179               		.loc 1 516 13 view .LVU889
 4180               	.LBB138:
 518:main.c        **** 	{
 4181               		.loc 1 518 2 view .LVU890
 4182 11ae EEEF      		ldi r30,lo8(-2)
 4183 11b0 E80F      		add r30,r24
 4184 11b2 EA31      		cpi r30,lo8(26)
 4185 11b4 00F0      		brlo .+2
 4186 11b6 00C0      		rjmp .L257
 4187 11b8 F0E0      		ldi r31,0
 4188 11ba E050      		subi r30,lo8(-(gs(.L259)))
 4189 11bc F040      		sbci r31,hi8(-(gs(.L259)))
 4190 11be 0C94 0000 		jmp __tablejump2__
 4191               		.section	.jumptables.gcc.mode_settings_event,"a",@progbits
 4192               		.p2align	1
 4193               	.L259:
 4194 0000 0000      		.word gs(.L273)
 4195 0002 0000      		.word gs(.L257)
 4196 0004 0000      		.word gs(.L272)
 4197 0006 0000      		.word gs(.L271)
 4198 0008 0000      		.word gs(.L270)
 4199 000a 0000      		.word gs(.L269)
 4200 000c 0000      		.word gs(.L268)
 4201 000e 0000      		.word gs(.L267)
 4202 0010 0000      		.word gs(.L266)
 4203 0012 0000      		.word gs(.L265)
 4204 0014 0000      		.word gs(.L264)
 4205 0016 0000      		.word gs(.L263)
 4206 0018 0000      		.word gs(.L262)
 4207 001a 0000      		.word gs(.L261)
 4208 001c 0000      		.word gs(.L257)
 4209 001e 0000      		.word gs(.L257)
 4210 0020 0000      		.word gs(.L257)
 4211 0022 0000      		.word gs(.L257)
 4212 0024 0000      		.word gs(.L257)
 4213 0026 0000      		.word gs(.L257)
 4214 0028 0000      		.word gs(.L257)
 4215 002a 0000      		.word gs(.L257)
 4216 002c 0000      		.word gs(.L257)
 4217 002e 0000      		.word gs(.L260)
 4218 0030 0000      		.word gs(.L257)
 4219 0032 0000      		.word gs(.L258)
 4220               		.text
 4221               	.L261:
 521:main.c        **** 		break;
 4222               		.loc 1 521 3 view .LVU891
 4223 11c2 61E3      		ldi r22,lo8(49)
 4224               	.L289:
 525:main.c        **** 		break;
 4225               		.loc 1 525 3 is_stmt 0 view .LVU892
 4226 11c4 8981      		ldd r24,Y+1
 4227 11c6 9A81      		ldd r25,Y+2
 4228               	.LVL384:
 4229               	.L291:
 4230               	/* epilogue start */
 525:main.c        **** 		break;
 4231               		.loc 1 525 3 view .LVU893
 4232               	.LBE138:
 4233               	.LBE137:
 938:main.c        **** 
 4234               		.loc 1 938 1 view .LVU894
 4235 11c8 0F90      		pop __tmp_reg__
 4236 11ca 0F90      		pop __tmp_reg__
 4237 11cc 0F90      		pop __tmp_reg__
 4238 11ce 0F90      		pop __tmp_reg__
 4239 11d0 DF91      		pop r29
 4240 11d2 CF91      		pop r28
 4241               	.LBB157:
 4242               	.LBB155:
 525:main.c        **** 		break;
 4243               		.loc 1 525 3 view .LVU895
 4244 11d4 0C94 0000 		jmp field_ins_chr
 4245               	.LVL385:
 4246               	.L265:
 525:main.c        **** 		break;
 4247               		.loc 1 525 3 is_stmt 1 view .LVU896
 4248 11d8 64E3      		ldi r22,lo8(52)
 4249 11da 00C0      		rjmp .L289
 4250               	.L269:
 529:main.c        **** 		break;
 4251               		.loc 1 529 3 view .LVU897
 4252 11dc 67E3      		ldi r22,lo8(55)
 4253 11de 00C0      		rjmp .L289
 4254               	.L262:
 533:main.c        **** 		break;
 4255               		.loc 1 533 3 view .LVU898
 4256 11e0 62E3      		ldi r22,lo8(50)
 4257 11e2 00C0      		rjmp .L289
 4258               	.L266:
 537:main.c        **** 		break;
 4259               		.loc 1 537 3 view .LVU899
 4260 11e4 65E3      		ldi r22,lo8(53)
 4261 11e6 00C0      		rjmp .L289
 4262               	.L270:
 541:main.c        **** 		break;
 4263               		.loc 1 541 3 view .LVU900
 4264 11e8 68E3      		ldi r22,lo8(56)
 4265 11ea 00C0      		rjmp .L289
 4266               	.L273:
 545:main.c        **** 		break;
 4267               		.loc 1 545 3 view .LVU901
 4268 11ec 60E3      		ldi r22,lo8(48)
 4269 11ee 00C0      		rjmp .L289
 4270               	.L263:
 549:main.c        **** 		break;
 4271               		.loc 1 549 3 view .LVU902
 4272 11f0 63E3      		ldi r22,lo8(51)
 4273 11f2 00C0      		rjmp .L289
 4274               	.L267:
 553:main.c        **** 		break;
 4275               		.loc 1 553 3 view .LVU903
 4276 11f4 66E3      		ldi r22,lo8(54)
 4277 11f6 00C0      		rjmp .L289
 4278               	.L271:
 557:main.c        **** 		break;
 4279               		.loc 1 557 3 view .LVU904
 4280 11f8 69E3      		ldi r22,lo8(57)
 4281 11fa 00C0      		rjmp .L289
 4282               	.L264:
 561:main.c        **** 		break;
 4283               		.loc 1 561 3 view .LVU905
 4284               	.LVL386:
 4285               	.LBB139:
 4286               	.LBI139:
 366:main.c        **** {
 4287               		.loc 1 366 13 view .LVU906
 4288               	.LBB140:
 368:main.c        **** 	f->pos = 0;
 4289               		.loc 1 368 2 view .LVU907
 368:main.c        **** 	f->pos = 0;
 4290               		.loc 1 368 9 is_stmt 0 view .LVU908
 4291 11fc A981      		ldd r26,Y+1
 4292 11fe BA81      		ldd r27,Y+2
 4293 1200 1896      		adiw r26,7+1
 4294 1202 1C92      		st X,__zero_reg__
 4295 1204 1E92      		st -X,__zero_reg__
 4296 1206 1797      		sbiw r26,7
 369:main.c        **** 	f->buf[0] = '\0';
 4297               		.loc 1 369 2 is_stmt 1 view .LVU909
 369:main.c        **** 	f->buf[0] = '\0';
 4298               		.loc 1 369 9 is_stmt 0 view .LVU910
 4299 1208 1696      		adiw r26,5+1
 4300 120a 1C92      		st X,__zero_reg__
 4301 120c 1E92      		st -X,__zero_reg__
 4302 120e 1597      		sbiw r26,5
 370:main.c        **** 	field_update(f);
 4303               		.loc 1 370 2 is_stmt 1 view .LVU911
 370:main.c        **** 	field_update(f);
 4304               		.loc 1 370 3 is_stmt 0 view .LVU912
 4305 1210 1396      		adiw r26,3
 4306 1212 ED91      		ld r30,X+
 4307 1214 FC91      		ld r31,X
 4308 1216 1497      		sbiw r26,3+1
 4309               	.LVL387:
 4310               	.L293:
 370:main.c        **** 	field_update(f);
 4311               		.loc 1 370 3 view .LVU913
 4312               	.LBE140:
 4313               	.LBE139:
 4314               	.LBB141:
 4315               	.LBB142:
 381:main.c        **** 		field_update(f);
 4316               		.loc 1 381 18 view .LVU914
 4317 1218 1082      		st Z,__zero_reg__
 382:main.c        **** 	}
 4318               		.loc 1 382 3 is_stmt 1 view .LVU915
 4319 121a CD01      		movw r24,r26
 4320               	.LVL388:
 4321               	.L292:
 382:main.c        **** 	}
 4322               		.loc 1 382 3 is_stmt 0 view .LVU916
 4323               	.LBE142:
 4324               	.LBE141:
 4325               	.LBE155:
 4326               	.LBE157:
 935:main.c        **** 		break;
 4327               		.loc 1 935 3 is_stmt 1 view .LVU917
 4328               	/* epilogue start */
 938:main.c        **** 
 4329               		.loc 1 938 1 is_stmt 0 view .LVU918
 4330 121c 0F90      		pop __tmp_reg__
 4331 121e 0F90      		pop __tmp_reg__
 4332 1220 0F90      		pop __tmp_reg__
 4333 1222 0F90      		pop __tmp_reg__
 4334 1224 DF91      		pop r29
 4335 1226 CF91      		pop r28
 935:main.c        **** 		break;
 4336               		.loc 1 935 3 view .LVU919
 4337 1228 0C94 0000 		jmp field_update
 4338               	.LVL389:
 4339               	.L268:
 4340               	.LBB158:
 4341               	.LBB156:
 565:main.c        **** 		break;
 4342               		.loc 1 565 3 is_stmt 1 view .LVU920
 4343               	.LBB144:
 4344               	.LBI141:
 374:main.c        **** {
 4345               		.loc 1 374 13 view .LVU921
 4346               	.LBB143:
 376:main.c        **** 	{
 4347               		.loc 1 376 2 view .LVU922
 376:main.c        **** 	{
 4348               		.loc 1 376 4 is_stmt 0 view .LVU923
 4349 122c E981      		ldd r30,Y+1
 4350 122e FA81      		ldd r31,Y+2
 4351 1230 8581      		ldd r24,Z+5
 4352 1232 9681      		ldd r25,Z+6
 4353               	.LVL390:
 376:main.c        **** 	{
 4354               		.loc 1 376 4 view .LVU924
 4355 1234 1816      		cp __zero_reg__,r24
 4356 1236 1906      		cpc __zero_reg__,r25
 4357 1238 04F0      		brlt .+2
 4358 123a 00C0      		rjmp .L256
 378:main.c        **** 		--(f->pos);
 4359               		.loc 1 378 3 is_stmt 1 view .LVU925
 4360 123c 61E0      		ldi r22,lo8(1)
 4361 123e CF01      		movw r24,r30
 4362 1240 0E94 0000 		call field_shrink
 4363               	.LVL391:
 379:main.c        **** 		--(f->len);
 4364               		.loc 1 379 3 view .LVU926
 4365 1244 A981      		ldd r26,Y+1
 4366 1246 BA81      		ldd r27,Y+2
 4367 1248 1596      		adiw r26,5
 4368 124a 8D91      		ld r24,X+
 4369 124c 9C91      		ld r25,X
 4370 124e 1697      		sbiw r26,5+1
 4371 1250 0197      		sbiw r24,1
 4372 1252 1696      		adiw r26,5+1
 4373 1254 9C93      		st X,r25
 4374 1256 8E93      		st -X,r24
 4375 1258 1597      		sbiw r26,5
 380:main.c        **** 		f->buf[f->len] = '\0';
 4376               		.loc 1 380 3 view .LVU927
 4377 125a 1796      		adiw r26,7
 4378 125c 8D91      		ld r24,X+
 4379 125e 9C91      		ld r25,X
 4380 1260 1897      		sbiw r26,7+1
 4381 1262 0197      		sbiw r24,1
 4382 1264 1896      		adiw r26,7+1
 4383 1266 9C93      		st X,r25
 4384 1268 8E93      		st -X,r24
 4385 126a 1797      		sbiw r26,7
 381:main.c        **** 		field_update(f);
 4386               		.loc 1 381 3 view .LVU928
 381:main.c        **** 		field_update(f);
 4387               		.loc 1 381 18 is_stmt 0 view .LVU929
 4388 126c 1396      		adiw r26,3
 4389 126e 2D91      		ld r18,X+
 4390 1270 3C91      		ld r19,X
 4391 1272 1497      		sbiw r26,3+1
 4392 1274 820F      		add r24,r18
 4393 1276 931F      		adc r25,r19
 4394 1278 FC01      		movw r30,r24
 4395 127a 00C0      		rjmp .L293
 4396               	.LVL392:
 4397               	.L272:
 381:main.c        **** 		field_update(f);
 4398               		.loc 1 381 18 view .LVU930
 4399               	.LBE143:
 4400               	.LBE144:
 569:main.c        **** 		break;
 4401               		.loc 1 569 3 is_stmt 1 view .LVU931
 4402 127c 6EE2      		ldi r22,lo8(46)
 4403 127e 00C0      		rjmp .L289
 4404               	.L258:
 574:main.c        **** 		break;
 4405               		.loc 1 574 3 view .LVU932
 4406               	.LVL393:
 4407               	.LBB145:
 4408               	.LBI145:
 386:main.c        **** {
 4409               		.loc 1 386 13 view .LVU933
 4410               	.LBB146:
 388:main.c        **** 	{
 4411               		.loc 1 388 2 view .LVU934
 388:main.c        **** 	{
 4412               		.loc 1 388 6 is_stmt 0 view .LVU935
 4413 1280 A981      		ldd r26,Y+1
 4414 1282 BA81      		ldd r27,Y+2
 4415 1284 1596      		adiw r26,5
 4416 1286 8D91      		ld r24,X+
 4417 1288 9C91      		ld r25,X
 4418 128a 1697      		sbiw r26,5+1
 4419               	.LVL394:
 388:main.c        **** 	{
 4420               		.loc 1 388 4 view .LVU936
 4421 128c 1816      		cp __zero_reg__,r24
 4422 128e 1906      		cpc __zero_reg__,r25
 4423 1290 04F4      		brge .L275
 390:main.c        **** 	}
 4424               		.loc 1 390 3 is_stmt 1 view .LVU937
 4425 1292 0197      		sbiw r24,1
 4426               	.LVL395:
 4427               	.L294:
 390:main.c        **** 	}
 4428               		.loc 1 390 3 is_stmt 0 view .LVU938
 4429               	.LBE146:
 4430               	.LBE145:
 4431               	.LBB148:
 4432               	.LBB149:
 404:main.c        **** 	}
 4433               		.loc 1 404 3 view .LVU939
 4434 1294 1696      		adiw r26,5+1
 4435 1296 9C93      		st X,r25
 4436 1298 8E93      		st -X,r24
 4437 129a 1597      		sbiw r26,5
 4438 129c 00C0      		rjmp .L278
 4439               	.LVL396:
 4440               	.L275:
 404:main.c        **** 	}
 4441               		.loc 1 404 3 view .LVU940
 4442               	.LBE149:
 4443               	.LBE148:
 4444               	.LBB152:
 4445               	.LBB147:
 394:main.c        **** 	}
 4446               		.loc 1 394 3 is_stmt 1 view .LVU941
 394:main.c        **** 	}
 4447               		.loc 1 394 10 is_stmt 0 view .LVU942
 4448 129e E981      		ldd r30,Y+1
 4449 12a0 FA81      		ldd r31,Y+2
 4450 12a2 8781      		ldd r24,Z+7
 4451 12a4 9085      		ldd r25,Z+8
 4452 12a6 9683      		std Z+6,r25
 4453 12a8 8583      		std Z+5,r24
 397:main.c        **** }
 4454               		.loc 1 397 2 is_stmt 1 view .LVU943
 4455               	.LVL397:
 4456               	.L278:
 397:main.c        **** }
 4457               		.loc 1 397 2 is_stmt 0 view .LVU944
 4458               	.LBE147:
 4459               	.LBE152:
 4460               	.LBB153:
 4461               	.LBB150:
 411:main.c        **** }
 4462               		.loc 1 411 2 is_stmt 1 view .LVU945
 4463 12aa 8981      		ldd r24,Y+1
 4464 12ac 9A81      		ldd r25,Y+2
 4465 12ae 00C0      		rjmp .L292
 4466               	.LVL398:
 4467               	.L260:
 411:main.c        **** }
 4468               		.loc 1 411 2 is_stmt 0 view .LVU946
 4469               	.LBE150:
 4470               	.LBE153:
 579:main.c        **** 		break;
 4471               		.loc 1 579 3 is_stmt 1 view .LVU947
 4472               	.LBB154:
 4473               	.LBI148:
 400:main.c        **** {
 4474               		.loc 1 400 13 view .LVU948
 4475               	.LBB151:
 402:main.c        **** 	{
 4476               		.loc 1 402 2 view .LVU949
 402:main.c        **** 	{
 4477               		.loc 1 402 6 is_stmt 0 view .LVU950
 4478 12b0 A981      		ldd r26,Y+1
 4479 12b2 BA81      		ldd r27,Y+2
 4480 12b4 1596      		adiw r26,5
 4481 12b6 8D91      		ld r24,X+
 4482 12b8 9C91      		ld r25,X
 4483 12ba 1697      		sbiw r26,5+1
 4484               	.LVL399:
 402:main.c        **** 	{
 4485               		.loc 1 402 4 view .LVU951
 4486 12bc 1796      		adiw r26,7
 4487 12be 2D91      		ld r18,X+
 4488 12c0 3C91      		ld r19,X
 4489 12c2 1897      		sbiw r26,7+1
 4490               	.LVL400:
 402:main.c        **** 	{
 4491               		.loc 1 402 4 view .LVU952
 4492 12c4 8217      		cp r24,r18
 4493 12c6 9307      		cpc r25,r19
 4494 12c8 04F4      		brge .L277
 404:main.c        **** 	}
 4495               		.loc 1 404 3 is_stmt 1 view .LVU953
 4496 12ca 0196      		adiw r24,1
 4497 12cc 00C0      		rjmp .L294
 4498               	.L277:
 408:main.c        **** 	}
 4499               		.loc 1 408 3 view .LVU954
 408:main.c        **** 	}
 4500               		.loc 1 408 10 is_stmt 0 view .LVU955
 4501 12ce E981      		ldd r30,Y+1
 4502 12d0 FA81      		ldd r31,Y+2
 4503 12d2 1682      		std Z+6,__zero_reg__
 4504 12d4 1582      		std Z+5,__zero_reg__
 4505 12d6 00C0      		rjmp .L278
 4506               	.LVL401:
 4507               	.L257:
 408:main.c        **** 	}
 4508               		.loc 1 408 10 view .LVU956
 4509               	.LBE151:
 4510               	.LBE154:
 4511               	.LBE156:
 4512               	.LBE158:
 896:main.c        **** 	{
 4513               		.loc 1 896 2 is_stmt 1 view .LVU957
 4514 12d8 8831      		cpi r24,lo8(24)
 4515 12da 01F4      		brne .+2
 4516 12dc 00C0      		rjmp .L279
 4517 12de 00F4      		brsh .L280
 4518 12e0 8823      		tst r24
 4519 12e2 01F0      		breq .L281
 4520 12e4 8631      		cpi r24,lo8(22)
 4521 12e6 01F4      		brne .+2
 4522 12e8 00C0      		rjmp .L282
 4523               	.LVL402:
 4524               	.L256:
 4525               	/* epilogue start */
 938:main.c        **** 
 4526               		.loc 1 938 1 is_stmt 0 view .LVU958
 4527 12ea 0F90      		pop __tmp_reg__
 4528 12ec 0F90      		pop __tmp_reg__
 4529 12ee 0F90      		pop __tmp_reg__
 4530 12f0 0F90      		pop __tmp_reg__
 4531 12f2 DF91      		pop r29
 4532 12f4 CF91      		pop r28
 4533 12f6 0895      		ret
 4534               	.LVL403:
 4535               	.L280:
 896:main.c        **** 	{
 4536               		.loc 1 896 2 view .LVU959
 4537 12f8 8E31      		cpi r24,lo8(30)
 4538 12fa 01F4      		brne .+2
 4539 12fc 00C0      		rjmp .L283
 4540 12fe 8F31      		cpi r24,lo8(31)
 4541 1300 01F4      		brne .L256
 915:main.c        **** 		break;
 4542               		.loc 1 915 3 is_stmt 1 view .LVU960
 4543               	/* epilogue start */
 938:main.c        **** 
 4544               		.loc 1 938 1 is_stmt 0 view .LVU961
 4545 1302 0F90      		pop __tmp_reg__
 4546 1304 0F90      		pop __tmp_reg__
 4547 1306 0F90      		pop __tmp_reg__
 4548 1308 0F90      		pop __tmp_reg__
 4549 130a DF91      		pop r29
 4550 130c CF91      		pop r28
 915:main.c        **** 		break;
 4551               		.loc 1 915 3 view .LVU962
 4552 130e 0C94 0000 		jmp mode_input
 4553               	.LVL404:
 4554               	.L281:
 901:main.c        **** 
 4555               		.loc 1 901 3 is_stmt 1 view .LVU963
 901:main.c        **** 
 4556               		.loc 1 901 15 is_stmt 0 view .LVU964
 4557 1312 80E0      		ldi r24,lo8(buf_start)
 4558 1314 90E0      		ldi r25,hi8(buf_start)
 4559               	.LVL405:
 901:main.c        **** 
 4560               		.loc 1 901 15 view .LVU965
 4561 1316 0E94 0000 		call atof
 4562               	.LVL406:
 4563 131a 6093 0000 		sts tbl_start,r22
 4564 131e 7093 0000 		sts tbl_start+1,r23
 4565 1322 8093 0000 		sts tbl_start+2,r24
 4566 1326 9093 0000 		sts tbl_start+3,r25
 904:main.c        **** 		{
 4567               		.loc 1 904 3 is_stmt 1 view .LVU966
 904:main.c        **** 		{
 4568               		.loc 1 904 18 is_stmt 0 view .LVU967
 4569 132a 80E0      		ldi r24,lo8(buf_step)
 4570 132c 90E0      		ldi r25,hi8(buf_step)
 4571 132e 0E94 0000 		call atof
 4572               	.LVL407:
 4573 1332 F62F      		mov r31,r22
 4574 1334 E72F      		mov r30,r23
 904:main.c        **** 		{
 4575               		.loc 1 904 16 view .LVU968
 4576 1336 462F      		mov r20,r22
 4577 1338 572F      		mov r21,r23
 4578 133a BC01      		movw r22,r24
 4579 133c 4093 0000 		sts tbl_step,r20
 4580 1340 5093 0000 		sts tbl_step+1,r21
 4581 1344 6093 0000 		sts tbl_step+2,r22
 4582 1348 7093 0000 		sts tbl_step+3,r23
 904:main.c        **** 		{
 4583               		.loc 1 904 5 view .LVU969
 4584 134c 20E0      		ldi r18,0
 4585 134e 30E0      		ldi r19,0
 4586 1350 A901      		movw r20,r18
 4587 1352 F983      		std Y+1,r31
 4588 1354 EA83      		std Y+2,r30
 4589 1356 8B83      		std Y+3,r24
 4590 1358 9C83      		std Y+4,r25
 4591 135a 6981      		ldd r22,Y+1
 4592 135c 7A81      		ldd r23,Y+2
 4593 135e 8B81      		ldd r24,Y+3
 4594 1360 9C81      		ldd r25,Y+4
 4595 1362 0E94 0000 		call __eqsf2
 4596               	.LVL408:
 4597 1366 8111      		cpse r24,__zero_reg__
 4598 1368 00C0      		rjmp .L288
 906:main.c        **** 			break;
 4599               		.loc 1 906 4 is_stmt 1 view .LVU970
 4600 136a 84E0      		ldi r24,lo8(4)
 4601               	/* epilogue start */
 938:main.c        **** 
 4602               		.loc 1 938 1 is_stmt 0 view .LVU971
 4603 136c 0F90      		pop __tmp_reg__
 4604 136e 0F90      		pop __tmp_reg__
 4605 1370 0F90      		pop __tmp_reg__
 4606 1372 0F90      		pop __tmp_reg__
 4607 1374 DF91      		pop r29
 4608 1376 CF91      		pop r28
 906:main.c        **** 			break;
 4609               		.loc 1 906 4 view .LVU972
 4610 1378 0C94 0000 		jmp mode_error
 4611               	.LVL409:
 4612               	.L288:
 910:main.c        **** 		break;
 4613               		.loc 1 910 3 is_stmt 1 view .LVU973
 4614               	.LBB159:
 4615               	.LBI159:
 782:main.c        **** {
 4616               		.loc 1 782 13 view .LVU974
 4617               	.LBB160:
 784:main.c        **** 	_event = mode_table_event;
 4618               		.loc 1 784 2 view .LVU975
 784:main.c        **** 	_event = mode_table_event;
 4619               		.loc 1 784 10 is_stmt 0 view .LVU976
 4620 137c 1092 0000 		sts tbl_pos,__zero_reg__
 4621 1380 1092 0000 		sts tbl_pos+1,__zero_reg__
 4622 1384 1092 0000 		sts tbl_pos+2,__zero_reg__
 4623 1388 1092 0000 		sts tbl_pos+3,__zero_reg__
 785:main.c        **** 	lcd_command(LCD_SET_DISPLAY | LCD_DISPLAY_ON |
 4624               		.loc 1 785 2 is_stmt 1 view .LVU977
 785:main.c        **** 	lcd_command(LCD_SET_DISPLAY | LCD_DISPLAY_ON |
 4625               		.loc 1 785 9 is_stmt 0 view .LVU978
 4626 138c 80E0      		ldi r24,lo8(gs(mode_table_event))
 4627 138e 90E0      		ldi r25,hi8(gs(mode_table_event))
 4628 1390 9093 0000 		sts _event+1,r25
 4629 1394 8093 0000 		sts _event,r24
 786:main.c        **** 		LCD_CURSOR_OFF | LCD_BLINKING_OFF);
 4630               		.loc 1 786 2 is_stmt 1 view .LVU979
 4631 1398 8CE0      		ldi r24,lo8(12)
 4632 139a 0E94 0000 		call lcd_command
 4633               	.LVL410:
 788:main.c        **** 	lcd_data('X');
 4634               		.loc 1 788 2 view .LVU980
 4635 139e 80E8      		ldi r24,lo8(-128)
 4636 13a0 0E94 0000 		call lcd_command
 4637               	.LVL411:
 789:main.c        **** 	lcd_data('=');
 4638               		.loc 1 789 2 view .LVU981
 4639 13a4 88E5      		ldi r24,lo8(88)
 4640 13a6 0E94 0000 		call lcd_data
 4641               	.LVL412:
 790:main.c        **** 	lcd_cursor(0, 1);
 4642               		.loc 1 790 2 view .LVU982
 4643 13aa 8DE3      		ldi r24,lo8(61)
 4644 13ac 0E94 0000 		call lcd_data
 4645               	.LVL413:
 791:main.c        **** 	lcd_data('Y');
 4646               		.loc 1 791 2 view .LVU983
 4647 13b0 80EC      		ldi r24,lo8(-64)
 4648 13b2 0E94 0000 		call lcd_command
 4649               	.LVL414:
 792:main.c        **** 	lcd_data('=');
 4650               		.loc 1 792 2 view .LVU984
 4651 13b6 89E5      		ldi r24,lo8(89)
 4652 13b8 0E94 0000 		call lcd_data
 4653               	.LVL415:
 793:main.c        **** 	mode_table_update();
 4654               		.loc 1 793 2 view .LVU985
 4655 13bc 8DE3      		ldi r24,lo8(61)
 4656 13be 0E94 0000 		call lcd_data
 4657               	.LVL416:
 794:main.c        **** }
 4658               		.loc 1 794 2 view .LVU986
 4659               	/* epilogue start */
 4660               	.LBE160:
 4661               	.LBE159:
 938:main.c        **** 
 4662               		.loc 1 938 1 is_stmt 0 view .LVU987
 4663 13c2 0F90      		pop __tmp_reg__
 4664 13c4 0F90      		pop __tmp_reg__
 4665 13c6 0F90      		pop __tmp_reg__
 4666 13c8 0F90      		pop __tmp_reg__
 4667 13ca DF91      		pop r29
 4668 13cc CF91      		pop r28
 4669               	.LBB162:
 4670               	.LBB161:
 794:main.c        **** }
 4671               		.loc 1 794 2 view .LVU988
 4672 13ce 0C94 0000 		jmp mode_table_update
 4673               	.LVL417:
 4674               	.L279:
 794:main.c        **** }
 4675               		.loc 1 794 2 view .LVU989
 4676               	.LBE161:
 4677               	.LBE162:
 920:main.c        **** 		{
 4678               		.loc 1 920 3 is_stmt 1 view .LVU990
 920:main.c        **** 		{
 4679               		.loc 1 920 5 is_stmt 0 view .LVU991
 4680 13d2 2981      		ldd r18,Y+1
 4681 13d4 3A81      		ldd r19,Y+2
 4682 13d6 2050      		subi r18,lo8(fld_start)
 4683 13d8 3040      		sbci r19,hi8(fld_start)
 4684               	.LVL418:
 920:main.c        **** 		{
 4685               		.loc 1 920 5 view .LVU992
 4686 13da 01F0      		breq .+2
 4687 13dc 00C0      		rjmp .L256
 922:main.c        **** 		}
 4688               		.loc 1 922 4 is_stmt 1 view .LVU993
 4689 13de 6DE2      		ldi r22,lo8(45)
 4690 13e0 80E0      		ldi r24,lo8(fld_start)
 4691 13e2 90E0      		ldi r25,hi8(fld_start)
 4692 13e4 00C0      		rjmp .L291
 4693               	.LVL419:
 4694               	.L283:
 928:main.c        **** 		field_update(tbl_cur_fld);
 4695               		.loc 1 928 3 view .LVU994
 928:main.c        **** 		field_update(tbl_cur_fld);
 4696               		.loc 1 928 15 is_stmt 0 view .LVU995
 4697 13e6 80E0      		ldi r24,lo8(fld_start)
 4698 13e8 90E0      		ldi r25,hi8(fld_start)
 4699               	.LVL420:
 4700               	.L290:
 934:main.c        **** 		field_update(tbl_cur_fld);
 4701               		.loc 1 934 15 view .LVU996
 4702 13ea 9093 0000 		sts tbl_cur_fld+1,r25
 4703 13ee 8093 0000 		sts tbl_cur_fld,r24
 4704 13f2 00C0      		rjmp .L292
 4705               	.LVL421:
 4706               	.L282:
 934:main.c        **** 		field_update(tbl_cur_fld);
 4707               		.loc 1 934 3 is_stmt 1 view .LVU997
 934:main.c        **** 		field_update(tbl_cur_fld);
 4708               		.loc 1 934 15 is_stmt 0 view .LVU998
 4709 13f4 80E0      		ldi r24,lo8(fld_step)
 4710 13f6 90E0      		ldi r25,hi8(fld_step)
 4711               	.LVL422:
 934:main.c        **** 		field_update(tbl_cur_fld);
 4712               		.loc 1 934 15 view .LVU999
 4713 13f8 00C0      		rjmp .L290
 4714               		.cfi_endproc
 4715               	.LFE44:
 4717               		.section	.text.startup,"ax",@progbits
 4718               	.global	main
 4720               	main:
 4721               	.LFB22:
 271:main.c        **** 	lcd_init();
 4722               		.loc 1 271 1 is_stmt 1 view -0
 4723               		.cfi_startproc
 4724               	/* prologue: function */
 4725               	/* frame size = 0 */
 4726               	/* stack size = 0 */
 4727               	.L__stack_usage = 0
 272:main.c        **** 
 4728               		.loc 1 272 2 view .LVU1001
 4729               	.LBB175:
 4730               	.LBI175:
 102:lcd.c         **** {
 4731               		.loc 2 102 13 view .LVU1002
 4732               	.LBB176:
 104:lcd.c         **** 	LCD_DIR |= pins;
 4733               		.loc 2 104 2 view .LVU1003
 4734               	.LVL423:
 105:lcd.c         **** 	LCD_OUT &= ~pins;
 4735               		.loc 2 105 2 view .LVU1004
 105:lcd.c         **** 	LCD_OUT &= ~pins;
 4736               		.loc 2 105 10 is_stmt 0 view .LVU1005
 4737 0000 8AB1      		in r24,0xa
 4738 0002 8C6F      		ori r24,lo8(-4)
 4739 0004 8AB9      		out 0xa,r24
 106:lcd.c         **** 	LCD_DELAY_MS(LCD_DELAY_MS_BOOTUP);
 4740               		.loc 2 106 2 is_stmt 1 view .LVU1006
 106:lcd.c         **** 	LCD_DELAY_MS(LCD_DELAY_MS_BOOTUP);
 4741               		.loc 2 106 10 is_stmt 0 view .LVU1007
 4742 0006 8BB1      		in r24,0xb
 4743 0008 8370      		andi r24,lo8(3)
 4744 000a 8BB9      		out 0xb,r24
 107:lcd.c         **** 	lcd_out(LCD_SOFT_RESET);
 4745               		.loc 2 107 2 is_stmt 1 view .LVU1008
 4746               	.LVL424:
 4747               	.LBB177:
 4748               	.LBI177:
 166:/usr/avr/include/util/delay.h **** {
 4749               		.loc 3 166 1 view .LVU1009
 4750               	.LBB178:
 168:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 4751               		.loc 3 168 2 view .LVU1010
 172:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 4752               		.loc 3 172 2 view .LVU1011
 173:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 4753               		.loc 3 173 2 view .LVU1012
 174:/usr/avr/include/util/delay.h **** 
 4754               		.loc 3 174 2 view .LVU1013
 184:/usr/avr/include/util/delay.h **** 	#endif
 4755               		.loc 3 184 3 view .LVU1014
 187:/usr/avr/include/util/delay.h **** 
 4756               		.loc 3 187 2 view .LVU1015
 4757 000c 8FE2      		ldi r24,lo8(29999)
 4758 000e 95E7      		ldi r25,hi8(29999)
 4759 0010 0197      	1:	sbiw r24,1
 4760 0012 01F4      		brne 1b
 4761 0014 00C0      		rjmp .
 4762 0016 0000      		nop
 4763               	.LVL425:
 187:/usr/avr/include/util/delay.h **** 
 4764               		.loc 3 187 2 is_stmt 0 view .LVU1016
 4765               	.LBE178:
 4766               	.LBE177:
 108:lcd.c         **** 	LCD_DELAY_MS(LCD_DELAY_MS_RESET_1);
 4767               		.loc 2 108 2 is_stmt 1 view .LVU1017
 4768 0018 80E3      		ldi r24,lo8(48)
 4769 001a 0E94 0000 		call lcd_out
 4770               	.LVL426:
 109:lcd.c         **** 	lcd_enable();
 4771               		.loc 2 109 2 view .LVU1018
 4772               	.LBB179:
 4773               	.LBI179:
 166:/usr/avr/include/util/delay.h **** {
 4774               		.loc 3 166 1 view .LVU1019
 4775               	.LBB180:
 168:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 4776               		.loc 3 168 2 view .LVU1020
 172:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 4777               		.loc 3 172 2 view .LVU1021
 173:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 4778               		.loc 3 173 2 view .LVU1022
 174:/usr/avr/include/util/delay.h **** 
 4779               		.loc 3 174 2 view .LVU1023
 184:/usr/avr/include/util/delay.h **** 	#endif
 4780               		.loc 3 184 3 view .LVU1024
 187:/usr/avr/include/util/delay.h **** 
 4781               		.loc 3 187 2 view .LVU1025
 4782 001e 8FE0      		ldi r24,lo8(9999)
 4783 0020 97E2      		ldi r25,hi8(9999)
 4784 0022 0197      	1:	sbiw r24,1
 4785 0024 01F4      		brne 1b
 4786 0026 00C0      		rjmp .
 4787 0028 0000      		nop
 4788               	.LVL427:
 187:/usr/avr/include/util/delay.h **** 
 4789               		.loc 3 187 2 is_stmt 0 view .LVU1026
 4790               	.LBE180:
 4791               	.LBE179:
 110:lcd.c         **** 	LCD_DELAY_MS(LCD_DELAY_MS_RESET_2);
 4792               		.loc 2 110 2 is_stmt 1 view .LVU1027
 4793 002a 0E94 0000 		call lcd_enable
 4794               	.LVL428:
 111:lcd.c         **** 	lcd_enable();
 4795               		.loc 2 111 2 view .LVU1028
 4796               	.LBB181:
 4797               	.LBI181:
 166:/usr/avr/include/util/delay.h **** {
 4798               		.loc 3 166 1 view .LVU1029
 4799               	.LBB182:
 168:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 4800               		.loc 3 168 2 view .LVU1030
 172:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 4801               		.loc 3 172 2 view .LVU1031
 173:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 4802               		.loc 3 173 2 view .LVU1032
 174:/usr/avr/include/util/delay.h **** 
 4803               		.loc 3 174 2 view .LVU1033
 184:/usr/avr/include/util/delay.h **** 	#endif
 4804               		.loc 3 184 3 view .LVU1034
 187:/usr/avr/include/util/delay.h **** 
 4805               		.loc 3 187 2 view .LVU1035
 4806 002e 8FEC      		ldi r24,lo8(1999)
 4807 0030 97E0      		ldi r25,hi8(1999)
 4808 0032 0197      	1:	sbiw r24,1
 4809 0034 01F4      		brne 1b
 4810 0036 00C0      		rjmp .
 4811 0038 0000      		nop
 4812               	.LVL429:
 187:/usr/avr/include/util/delay.h **** 
 4813               		.loc 3 187 2 is_stmt 0 view .LVU1036
 4814               	.LBE182:
 4815               	.LBE181:
 112:lcd.c         **** 	LCD_DELAY_MS(LCD_DELAY_MS_RESET_3);
 4816               		.loc 2 112 2 is_stmt 1 view .LVU1037
 4817 003a 0E94 0000 		call lcd_enable
 4818               	.LVL430:
 113:lcd.c         **** 	lcd_out(LCD_SET_FUNCTION | LCD_FUNCTION_4BIT);
 4819               		.loc 2 113 2 view .LVU1038
 4820               	.LBB183:
 4821               	.LBI183:
 166:/usr/avr/include/util/delay.h **** {
 4822               		.loc 3 166 1 view .LVU1039
 4823               	.LBB184:
 168:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 4824               		.loc 3 168 2 view .LVU1040
 172:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 4825               		.loc 3 172 2 view .LVU1041
 173:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 4826               		.loc 3 173 2 view .LVU1042
 174:/usr/avr/include/util/delay.h **** 
 4827               		.loc 3 174 2 view .LVU1043
 184:/usr/avr/include/util/delay.h **** 	#endif
 4828               		.loc 3 184 3 view .LVU1044
 187:/usr/avr/include/util/delay.h **** 
 4829               		.loc 3 187 2 view .LVU1045
 4830 003e 8FEC      		ldi r24,lo8(1999)
 4831 0040 97E0      		ldi r25,hi8(1999)
 4832 0042 0197      	1:	sbiw r24,1
 4833 0044 01F4      		brne 1b
 4834 0046 00C0      		rjmp .
 4835 0048 0000      		nop
 4836               	.LVL431:
 187:/usr/avr/include/util/delay.h **** 
 4837               		.loc 3 187 2 is_stmt 0 view .LVU1046
 4838               	.LBE184:
 4839               	.LBE183:
 114:lcd.c         **** 	LCD_DELAY_MS(LCD_DELAY_MS_4BIT);
 4840               		.loc 2 114 2 is_stmt 1 view .LVU1047
 4841 004a 80E2      		ldi r24,lo8(32)
 4842 004c 0E94 0000 		call lcd_out
 4843               	.LVL432:
 115:lcd.c         **** 	lcd_command(LCD_SET_FUNCTION | LCD_FUNCTION_4BIT |
 4844               		.loc 2 115 2 view .LVU1048
 4845               	.LBB185:
 4846               	.LBI185:
 166:/usr/avr/include/util/delay.h **** {
 4847               		.loc 3 166 1 view .LVU1049
 4848               	.LBB186:
 168:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 4849               		.loc 3 168 2 view .LVU1050
 172:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 4850               		.loc 3 172 2 view .LVU1051
 173:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 4851               		.loc 3 173 2 view .LVU1052
 174:/usr/avr/include/util/delay.h **** 
 4852               		.loc 3 174 2 view .LVU1053
 184:/usr/avr/include/util/delay.h **** 	#endif
 4853               		.loc 3 184 3 view .LVU1054
 187:/usr/avr/include/util/delay.h **** 
 4854               		.loc 3 187 2 view .LVU1055
 4855 0050 8FE0      		ldi r24,lo8(9999)
 4856 0052 97E2      		ldi r25,hi8(9999)
 4857 0054 0197      	1:	sbiw r24,1
 4858 0056 01F4      		brne 1b
 4859 0058 00C0      		rjmp .
 4860 005a 0000      		nop
 4861               	.LVL433:
 187:/usr/avr/include/util/delay.h **** 
 4862               		.loc 3 187 2 is_stmt 0 view .LVU1056
 4863               	.LBE186:
 4864               	.LBE185:
 116:lcd.c         **** 		LCD_FUNCTION_2LINE | LCD_FUNCTION_5X7);
 4865               		.loc 2 116 2 is_stmt 1 view .LVU1057
 4866 005c 88E2      		ldi r24,lo8(40)
 4867 005e 0E94 0000 		call lcd_command
 4868               	.LVL434:
 118:lcd.c         **** 		LCD_CURSOR_OFF | LCD_BLINKING_OFF);
 4869               		.loc 2 118 2 view .LVU1058
 4870 0062 8CE0      		ldi r24,lo8(12)
 4871 0064 0E94 0000 		call lcd_command
 4872               	.LVL435:
 120:lcd.c         **** 		LCD_ENTRY_NOSHIFT);
 4873               		.loc 2 120 2 view .LVU1059
 4874 0068 86E0      		ldi r24,lo8(6)
 4875 006a 0E94 0000 		call lcd_command
 4876               	.LVL436:
 122:lcd.c         **** }
 4877               		.loc 2 122 2 view .LVU1060
 4878 006e 0E94 0000 		call lcd_clear
 4879               	.LVL437:
 4880               	.LBE176:
 4881               	.LBE175:
 275:main.c        **** 
 4882               		.loc 1 275 2 view .LVU1061
 275:main.c        **** 
 4883               		.loc 1 275 9 is_stmt 0 view .LVU1062
 4884 0072 82E0      		ldi r24,lo8(2)
 4885 0074 8093 B000 		sts 176,r24
 278:main.c        **** 
 4886               		.loc 1 278 2 is_stmt 1 view .LVU1063
 278:main.c        **** 
 4887               		.loc 1 278 9 is_stmt 0 view .LVU1064
 4888 0078 95E0      		ldi r25,lo8(5)
 4889 007a 9093 B100 		sts 177,r25
 281:main.c        **** 
 4890               		.loc 1 281 2 is_stmt 1 view .LVU1065
 281:main.c        **** 
 4891               		.loc 1 281 9 is_stmt 0 view .LVU1066
 4892 007e 8093 7000 		sts 112,r24
 284:main.c        **** 
 4893               		.loc 1 284 2 is_stmt 1 view .LVU1067
 284:main.c        **** 
 4894               		.loc 1 284 8 is_stmt 0 view .LVU1068
 4895 0082 8EE4      		ldi r24,lo8(78)
 4896 0084 8093 B300 		sts 179,r24
 288:main.c        **** 	PORTC |= (1 << 4) | (1 << 5);
 4897               		.loc 1 288 2 is_stmt 1 view .LVU1069
 288:main.c        **** 	PORTC |= (1 << 4) | (1 << 5);
 4898               		.loc 1 288 8 is_stmt 0 view .LVU1070
 4899 0088 85B1      		in r24,0x5
 4900 008a 806F      		ori r24,lo8(-16)
 4901 008c 85B9      		out 0x5,r24
 289:main.c        **** 	PORTD |= (1 << 0) | (1 << 1);
 4902               		.loc 1 289 2 is_stmt 1 view .LVU1071
 289:main.c        **** 	PORTD |= (1 << 0) | (1 << 1);
 4903               		.loc 1 289 8 is_stmt 0 view .LVU1072
 4904 008e 88B1      		in r24,0x8
 4905 0090 8063      		ori r24,lo8(48)
 4906 0092 88B9      		out 0x8,r24
 290:main.c        **** 
 4907               		.loc 1 290 2 is_stmt 1 view .LVU1073
 290:main.c        **** 
 4908               		.loc 1 290 8 is_stmt 0 view .LVU1074
 4909 0094 8BB1      		in r24,0xb
 4910 0096 8360      		ori r24,lo8(3)
 4911 0098 8BB9      		out 0xb,r24
 292:main.c        **** 	memcpy_P(&fld_start, &_fld_start_P, sizeof(Field));
 4912               		.loc 1 292 2 is_stmt 1 view .LVU1075
 4913 009a 4BE0      		ldi r20,lo8(11)
 4914 009c 50E0      		ldi r21,0
 4915 009e 60E0      		ldi r22,lo8(_fld_term_P)
 4916 00a0 70E0      		ldi r23,hi8(_fld_term_P)
 4917 00a2 80E0      		ldi r24,lo8(fld_term)
 4918 00a4 90E0      		ldi r25,hi8(fld_term)
 4919 00a6 0E94 0000 		call memcpy_P
 4920               	.LVL438:
 293:main.c        **** 	memcpy_P(&fld_step, &_fld_step_P, sizeof(Field));
 4921               		.loc 1 293 2 view .LVU1076
 4922 00aa 4BE0      		ldi r20,lo8(11)
 4923 00ac 50E0      		ldi r21,0
 4924 00ae 60E0      		ldi r22,lo8(_fld_start_P)
 4925 00b0 70E0      		ldi r23,hi8(_fld_start_P)
 4926 00b2 80E0      		ldi r24,lo8(fld_start)
 4927 00b4 90E0      		ldi r25,hi8(fld_start)
 4928 00b6 0E94 0000 		call memcpy_P
 4929               	.LVL439:
 294:main.c        **** 	mode_input();
 4930               		.loc 1 294 2 view .LVU1077
 4931 00ba 4BE0      		ldi r20,lo8(11)
 4932 00bc 50E0      		ldi r21,0
 4933 00be 60E0      		ldi r22,lo8(_fld_step_P)
 4934 00c0 70E0      		ldi r23,hi8(_fld_step_P)
 4935 00c2 80E0      		ldi r24,lo8(fld_step)
 4936 00c4 90E0      		ldi r25,hi8(fld_step)
 4937 00c6 0E94 0000 		call memcpy_P
 4938               	.LVL440:
 295:main.c        **** 
 4939               		.loc 1 295 2 view .LVU1078
 4940 00ca 0E94 0000 		call mode_input
 4941               	.LVL441:
 297:main.c        **** 
 4942               		.loc 1 297 2 view .LVU1079
 4943               	/* #APP */
 4944               	 ;  297 "main.c" 1
 4945 00ce 7894      		sei
 4946               	 ;  0 "" 2
 301:main.c        **** 	power_spi_disable();
 4947               		.loc 1 301 2 view .LVU1080
 4948               	/* #NOAPP */
 4949 00d0 8091 6400 		lds r24,100
 4950 00d4 8160      		ori r24,lo8(1)
 4951 00d6 8093 6400 		sts 100,r24
 302:main.c        **** 	power_twi_disable();
 4952               		.loc 1 302 2 view .LVU1081
 4953 00da 8091 6400 		lds r24,100
 4954 00de 8460      		ori r24,lo8(4)
 4955 00e0 8093 6400 		sts 100,r24
 303:main.c        **** 	power_timer0_disable();
 4956               		.loc 1 303 2 view .LVU1082
 4957 00e4 8091 6400 		lds r24,100
 4958 00e8 8068      		ori r24,lo8(-128)
 4959 00ea 8093 6400 		sts 100,r24
 304:main.c        **** 	power_timer1_disable();
 4960               		.loc 1 304 2 view .LVU1083
 4961 00ee 8091 6400 		lds r24,100
 4962 00f2 8062      		ori r24,lo8(32)
 4963 00f4 8093 6400 		sts 100,r24
 305:main.c        **** 	power_usart0_disable();
 4964               		.loc 1 305 2 view .LVU1084
 4965 00f8 8091 6400 		lds r24,100
 4966 00fc 8860      		ori r24,lo8(8)
 4967 00fe 8093 6400 		sts 100,r24
 306:main.c        **** 	sleep_enable();
 4968               		.loc 1 306 2 view .LVU1085
 4969 0102 8091 6400 		lds r24,100
 4970 0106 8260      		ori r24,lo8(2)
 4971 0108 8093 6400 		sts 100,r24
 307:main.c        **** 	set_sleep_mode(SLEEP_MODE_PWR_SAVE);
 4972               		.loc 1 307 2 view .LVU1086
 307:main.c        **** 	set_sleep_mode(SLEEP_MODE_PWR_SAVE);
 4973               		.loc 1 307 2 view .LVU1087
 4974 010c 83B7      		in r24,0x33
 4975 010e 8160      		ori r24,lo8(1)
 4976 0110 83BF      		out 0x33,r24
 307:main.c        **** 	set_sleep_mode(SLEEP_MODE_PWR_SAVE);
 4977               		.loc 1 307 2 view .LVU1088
 308:main.c        **** 	for(;;) { sleep_cpu(); }
 4978               		.loc 1 308 2 view .LVU1089
 308:main.c        **** 	for(;;) { sleep_cpu(); }
 4979               		.loc 1 308 2 view .LVU1090
 4980 0112 83B7      		in r24,0x33
 4981 0114 817F      		andi r24,lo8(-15)
 4982 0116 8660      		ori r24,lo8(6)
 4983 0118 83BF      		out 0x33,r24
 4984               	.L296:
 308:main.c        **** 	for(;;) { sleep_cpu(); }
 4985               		.loc 1 308 2 discriminator 1 view .LVU1091
 309:main.c        **** 	return 0;
 4986               		.loc 1 309 2 discriminator 1 view .LVU1092
 309:main.c        **** 	return 0;
 4987               		.loc 1 309 12 discriminator 1 view .LVU1093
 309:main.c        **** 	return 0;
 4988               		.loc 1 309 12 discriminator 1 view .LVU1094
 4989               	/* #APP */
 4990               	 ;  309 "main.c" 1
 4991 011a 8895      		sleep
 4992               		
 4993               	 ;  0 "" 2
 309:main.c        **** 	return 0;
 4994               		.loc 1 309 12 discriminator 1 view .LVU1095
 309:main.c        **** 	return 0;
 4995               		.loc 1 309 7 discriminator 1 view .LVU1096
 4996               	/* #NOAPP */
 4997 011c 00C0      		rjmp .L296
 4998               		.cfi_endproc
 4999               	.LFE22:
 5001               		.text
 5002               	.global	__vector_7
 5004               	__vector_7:
 5005               	.LFB51:
1382:main.c        **** 	{
1383:main.c        **** 	case TT_ADD:
1384:main.c        **** 	case TT_SUB:
1385:main.c        **** 		return 3;
1386:main.c        **** 
1387:main.c        **** 	case TT_MUL:
1388:main.c        **** 	case TT_DIV:
1389:main.c        **** 		return 2;
1390:main.c        **** 
1391:main.c        **** 	case TT_POW:
1392:main.c        **** 		return 1;
1393:main.c        **** 	}
1394:main.c        **** 
1395:main.c        **** 	return 0;
1396:main.c        **** }
1397:main.c        **** 
1398:main.c        **** /* Key Scanning Interrupt */
1399:main.c        **** ISR(TIMER2_COMPA_vect)
1400:main.c        **** {
 5006               		.loc 1 1400 1 view -0
 5007               		.cfi_startproc
 5008 13fa 1F92      		push r1
 5009               	.LCFI69:
 5010               		.cfi_def_cfa_offset 3
 5011               		.cfi_offset 1, -2
 5012 13fc 0F92      		push r0
 5013               	.LCFI70:
 5014               		.cfi_def_cfa_offset 4
 5015               		.cfi_offset 0, -3
 5016 13fe 0FB6      		in r0,__SREG__
 5017 1400 0F92      		push r0
 5018 1402 1124      		clr __zero_reg__
 5019 1404 2F93      		push r18
 5020               	.LCFI71:
 5021               		.cfi_def_cfa_offset 5
 5022               		.cfi_offset 18, -4
 5023 1406 3F93      		push r19
 5024               	.LCFI72:
 5025               		.cfi_def_cfa_offset 6
 5026               		.cfi_offset 19, -5
 5027 1408 4F93      		push r20
 5028               	.LCFI73:
 5029               		.cfi_def_cfa_offset 7
 5030               		.cfi_offset 20, -6
 5031 140a 5F93      		push r21
 5032               	.LCFI74:
 5033               		.cfi_def_cfa_offset 8
 5034               		.cfi_offset 21, -7
 5035 140c 6F93      		push r22
 5036               	.LCFI75:
 5037               		.cfi_def_cfa_offset 9
 5038               		.cfi_offset 22, -8
 5039 140e 7F93      		push r23
 5040               	.LCFI76:
 5041               		.cfi_def_cfa_offset 10
 5042               		.cfi_offset 23, -9
 5043 1410 8F93      		push r24
 5044               	.LCFI77:
 5045               		.cfi_def_cfa_offset 11
 5046               		.cfi_offset 24, -10
 5047 1412 9F93      		push r25
 5048               	.LCFI78:
 5049               		.cfi_def_cfa_offset 12
 5050               		.cfi_offset 25, -11
 5051 1414 AF93      		push r26
 5052               	.LCFI79:
 5053               		.cfi_def_cfa_offset 13
 5054               		.cfi_offset 26, -12
 5055 1416 BF93      		push r27
 5056               	.LCFI80:
 5057               		.cfi_def_cfa_offset 14
 5058               		.cfi_offset 27, -13
 5059 1418 CF93      		push r28
 5060               	.LCFI81:
 5061               		.cfi_def_cfa_offset 15
 5062               		.cfi_offset 28, -14
 5063 141a EF93      		push r30
 5064               	.LCFI82:
 5065               		.cfi_def_cfa_offset 16
 5066               		.cfi_offset 30, -15
 5067 141c FF93      		push r31
 5068               	.LCFI83:
 5069               		.cfi_def_cfa_offset 17
 5070               		.cfi_offset 31, -16
 5071               	/* prologue: Signal */
 5072               	/* frame size = 0 */
 5073               	/* stack size = 16 */
 5074               	.L__stack_usage = 16
1401:main.c        **** 	static int8_t last_key = KEY_NULL;
 5075               		.loc 1 1401 2 view .LVU1098
1402:main.c        **** 	static uint8_t t = 0, lt = 3;
 5076               		.loc 1 1402 2 view .LVU1099
1403:main.c        **** 	static uint16_t key_states = 0;
 5077               		.loc 1 1403 2 view .LVU1100
1404:main.c        **** 
1405:main.c        **** 	key_states |= (PINC & 0x0F) << (4 * lt);
 5078               		.loc 1 1405 2 view .LVU1101
 5079               		.loc 1 1405 17 is_stmt 0 view .LVU1102
 5080 141e 86B1      		in r24,0x6
 5081               		.loc 1 1405 36 view .LVU1103
 5082 1420 4091 0000 		lds r20,lt.3
 5083               		.loc 1 1405 22 view .LVU1104
 5084 1424 8F70      		andi r24,lo8(15)
 5085 1426 90E0      		ldi r25,0
 5086               		.loc 1 1405 36 view .LVU1105
 5087 1428 54E0      		ldi r21,lo8(4)
 5088 142a 459F      		mul r20,r21
 5089 142c 9001      		movw r18,r0
 5090 142e 1124      		clr __zero_reg__
 5091               		.loc 1 1405 30 view .LVU1106
 5092 1430 00C0      		rjmp 2f
 5093               		1:
 5094 1432 880F      		lsl r24
 5095 1434 991F      		rol r25
 5096               		2:
 5097 1436 2A95      		dec r18
 5098 1438 02F4      		brpl 1b
 5099               		.loc 1 1405 13 view .LVU1107
 5100 143a 2091 0000 		lds r18,key_states.2
 5101 143e 3091 0000 		lds r19,key_states.2+1
 5102 1442 822B      		or r24,r18
 5103 1444 932B      		or r25,r19
 5104 1446 9093 0000 		sts key_states.2+1,r25
 5105 144a 8093 0000 		sts key_states.2,r24
1406:main.c        **** 	DDRB &= ~(1 << lt);
 5106               		.loc 1 1406 2 is_stmt 1 view .LVU1108
 5107               		.loc 1 1406 7 is_stmt 0 view .LVU1109
 5108 144e 54B1      		in r21,0x4
 5109               		.loc 1 1406 14 view .LVU1110
 5110 1450 81E0      		ldi r24,lo8(1)
 5111 1452 90E0      		ldi r25,0
 5112 1454 9C01      		movw r18,r24
 5113 1456 00C0      		rjmp 2f
 5114               		1:
 5115 1458 220F      		lsl r18
 5116               		2:
 5117 145a 4A95      		dec r20
 5118 145c 02F4      		brpl 1b
 5119               		.loc 1 1406 7 view .LVU1111
 5120 145e 2095      		com r18
 5121 1460 2523      		and r18,r21
 5122 1462 24B9      		out 0x4,r18
1407:main.c        **** 	PORTB &= ~(1 << lt);
 5123               		.loc 1 1407 2 is_stmt 1 view .LVU1112
 5124               		.loc 1 1407 8 is_stmt 0 view .LVU1113
 5125 1464 25B1      		in r18,0x5
 5126               		.loc 1 1407 15 view .LVU1114
 5127 1466 3091 0000 		lds r19,lt.3
 5128 146a 00C0      		rjmp 2f
 5129               		1:
 5130 146c 880F      		lsl r24
 5131               		2:
 5132 146e 3A95      		dec r19
 5133 1470 02F4      		brpl 1b
 5134               		.loc 1 1407 8 view .LVU1115
 5135 1472 8095      		com r24
 5136 1474 8223      		and r24,r18
 5137 1476 85B9      		out 0x5,r24
1408:main.c        **** 
1409:main.c        **** 	if(++lt == 4)
 5138               		.loc 1 1409 2 is_stmt 1 view .LVU1116
 5139               		.loc 1 1409 5 is_stmt 0 view .LVU1117
 5140 1478 8091 0000 		lds r24,lt.3
 5141 147c 91E0      		ldi r25,lo8(1)
 5142 147e 980F      		add r25,r24
 5143               		.loc 1 1409 4 view .LVU1118
 5144 1480 8330      		cpi r24,lo8(3)
 5145 1482 01F0      		breq .L298
 5146 1484 9093 0000 		sts lt.3,r25
 5147               	.L299:
1410:main.c        **** 	{
1411:main.c        **** 		lt = 0;
1412:main.c        **** 	}
1413:main.c        **** 
1414:main.c        **** 	DDRB |= (1 << t);
 5148               		.loc 1 1414 2 is_stmt 1 view .LVU1119
 5149               		.loc 1 1414 7 is_stmt 0 view .LVU1120
 5150 1488 24B1      		in r18,0x4
 5151               		.loc 1 1414 13 view .LVU1121
 5152 148a 3091 0000 		lds r19,t.1
 5153 148e 81E0      		ldi r24,lo8(1)
 5154 1490 90E0      		ldi r25,0
 5155 1492 AC01      		movw r20,r24
 5156 1494 00C0      		rjmp 2f
 5157               		1:
 5158 1496 440F      		lsl r20
 5159               		2:
 5160 1498 3A95      		dec r19
 5161 149a 02F4      		brpl 1b
 5162               		.loc 1 1414 7 view .LVU1122
 5163 149c 242B      		or r18,r20
 5164 149e 24B9      		out 0x4,r18
1415:main.c        **** 	PORTB |= (1 << t);
 5165               		.loc 1 1415 2 is_stmt 1 view .LVU1123
 5166               		.loc 1 1415 8 is_stmt 0 view .LVU1124
 5167 14a0 25B1      		in r18,0x5
 5168               		.loc 1 1415 14 view .LVU1125
 5169 14a2 3091 0000 		lds r19,t.1
 5170 14a6 00C0      		rjmp 2f
 5171               		1:
 5172 14a8 880F      		lsl r24
 5173               		2:
 5174 14aa 3A95      		dec r19
 5175 14ac 02F4      		brpl 1b
 5176               		.loc 1 1415 8 view .LVU1126
 5177 14ae 822B      		or r24,r18
 5178 14b0 85B9      		out 0x5,r24
1416:main.c        **** 
1417:main.c        **** 	if(++t == 4)
 5179               		.loc 1 1417 2 is_stmt 1 view .LVU1127
 5180               		.loc 1 1417 5 is_stmt 0 view .LVU1128
 5181 14b2 8091 0000 		lds r24,t.1
 5182 14b6 91E0      		ldi r25,lo8(1)
 5183 14b8 980F      		add r25,r24
 5184               		.loc 1 1417 4 view .LVU1129
 5185 14ba 8330      		cpi r24,lo8(3)
 5186 14bc 01F0      		breq .L300
 5187 14be 9093 0000 		sts t.1,r25
 5188               	.L297:
 5189               	/* epilogue start */
1418:main.c        **** 	{
1419:main.c        **** 		int8_t key = KEY_NULL;
1420:main.c        **** 		for(t = 0; t < 16; ++t)
1421:main.c        **** 		{
1422:main.c        **** 			/* pressed */
1423:main.c        **** 			if((key_states >> t) & 1)
1424:main.c        **** 			{
1425:main.c        **** 				key = t;
1426:main.c        **** 
1427:main.c        **** 				/* shift */
1428:main.c        **** 				if(!((PINB >> PIN_SHIFT) & 1))
1429:main.c        **** 				{
1430:main.c        **** 					key += 16;
1431:main.c        **** 				}
1432:main.c        **** 				break;
1433:main.c        **** 			}
1434:main.c        **** 		}
1435:main.c        **** 
1436:main.c        **** 		key_states = 0;
1437:main.c        **** 		t = 0;
1438:main.c        **** 		if(key != last_key && last_key == KEY_NULL)
1439:main.c        **** 		{
1440:main.c        **** 			_event((uint8_t)key);
1441:main.c        **** 		}
1442:main.c        **** 
1443:main.c        **** 		last_key = key;
1444:main.c        **** 	}
1445:main.c        **** }
 5190               		.loc 1 1445 1 view .LVU1130
 5191 14c2 FF91      		pop r31
 5192 14c4 EF91      		pop r30
 5193 14c6 CF91      		pop r28
 5194 14c8 BF91      		pop r27
 5195 14ca AF91      		pop r26
 5196 14cc 9F91      		pop r25
 5197 14ce 8F91      		pop r24
 5198 14d0 7F91      		pop r23
 5199 14d2 6F91      		pop r22
 5200 14d4 5F91      		pop r21
 5201 14d6 4F91      		pop r20
 5202 14d8 3F91      		pop r19
 5203 14da 2F91      		pop r18
 5204 14dc 0F90      		pop r0
 5205 14de 0FBE      		out __SREG__,r0
 5206 14e0 0F90      		pop r0
 5207 14e2 1F90      		pop r1
 5208 14e4 1895      		reti
 5209               	.L298:
1411:main.c        **** 	}
 5210               		.loc 1 1411 3 is_stmt 1 view .LVU1131
1411:main.c        **** 	}
 5211               		.loc 1 1411 6 is_stmt 0 view .LVU1132
 5212 14e6 1092 0000 		sts lt.3,__zero_reg__
 5213 14ea 00C0      		rjmp .L299
 5214               	.L300:
 5215               	.LBB187:
1419:main.c        **** 		for(t = 0; t < 16; ++t)
 5216               		.loc 1 1419 3 is_stmt 1 view .LVU1133
 5217               	.LVL442:
1420:main.c        **** 		{
 5218               		.loc 1 1420 3 view .LVU1134
1423:main.c        **** 			{
 5219               		.loc 1 1423 19 is_stmt 0 view .LVU1135
 5220 14ec 2091 0000 		lds r18,key_states.2
 5221 14f0 3091 0000 		lds r19,key_states.2+1
1420:main.c        **** 		{
 5222               		.loc 1 1420 3 view .LVU1136
 5223 14f4 90E0      		ldi r25,0
 5224 14f6 80E0      		ldi r24,0
 5225               	.L302:
 5226 14f8 C82F      		mov r28,r24
1420:main.c        **** 		{
 5227               		.loc 1 1420 14 is_stmt 1 discriminator 1 view .LVU1137
1420:main.c        **** 		{
 5228               		.loc 1 1420 3 is_stmt 0 discriminator 1 view .LVU1138
 5229 14fa 8031      		cpi r24,16
 5230 14fc 9105      		cpc r25,__zero_reg__
 5231 14fe 01F4      		brne .L305
1419:main.c        **** 		for(t = 0; t < 16; ++t)
 5232               		.loc 1 1419 10 view .LVU1139
 5233 1500 CFEF      		ldi r28,lo8(-1)
 5234 1502 00C0      		rjmp .L304
 5235               	.L305:
1423:main.c        **** 			{
 5236               		.loc 1 1423 4 is_stmt 1 view .LVU1140
1423:main.c        **** 			{
 5237               		.loc 1 1423 6 is_stmt 0 view .LVU1141
 5238 1504 AC01      		movw r20,r24
 5239 1506 4F5F      		subi r20,-1
 5240 1508 5F4F      		sbci r21,-1
1423:main.c        **** 			{
 5241               		.loc 1 1423 19 view .LVU1142
 5242 150a B901      		movw r22,r18
 5243 150c 082E      		mov r0,r24
 5244 150e 00C0      		rjmp 2f
 5245               		1:
 5246 1510 7695      		lsr r23
 5247 1512 6795      		ror r22
 5248               		2:
 5249 1514 0A94      		dec r0
 5250 1516 02F4      		brpl 1b
1423:main.c        **** 			{
 5251               		.loc 1 1423 6 view .LVU1143
 5252 1518 60FF      		sbrs r22,0
 5253 151a 00C0      		rjmp .L307
 5254 151c 8093 0000 		sts t.1,r24
1425:main.c        **** 
 5255               		.loc 1 1425 5 is_stmt 1 view .LVU1144
 5256               	.LVL443:
1428:main.c        **** 				{
 5257               		.loc 1 1428 5 view .LVU1145
1428:main.c        **** 				{
 5258               		.loc 1 1428 7 is_stmt 0 view .LVU1146
 5259 1520 1C9B      		sbis 0x3,4
 5260 1522 00C0      		rjmp .L303
1425:main.c        **** 
 5261               		.loc 1 1425 9 view .LVU1147
 5262 1524 C82F      		mov r28,r24
 5263               	.LVL444:
 5264               	.L304:
1436:main.c        **** 		t = 0;
 5265               		.loc 1 1436 3 is_stmt 1 view .LVU1148
1436:main.c        **** 		t = 0;
 5266               		.loc 1 1436 14 is_stmt 0 view .LVU1149
 5267 1526 1092 0000 		sts key_states.2+1,__zero_reg__
 5268 152a 1092 0000 		sts key_states.2,__zero_reg__
1437:main.c        **** 		if(key != last_key && last_key == KEY_NULL)
 5269               		.loc 1 1437 3 is_stmt 1 view .LVU1150
1437:main.c        **** 		if(key != last_key && last_key == KEY_NULL)
 5270               		.loc 1 1437 5 is_stmt 0 view .LVU1151
 5271 152e 1092 0000 		sts t.1,__zero_reg__
1438:main.c        **** 		{
 5272               		.loc 1 1438 3 is_stmt 1 view .LVU1152
1438:main.c        **** 		{
 5273               		.loc 1 1438 10 is_stmt 0 view .LVU1153
 5274 1532 8091 0000 		lds r24,last_key.0
1438:main.c        **** 		{
 5275               		.loc 1 1438 5 view .LVU1154
 5276 1536 8C17      		cp r24,r28
 5277 1538 01F0      		breq .L306
1438:main.c        **** 		{
 5278               		.loc 1 1438 22 discriminator 1 view .LVU1155
 5279 153a 8F3F      		cpi r24,lo8(-1)
 5280 153c 01F4      		brne .L306
1440:main.c        **** 		}
 5281               		.loc 1 1440 4 is_stmt 1 view .LVU1156
 5282 153e E091 0000 		lds r30,_event
 5283 1542 F091 0000 		lds r31,_event+1
 5284 1546 8C2F      		mov r24,r28
 5285 1548 0995      		icall
 5286               	.LVL445:
 5287               	.L306:
1443:main.c        **** 	}
 5288               		.loc 1 1443 3 view .LVU1157
1443:main.c        **** 	}
 5289               		.loc 1 1443 12 is_stmt 0 view .LVU1158
 5290 154a C093 0000 		sts last_key.0,r28
 5291               	.LBE187:
 5292               		.loc 1 1445 1 view .LVU1159
 5293 154e 00C0      		rjmp .L297
 5294               	.LVL446:
 5295               	.L303:
 5296               	.LBB188:
1430:main.c        **** 				}
 5297               		.loc 1 1430 6 is_stmt 1 view .LVU1160
1430:main.c        **** 				}
 5298               		.loc 1 1430 10 is_stmt 0 view .LVU1161
 5299 1550 C05F      		subi r28,lo8(-(16))
 5300               	.LVL447:
1430:main.c        **** 				}
 5301               		.loc 1 1430 10 view .LVU1162
 5302 1552 00C0      		rjmp .L304
 5303               	.LVL448:
 5304               	.L307:
1430:main.c        **** 				}
 5305               		.loc 1 1430 10 view .LVU1163
 5306 1554 CA01      		movw r24,r20
 5307 1556 00C0      		rjmp .L302
 5308               	.LBE188:
 5309               		.cfi_endproc
 5310               	.LFE51:
 5312               		.section	.rodata
 5315               	CSWTCH.108:
 5316 0000 03        		.byte	3
 5317 0001 03        		.byte	3
 5318 0002 02        		.byte	2
 5319 0003 02        		.byte	2
 5320 0004 01        		.byte	1
 5321               		.data
 5324               	last_key.0:
 5325 0000 FF        		.byte	-1
 5326               		.local	t.1
 5327               		.comm	t.1,1,1
 5328               		.local	key_states.2
 5329               		.comm	key_states.2,2,1
 5332               	lt.3:
 5333 0001 03        		.byte	3
 5334               		.local	_mode
 5335               		.comm	_mode,2,1
 5336               		.local	_event
 5337               		.comm	_event,2,1
 5338               		.section	.progmem.data,"a",@progbits
 5341               	_fld_step_P:
 5342 0000 01        		.byte	1
 5343 0001 05        		.byte	5
 5344 0002 0B        		.byte	11
 5345 0003 0000      		.word	buf_step
 5346 0005 0000      		.word	0
 5347 0007 0000      		.word	0
 5348 0009 1000      		.word	16
 5351               	_fld_start_P:
 5352 000b 00        		.byte	0
 5353 000c 06        		.byte	6
 5354 000d 0A        		.byte	10
 5355 000e 0000      		.word	buf_start
 5356 0010 0000      		.word	0
 5357 0012 0000      		.word	0
 5358 0014 1000      		.word	16
 5361               	_fld_term_P:
 5362 0016 00        		.byte	0
 5363 0017 00        		.byte	0
 5364 0018 10        		.byte	16
 5365 0019 0000      		.word	buf_term
 5366 001b 0000      		.word	0
 5367 001d 0000      		.word	0
 5368 001f 0001      		.word	256
 5369               		.local	_buf_conv
 5370               		.comm	_buf_conv,17,1
 5371               		.local	tok_num_list
 5372               		.comm	tok_num_list,128,1
 5373               		.local	tok_type_list
 5374               		.comm	tok_type_list,32,1
 5375               		.local	num_stack
 5376               		.comm	num_stack,128,1
 5377               		.local	op_stack
 5378               		.comm	op_stack,32,1
 5379               		.local	tok_cnt
 5380               		.comm	tok_cnt,1,1
 5381               		.local	tbl_step
 5382               		.comm	tbl_step,4,1
 5383               		.local	tbl_start
 5384               		.comm	tbl_start,4,1
 5385               		.local	tbl_pos
 5386               		.comm	tbl_pos,4,1
 5387               		.local	tbl_cur_fld
 5388               		.comm	tbl_cur_fld,2,1
 5389               		.local	buf_step
 5390               		.comm	buf_step,16,1
 5391               		.local	fld_step
 5392               		.comm	fld_step,11,1
 5393               		.local	buf_start
 5394               		.comm	buf_start,16,1
 5395               		.local	fld_start
 5396               		.comm	fld_start,11,1
 5397               		.local	x_cnt
 5398               		.comm	x_cnt,1,1
 5399               		.local	buf_term
 5400               		.comm	buf_term,256,1
 5401               		.local	fld_term
 5402               		.comm	fld_term,11,1
 5405               	_err_msg:
 5406 0021 0000      		.word	_str_syntax_error
 5407 0023 0000      		.word	_str_math_error
 5408 0025 0000      		.word	_str_not_enough_mem
 5409 0027 0000      		.word	_str_range_error
 5412               	_str_range_error:
 5413 0029 5261 6E67 		.string	"Range Error"
 5413      6520 4572 
 5413      726F 7200 
 5416               	_str_not_enough_mem:
 5417 0035 4E6F 7420 		.string	"Not enough mem."
 5417      656E 6F75 
 5417      6768 206D 
 5417      656D 2E00 
 5420               	_str_math_error:
 5421 0045 4D61 7468 		.string	"Math. Error"
 5421      2E20 4572 
 5421      726F 7200 
 5424               	_str_syntax_error:
 5425 0051 5379 6E74 		.string	"Syntax Error"
 5425      6178 2045 
 5425      7272 6F72 
 5425      00
 5428               	_str_press_any_key:
 5429 005e 5072 6573 		.string	"Press any key"
 5429      7320 616E 
 5429      7920 6B65 
 5429      7900 
 5432               	_str_error:
 5433 006c 4552 524F 		.string	"ERROR"
 5433      5200 
 5436               	_str_step:
 5437 0072 5354 4550 		.string	"STEP="
 5437      3D00 
 5440               	_str_start:
 5441 0078 5354 4152 		.string	"START="
 5441      543D 00
 5444               	_str_log:
 5445 007f 6C6F 6700 		.string	"log"
 5448               	_str_atan:
 5449 0083 6174 616E 		.string	"atan"
 5449      00
 5452               	_str_acos:
 5453 0088 6163 6F73 		.string	"acos"
 5453      00
 5456               	_str_asin:
 5457 008d 6173 696E 		.string	"asin"
 5457      00
 5460               	_str_tan:
 5461 0092 7461 6E00 		.string	"tan"
 5464               	_str_cos:
 5465 0096 636F 7300 		.string	"cos"
 5468               	_str_sin:
 5469 009a 7369 6E00 		.string	"sin"
 5470               		.text
 5471               	.Letext0:
 5472               		.file 4 "/usr/avr/include/stdint.h"
 5473               		.file 5 "/usr/avr/include/math.h"
 5474               		.file 6 "/usr/avr/include/stdlib.h"
 5475               		.file 7 "/usr/avr/include/ctype.h"
 5476               		.file 8 "/usr/avr/include/avr/pgmspace.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccsTry91.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccsTry91.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccsTry91.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccsTry91.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccsTry91.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccsTry91.s:11     .text:0000000000000000 field_grow
     /tmp/ccsTry91.s:103    .text:0000000000000052 field_shrink
     /tmp/ccsTry91.s:171    .text:000000000000008a mode_error_event
     /tmp/ccsTry91.s:5329   .bss:0000000000000003 _mode
     /tmp/ccsTry91.s:190    .text:0000000000000094 lcd_enable
     /tmp/ccsTry91.s:233    .text:00000000000000a2 lcd_out
     /tmp/ccsTry91.s:266    .text:00000000000000b4 lcd_data
     /tmp/ccsTry91.s:322    .text:00000000000000d4 lcd_string
     /tmp/ccsTry91.s:371    .text:00000000000000ec lcd_string_P
     /tmp/ccsTry91.s:434    .text:0000000000000108 lcd_command
     /tmp/ccsTry91.s:489    .text:0000000000000126 field_update
     /tmp/ccsTry91.s:693    .text:0000000000000206 lcd_clear
     /tmp/ccsTry91.s:733    .text:000000000000021a mode_input
     /tmp/ccsTry91.s:2283   .text:000000000000094a mode_input_event
     /tmp/ccsTry91.s:5335   .bss:0000000000000005 _event
     /tmp/ccsTry91.s:5400   .bss:000000000000029e fld_term
     /tmp/ccsTry91.s:769    .text:0000000000000244 mode_settings
     /tmp/ccsTry91.s:4145   .text:0000000000001196 mode_settings_event
     /tmp/ccsTry91.s:5394   .bss:0000000000000192 fld_start
     /tmp/ccsTry91.s:5386   .bss:0000000000000165 tbl_cur_fld
     /tmp/ccsTry91.s:5440   .progmem.data:0000000000000078 _str_start
     /tmp/ccsTry91.s:5392   .bss:0000000000000182 buf_start
     /tmp/ccsTry91.s:5436   .progmem.data:0000000000000072 _str_step
     /tmp/ccsTry91.s:5388   .bss:0000000000000167 buf_step
     /tmp/ccsTry91.s:835    .text:00000000000002a4 mode_error
     /tmp/ccsTry91.s:5405   .progmem.data:0000000000000021 _err_msg
     /tmp/ccsTry91.s:5428   .progmem.data:000000000000005e _str_press_any_key
     /tmp/ccsTry91.s:913    .text:00000000000002e2 calc_solve
     /tmp/ccsTry91.s:5378   .bss:0000000000000158 tok_cnt
     /tmp/ccsTry91.s:5372   .bss:0000000000000098 tok_type_list
     /tmp/ccsTry91.s:5374   .bss:00000000000000b8 num_stack
     /tmp/ccsTry91.s:5370   .bss:0000000000000018 tok_num_list
     /tmp/ccsTry91.s:1716   .text:00000000000006be mode_table_update
     /tmp/ccsTry91.s:5380   .bss:0000000000000159 tbl_step
     /tmp/ccsTry91.s:5384   .bss:0000000000000161 tbl_pos
     /tmp/ccsTry91.s:5382   .bss:000000000000015d tbl_start
     /tmp/ccsTry91.s:5337   .bss:0000000000000007 _buf_conv
     /tmp/ccsTry91.s:5432   .progmem.data:000000000000006c _str_error
     /tmp/ccsTry91.s:1931   .text:00000000000007d2 mode_table_event
     /tmp/ccsTry91.s:2038   .text:0000000000000872 field_ins_chr
     /tmp/ccsTry91.s:2139   .text:00000000000008c0 field_ins_str_P.constprop.0
     /tmp/ccsTry91.s:5396   .bss:000000000000019d x_cnt
     /tmp/ccsTry91.s:5398   .bss:000000000000019e buf_term
     /tmp/ccsTry91.s:4113   .text:0000000000001186 mode_result_event
     /tmp/ccsTry91.s:5315   .rodata:0000000000000000 CSWTCH.108
     /tmp/ccsTry91.s:5376   .bss:0000000000000138 op_stack
     /tmp/ccsTry91.s:5468   .progmem.data:000000000000009a _str_sin
     /tmp/ccsTry91.s:5456   .progmem.data:000000000000008d _str_asin
     /tmp/ccsTry91.s:5464   .progmem.data:0000000000000096 _str_cos
     /tmp/ccsTry91.s:5452   .progmem.data:0000000000000088 _str_acos
     /tmp/ccsTry91.s:5460   .progmem.data:0000000000000092 _str_tan
     /tmp/ccsTry91.s:5444   .progmem.data:000000000000007f _str_log
     /tmp/ccsTry91.s:5448   .progmem.data:0000000000000083 _str_atan
     /tmp/ccsTry91.s:5390   .bss:0000000000000177 fld_step
     /tmp/ccsTry91.s:4720   .text.startup:0000000000000000 main
     /tmp/ccsTry91.s:5361   .progmem.data:0000000000000016 _fld_term_P
     /tmp/ccsTry91.s:5351   .progmem.data:000000000000000b _fld_start_P
     /tmp/ccsTry91.s:5341   .progmem.data:0000000000000000 _fld_step_P
     /tmp/ccsTry91.s:5004   .text:00000000000013fa __vector_7
     /tmp/ccsTry91.s:5332   .data:0000000000000001 lt.3
     /tmp/ccsTry91.s:5327   .bss:0000000000000001 key_states.2
                             .bss:0000000000000000 t.1
     /tmp/ccsTry91.s:5324   .data:0000000000000000 last_key.0
     /tmp/ccsTry91.s:5424   .progmem.data:0000000000000051 _str_syntax_error
     /tmp/ccsTry91.s:5420   .progmem.data:0000000000000045 _str_math_error
     /tmp/ccsTry91.s:5416   .progmem.data:0000000000000035 _str_not_enough_mem
     /tmp/ccsTry91.s:5412   .progmem.data:0000000000000029 _str_range_error

UNDEFINED SYMBOLS
__addsf3
__subsf3
__mulsf3
__eqsf2
__divsf3
__gesf2
__lesf2
__tablejump2__
log
sin
cos
tan
acos
atan
pow
asin
dtostrf
__floatsisf
islower
atof
memcpy_P
__do_copy_data
__do_clear_bss
